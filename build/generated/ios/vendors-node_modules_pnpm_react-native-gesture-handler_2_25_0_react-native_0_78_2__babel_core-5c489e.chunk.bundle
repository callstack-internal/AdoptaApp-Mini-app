(self["webpackChunkadopta_app"] = self["webpackChunkadopta_app"] || []).push([["vendors-node_modules_pnpm_react-native-gesture-handler_2_25_0_react-native_0_78_2__babel_core-5c489e"], {
"./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_construct.cjs": 
/*!*********************************************************************************************!*\
  !*** ./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_construct.cjs ***!
  \*********************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

var _is_native_reflect_construct = __webpack_require__(/*! ./_is_native_reflect_construct.cjs */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_is_native_reflect_construct.cjs");
var _set_prototype_of = __webpack_require__(/*! ./_set_prototype_of.cjs */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_set_prototype_of.cjs");
function _construct(Parent, args, Class) {
    if (_is_native_reflect_construct._()) exports._ = _construct = Reflect.construct;
    else {
        exports._ = _construct = function construct(Parent, args, Class) {
            var a = [
                null
            ];
            a.push.apply(a, args);
            var Constructor = Function.bind.apply(Parent, a);
            var instance = new Constructor();
            if (Class) _set_prototype_of._(instance, Class.prototype);
            return instance;
        };
    }
    return _construct.apply(null, arguments);
}
exports._ = _construct;


}),
"./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_get.cjs": 
/*!***************************************************************************************!*\
  !*** ./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_get.cjs ***!
  \***************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

var _super_prop_base = __webpack_require__(/*! ./_super_prop_base.cjs */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_super_prop_base.cjs");
function _get(target, property, receiver) {
    if (typeof Reflect !== "undefined" && Reflect.get) exports._ = _get = Reflect.get;
    else {
        exports._ = _get = function get(target, property, receiver) {
            var base = _super_prop_base._(target, property);
            if (!base) return;
            var desc = Object.getOwnPropertyDescriptor(base, property);
            if (desc.get) return desc.get.call(receiver || target);
            return desc.value;
        };
    }
    return _get(target, property, receiver || target);
}
exports._ = _get;


}),
"./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_super_prop_base.cjs": 
/*!***************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_super_prop_base.cjs ***!
  \***************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

var _get_prototype_of = __webpack_require__(/*! ./_get_prototype_of.cjs */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_get_prototype_of.cjs");
function _super_prop_base(object, property) {
    while(!Object.prototype.hasOwnProperty.call(object, property)){
        object = _get_prototype_of._(object);
        if (object === null) break;
    }
    return object;
}
exports._ = _super_prop_base;


}),
"./node_modules/.pnpm/hoist-non-react-statics@3.3.2/node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js": 
/*!***********************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/hoist-non-react-statics@3.3.2/node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js ***!
  \***********************************************************************************************************************************/
(function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";

var reactIs = __webpack_require__(/*! react-is */ "./node_modules/.pnpm/react-is@16.13.1/node_modules/react-is/index.js");
/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */ var REACT_STATICS = {
    childContextTypes: true,
    contextType: true,
    contextTypes: true,
    defaultProps: true,
    displayName: true,
    getDefaultProps: true,
    getDerivedStateFromError: true,
    getDerivedStateFromProps: true,
    mixins: true,
    propTypes: true,
    type: true
};
var KNOWN_STATICS = {
    name: true,
    length: true,
    prototype: true,
    caller: true,
    callee: true,
    arguments: true,
    arity: true
};
var FORWARD_REF_STATICS = {
    '$$typeof': true,
    render: true,
    defaultProps: true,
    displayName: true,
    propTypes: true
};
var MEMO_STATICS = {
    '$$typeof': true,
    compare: true,
    defaultProps: true,
    displayName: true,
    propTypes: true,
    type: true
};
var TYPE_STATICS = {};
TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
function getStatics(component) {
    // React v16.11 and below
    if (reactIs.isMemo(component)) {
        return MEMO_STATICS;
    } // React v16.12 and above
    return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
}
var defineProperty = Object.defineProperty;
var getOwnPropertyNames = Object.getOwnPropertyNames;
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var getPrototypeOf = Object.getPrototypeOf;
var objectPrototype = Object.prototype;
function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
    if (typeof sourceComponent !== 'string') {
        // don't hoist over string (html) components
        if (objectPrototype) {
            var inheritedComponent = getPrototypeOf(sourceComponent);
            if (inheritedComponent && inheritedComponent !== objectPrototype) {
                hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
            }
        }
        var keys = getOwnPropertyNames(sourceComponent);
        if (getOwnPropertySymbols) {
            keys = keys.concat(getOwnPropertySymbols(sourceComponent));
        }
        var targetStatics = getStatics(targetComponent);
        var sourceStatics = getStatics(sourceComponent);
        for(var i = 0; i < keys.length; ++i){
            var key = keys[i];
            if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
                var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
                try {
                    // Avoid failures from read-only properties
                    defineProperty(targetComponent, key, descriptor);
                } catch (e) {}
            }
        }
    }
    return targetComponent;
}
module.exports = hoistNonReactStatics;


}),
"./node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/browser.js": 
/*!******************************************************************************!*\
  !*** ./node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/browser.js ***!
  \******************************************************************************/
(function (module) {
"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 
/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */ var invariant = function(condition, format, a, b, c, d, e, f) {
    if (true) {
        if (format === undefined) {
            throw new Error('invariant requires an error message argument');
        }
    }
    if (!condition) {
        var error;
        if (format === undefined) {
            error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
        } else {
            var args = [
                a,
                b,
                c,
                d,
                e,
                f
            ];
            var argIndex = 0;
            error = new Error(format.replace(/%s/g, function() {
                return args[argIndex++];
            }));
            error.name = 'Invariant Violation';
        }
        error.framesToPop = 1; // we don't care about invariant's own frame
        throw error;
    }
};
module.exports = invariant;


}),
"./node_modules/.pnpm/react-is@16.13.1/node_modules/react-is/cjs/react-is.development.js": 
/*!***********************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-is@16.13.1/node_modules/react-is/cjs/react-is.development.js ***!
  \***********************************************************************************************/
(function (__unused_webpack_module, exports) {
"use strict";
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 
if (true) {
    (function() {
        'use strict';
        // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
        // nor polyfill, then a plain number is used for performance.
        var hasSymbol = typeof Symbol === 'function' && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
        // (unstable) APIs that have been removed. Can we remove the symbols?
        var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;
        function isValidElementType(type) {
            return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
            type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object) {
            if (typeof object === 'object' && object !== null) {
                var $$typeof = object.$$typeof;
                switch($$typeof){
                    case REACT_ELEMENT_TYPE:
                        var type = object.type;
                        switch(type){
                            case REACT_ASYNC_MODE_TYPE:
                            case REACT_CONCURRENT_MODE_TYPE:
                            case REACT_FRAGMENT_TYPE:
                            case REACT_PROFILER_TYPE:
                            case REACT_STRICT_MODE_TYPE:
                            case REACT_SUSPENSE_TYPE:
                                return type;
                            default:
                                var $$typeofType = type && type.$$typeof;
                                switch($$typeofType){
                                    case REACT_CONTEXT_TYPE:
                                    case REACT_FORWARD_REF_TYPE:
                                    case REACT_LAZY_TYPE:
                                    case REACT_MEMO_TYPE:
                                    case REACT_PROVIDER_TYPE:
                                        return $$typeofType;
                                    default:
                                        return $$typeof;
                                }
                        }
                    case REACT_PORTAL_TYPE:
                        return $$typeof;
                }
            }
            return undefined;
        } // AsyncMode is deprecated along with isAsyncMode
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated
        function isAsyncMode(object) {
            {
                if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                    hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint
                    console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
                }
            }
            return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object) {
            return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement(object) {
            return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        exports.AsyncMode = AsyncMode;
        exports.ConcurrentMode = ConcurrentMode;
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType;
        exports.typeOf = typeOf;
    })();
}


}),
"./node_modules/.pnpm/react-is@16.13.1/node_modules/react-is/index.js": 
/*!****************************************************************************!*\
  !*** ./node_modules/.pnpm/react-is@16.13.1/node_modules/react-is/index.js ***!
  \****************************************************************************/
(function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";

if (false) {} else {
    module.exports = __webpack_require__(/*! ./cjs/react-is.development.js */ "./node_modules/.pnpm/react-is@16.13.1/node_modules/react-is/cjs/react-is.development.js");
}


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/NativeViewGestureHandler.ts": 
/*!****************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/NativeViewGestureHandler.ts ***!
  \****************************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get NativeViewGestureHandler () {
        return NativeViewGestureHandler;
    },
    get nativeViewGestureHandlerProps () {
        return nativeViewGestureHandlerProps;
    },
    get nativeViewHandlerName () {
        return nativeViewHandlerName;
    },
    get nativeViewProps () {
        return nativeViewProps;
    }
});
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _to_consumable_array = __webpack_require__(/*! @swc/helpers/_/_to_consumable_array */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_to_consumable_array.cjs");
var _createHandler = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./createHandler */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/createHandler.tsx"));
var _gestureHandlerCommon = __webpack_require__(/*! ./gestureHandlerCommon */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestureHandlerCommon.ts");
var nativeViewGestureHandlerProps = [
    'shouldActivateOnStart',
    'disallowInterruption'
];
var nativeViewProps = _to_consumable_array._(_gestureHandlerCommon.baseGestureHandlerProps).concat(_to_consumable_array._(nativeViewGestureHandlerProps));
var nativeViewHandlerName = 'NativeViewGestureHandler';
var NativeViewGestureHandler = (0, _createHandler.default)({
    name: nativeViewHandlerName,
    allowedProps: nativeViewProps,
    config: {}
});


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/specs/NativeRNGestureHandlerModule.ts": 
/*!*****************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/specs/NativeRNGestureHandlerModule.ts ***!
  \*****************************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _reactnative = __webpack_require__(/*! react-native */ "webpack/sharing/consume/default/react-native/react-native");
var _default = _reactnative.TurboModuleRegistry.getEnforcing('RNGestureHandlerModule');


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/specs/RNGestureHandlerButtonNativeComponent.ts": 
/*!**************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/specs/RNGestureHandlerButtonNativeComponent.ts ***!
  \**************************************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get __INTERNAL_VIEW_CONFIG () {
        return __INTERNAL_VIEW_CONFIG;
    },
    get default () {
        return _default;
    }
});
var NativeComponentRegistry = __webpack_require__(/*! react-native/Libraries/NativeComponent/NativeComponentRegistry */ "webpack/sharing/consume/default/react-native/Libraries/NativeComponent/NativeComponentRegistry/react-native/Libraries/NativeComponent/NativeComponentRegistry");
var nativeComponentName = 'RNGestureHandlerButton';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RNGestureHandlerButton',
    validAttributes: {
        exclusive: true,
        foreground: true,
        borderless: true,
        enabled: true,
        rippleColor: {
            process: (__webpack_require__(/*! react-native/Libraries/StyleSheet/processColor */ "webpack/sharing/consume/default/react-native/Libraries/StyleSheet/processColor/react-native/Libraries/StyleSheet/processColor")/* ["default"] */["default"])
        },
        rippleRadius: true,
        touchSoundDisabled: true,
        borderWidth: true,
        borderColor: {
            process: (__webpack_require__(/*! react-native/Libraries/StyleSheet/processColor */ "webpack/sharing/consume/default/react-native/Libraries/StyleSheet/processColor/react-native/Libraries/StyleSheet/processColor")/* ["default"] */["default"])
        },
        borderStyle: true
    }
};
var _default = NativeComponentRegistry.get(nativeComponentName, ()=>__INTERNAL_VIEW_CONFIG);


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/ActionType.ts": 
/*!*****************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/ActionType.ts ***!
  \*****************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "ActionType", ({
    enumerable: true,
    get: function() {
        return ActionType;
    }
}));
var ActionType = {
    REANIMATED_WORKLET: 1,
    NATIVE_ANIMATED_EVENT: 2,
    JS_FUNCTION_OLD_API: 3,
    JS_FUNCTION_NEW_API: 4
};


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/Directions.ts": 
/*!*****************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/Directions.ts ***!
  \*****************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get DiagonalDirections () {
        return DiagonalDirections;
    },
    get Directions () {
        return Directions;
    }
});
var RIGHT = 1;
var LEFT = 2;
var UP = 4;
var DOWN = 8;
var Directions = {
    RIGHT: RIGHT,
    LEFT: LEFT,
    UP: UP,
    DOWN: DOWN
};
var DiagonalDirections = {
    UP_RIGHT: UP | RIGHT,
    DOWN_RIGHT: DOWN | RIGHT,
    UP_LEFT: UP | LEFT,
    DOWN_LEFT: DOWN | LEFT
};


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/EnableNewWebImplementation.ts": 
/*!*********************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/EnableNewWebImplementation.ts ***!
  \*********************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get enableExperimentalWebImplementation () {
        return enableExperimentalWebImplementation;
    },
    get enableLegacyWebImplementation () {
        return enableLegacyWebImplementation;
    },
    get isNewWebImplementationEnabled () {
        return isNewWebImplementationEnabled;
    }
});
var _reactnative = __webpack_require__(/*! react-native */ "webpack/sharing/consume/default/react-native/react-native");
var _utils = __webpack_require__(/*! ./utils */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/utils.ts");
var useNewWebImplementation = true;
var getWasCalled = false;
function enableExperimentalWebImplementation(ref) {
    var _shouldEnable = ref === void 0 ? true : ref;
    // NO-OP since the new implementation is now the default
    console.warn((0, _utils.tagMessage)('New web implementation is enabled by default. This function will be removed in Gesture Handler 3.'));
}
function enableLegacyWebImplementation(ref) {
    var shouldUseLegacyImplementation = ref === void 0 ? true : ref;
    console.warn((0, _utils.tagMessage)('Legacy web implementation is deprecated. This function will be removed in Gesture Handler 3.'));
    if (_reactnative.Platform.OS !== 'web' || useNewWebImplementation === !shouldUseLegacyImplementation) {
        return;
    }
    if (getWasCalled) {
        console.error('Some parts of this application have already started using the new gesture handler implementation. No changes will be applied. You can try enabling legacy implementation earlier.');
        return;
    }
    useNewWebImplementation = !shouldUseLegacyImplementation;
}
function isNewWebImplementationEnabled() {
    getWasCalled = true;
    return useNewWebImplementation;
}


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/GestureHandlerRootViewContext.ts": 
/*!************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/GestureHandlerRootViewContext.ts ***!
  \************************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react"));
var _default = _react.default.createContext(false);


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/PlatformConstants.ts": 
/*!************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/PlatformConstants.ts ***!
  \************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _reactnative = __webpack_require__(/*! react-native */ "webpack/sharing/consume/default/react-native/react-native");
var _default = (_reactnative.NativeModules === null || _reactnative.NativeModules === void 0 ? void 0 : _reactnative.NativeModules.PlatformConstants) ?? _reactnative.Platform.constants;


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/PointerType.ts": 
/*!******************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/PointerType.ts ***!
  \******************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "PointerType", ({
    enumerable: true,
    get: function() {
        return PointerType;
    }
}));
var PointerType = /*#__PURE__*/ function(PointerType) {
    PointerType[PointerType["TOUCH"] = 0] = "TOUCH";
    PointerType[PointerType["STYLUS"] = 1] = "STYLUS";
    PointerType[PointerType["MOUSE"] = 2] = "MOUSE";
    PointerType[PointerType["KEY"] = 3] = "KEY";
    PointerType[PointerType["OTHER"] = 4] = "OTHER";
    return PointerType;
}({});


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/RNGestureHandlerModule.ts": 
/*!*****************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/RNGestureHandlerModule.ts ***!
  \*****************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
// Reexport the native module spec used by codegen. The relevant files are inluded on Android
// to ensure the compatibility with the old arch, while iOS doesn't require those at all.
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _NativeRNGestureHandlerModule = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./specs/NativeRNGestureHandlerModule */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/specs/NativeRNGestureHandlerModule.ts"));
var _default = _NativeRNGestureHandlerModule.default;


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/RNRenderer.ts": 
/*!*****************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/RNRenderer.ts ***!
  \*****************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "RNRenderer", ({
    enumerable: true,
    get: function() {
        return _ReactNative.default;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _ReactNative = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! react-native/Libraries/Renderer/shims/ReactNative */ "webpack/sharing/consume/default/react-native/Libraries/Renderer/shims/ReactNative/react-native/Libraries/Renderer/shims/ReactNative"));


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/State.ts": 
/*!************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/State.ts ***!
  \************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports) {
// TODO use State from RNModule
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "State", ({
    enumerable: true,
    get: function() {
        return State;
    }
}));
var State = {
    UNDETERMINED: 0,
    FAILED: 1,
    BEGAN: 2,
    CANCELLED: 3,
    ACTIVE: 4,
    END: 5
};


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/TouchEventType.ts": 
/*!*********************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/TouchEventType.ts ***!
  \*********************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "TouchEventType", ({
    enumerable: true,
    get: function() {
        return TouchEventType;
    }
}));
var TouchEventType = {
    UNDETERMINED: 0,
    TOUCHES_DOWN: 1,
    TOUCHES_MOVE: 2,
    TOUCHES_UP: 3,
    TOUCHES_CANCELLED: 4
};


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/components/Pressable/index.ts": 
/*!*********************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/components/Pressable/index.ts ***!
  \*********************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _Pressable.default;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _Pressable = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./Pressable */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/components/Pressable/Pressable.tsx"));


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/components/Pressable/utils.ts": 
/*!*********************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/components/Pressable/utils.ts ***!
  \*********************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get addInsets () {
        return addInsets;
    },
    get gestureToPressableEvent () {
        return gestureToPressableEvent;
    },
    get gestureTouchToPressableEvent () {
        return gestureTouchToPressableEvent;
    },
    get isTouchWithinInset () {
        return isTouchWithinInset;
    },
    get numberAsInset () {
        return numberAsInset;
    }
});
var numberAsInset = (value)=>({
        left: value,
        right: value,
        top: value,
        bottom: value
    });
var addInsets = (a, b)=>({
        left: (a.left ?? 0) + (b.left ?? 0),
        right: (a.right ?? 0) + (b.right ?? 0),
        top: (a.top ?? 0) + (b.top ?? 0),
        bottom: (a.bottom ?? 0) + (b.bottom ?? 0)
    });
var touchDataToPressEvent = (data, timestamp, targetId)=>({
        identifier: data.id,
        locationX: data.x,
        locationY: data.y,
        pageX: data.absoluteX,
        pageY: data.absoluteY,
        target: targetId,
        timestamp: timestamp,
        touches: [],
        changedTouches: []
    });
var gestureToPressEvent = (event, timestamp, targetId)=>({
        identifier: event.handlerTag,
        locationX: event.x,
        locationY: event.y,
        pageX: event.absoluteX,
        pageY: event.absoluteY,
        target: targetId,
        timestamp: timestamp,
        touches: [],
        changedTouches: []
    });
var isTouchWithinInset = (dimensions, inset, touch)=>((touch === null || touch === void 0 ? void 0 : touch.x) ?? 0) < (inset.right ?? 0) + dimensions.width && ((touch === null || touch === void 0 ? void 0 : touch.y) ?? 0) < (inset.bottom ?? 0) + dimensions.height && ((touch === null || touch === void 0 ? void 0 : touch.x) ?? 0) > -(inset.left ?? 0) && ((touch === null || touch === void 0 ? void 0 : touch.y) ?? 0) > -(inset.top ?? 0);
var gestureToPressableEvent = (event)=>{
    var timestamp = Date.now();
    // As far as I can see, there isn't a conventional way of getting targetId with the data we get
    var targetId = 0;
    var pressEvent = gestureToPressEvent(event, timestamp, targetId);
    return {
        nativeEvent: {
            touches: [
                pressEvent
            ],
            changedTouches: [
                pressEvent
            ],
            identifier: pressEvent.identifier,
            locationX: event.x,
            locationY: event.y,
            pageX: event.absoluteX,
            pageY: event.absoluteY,
            target: targetId,
            timestamp: timestamp,
            force: undefined
        }
    };
};
var gestureTouchToPressableEvent = (event)=>{
    var _event_allTouches_at, _event_allTouches_at1, _event_allTouches_at2, _event_allTouches_at3;
    var timestamp = Date.now();
    // As far as I can see, there isn't a conventional way of getting targetId with the data we get
    var targetId = 0;
    var touchesList = event.allTouches.map((touch)=>touchDataToPressEvent(touch, timestamp, targetId));
    var changedTouchesList = event.changedTouches.map((touch)=>touchDataToPressEvent(touch, timestamp, targetId));
    return {
        nativeEvent: {
            touches: touchesList,
            changedTouches: changedTouchesList,
            identifier: event.handlerTag,
            locationX: ((_event_allTouches_at = event.allTouches.at(0)) === null || _event_allTouches_at === void 0 ? void 0 : _event_allTouches_at.x) ?? -1,
            locationY: ((_event_allTouches_at1 = event.allTouches.at(0)) === null || _event_allTouches_at1 === void 0 ? void 0 : _event_allTouches_at1.y) ?? -1,
            pageX: ((_event_allTouches_at2 = event.allTouches.at(0)) === null || _event_allTouches_at2 === void 0 ? void 0 : _event_allTouches_at2.absoluteX) ?? -1,
            pageY: ((_event_allTouches_at3 = event.allTouches.at(0)) === null || _event_allTouches_at3 === void 0 ? void 0 : _event_allTouches_at3.absoluteY) ?? -1,
            target: targetId,
            timestamp: timestamp,
            force: undefined
        }
    };
};


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/components/touchables/index.ts": 
/*!**********************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/components/touchables/index.ts ***!
  \**********************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get TouchableHighlight () {
        return _TouchableHighlight.default;
    },
    get TouchableNativeFeedback () {
        return _TouchableNativeFeedback.default;
    },
    get TouchableOpacity () {
        return _TouchableOpacity.default;
    },
    get TouchableWithoutFeedback () {
        return _TouchableWithoutFeedback.default;
    }
});
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _TouchableNativeFeedback = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./TouchableNativeFeedback */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/components/touchables/TouchableNativeFeedback.tsx"));
var _TouchableWithoutFeedback = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./TouchableWithoutFeedback */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/components/touchables/TouchableWithoutFeedback.tsx"));
var _TouchableOpacity = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./TouchableOpacity */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/components/touchables/TouchableOpacity.tsx"));
var _TouchableHighlight = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./TouchableHighlight */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/components/touchables/TouchableHighlight.tsx"));


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/findNodeHandle.ts": 
/*!*********************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/findNodeHandle.ts ***!
  \*********************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _reactnative = __webpack_require__(/*! react-native */ "webpack/sharing/consume/default/react-native/react-native");
var _default = _reactnative.findNodeHandle;


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/getShadowNodeFromRef.ts": 
/*!***************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/getShadowNodeFromRef.ts ***!
  \***************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
// Used by GestureDetector (unsupported on web at the moment) to check whether the
// attached view may get flattened on Fabric. This implementation causes errors
// on web due to the static resolution of `require` statements by webpack breaking
// the conditional importing. Solved by making .web file.
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "getShadowNodeFromRef", ({
    enumerable: true,
    get: function() {
        return getShadowNodeFromRef;
    }
}));
var findHostInstance_DEPRECATED;
var getInternalInstanceHandleFromPublicInstance;
function getShadowNodeFromRef(ref) {
    // Load findHostInstance_DEPRECATED lazily because it may not be available before render
    if (findHostInstance_DEPRECATED === undefined) {
        try {
            var // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
            _ReactFabric_default;
            // eslint-disable-next-line @typescript-eslint/no-var-requires, @typescript-eslint/no-unsafe-assignment
            var ReactFabric = __webpack_require__(/*! react-native/Libraries/Renderer/shims/ReactFabric */ "webpack/sharing/consume/default/react-native/Libraries/Renderer/shims/ReactFabric/react-native/Libraries/Renderer/shims/ReactFabric");
            // Since RN 0.77 ReactFabric exports findHostInstance_DEPRECATED in default object so we're trying to
            // access it first, then fallback on named export
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
            findHostInstance_DEPRECATED = (ReactFabric === null || ReactFabric === void 0 ? void 0 : (_ReactFabric_default = ReactFabric.default) === null || _ReactFabric_default === void 0 ? void 0 : _ReactFabric_default.findHostInstance_DEPRECATED) || (// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
            ReactFabric === null || ReactFabric === void 0 ? void 0 : ReactFabric.findHostInstance_DEPRECATED);
        } catch (e) {
            findHostInstance_DEPRECATED = (_ref)=>null;
        }
    }
    // Load findHostInstance_DEPRECATED lazily because it may not be available before render
    if (getInternalInstanceHandleFromPublicInstance === undefined) {
        try {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
            getInternalInstanceHandleFromPublicInstance = // eslint-disable-next-line @typescript-eslint/no-var-requires, @typescript-eslint/no-unsafe-member-access
            (__webpack_require__(/*! react-native/Libraries/ReactNative/ReactFabricPublicInstance/ReactFabricPublicInstance */ "webpack/sharing/consume/default/react-native/Libraries/ReactNative/ReactFabricPublicInstance/ReactFabricPublicInstance/react-native/Libraries/ReactNative/ReactFabricPublicInstance/ReactFabricPublicInstance")/* .getInternalInstanceHandleFromPublicInstance */.getInternalInstanceHandleFromPublicInstance) ?? // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-return
            ((ref)=>ref._internalInstanceHandle);
        } catch (e) {
            getInternalInstanceHandleFromPublicInstance = (ref)=>// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-return
                ref._internalInstanceHandle;
        }
    }
    // @ts-ignore Fabric
    return getInternalInstanceHandleFromPublicInstance(findHostInstance_DEPRECATED(ref)).stateNode.node;
}


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/ghQueueMicrotask.ts": 
/*!***********************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/ghQueueMicrotask.ts ***!
  \***********************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports) {
// We check for typeof requestAnimationFrame because of SSR
// Functions are bound to null to avoid issues with scope when using Metro inline requires.
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "ghQueueMicrotask", ({
    enumerable: true,
    get: function() {
        return ghQueueMicrotask;
    }
}));
var ghQueueMicrotask = typeof setImmediate === 'function' ? setImmediate.bind(null) : typeof requestAnimationFrame === 'function' ? requestAnimationFrame.bind(null) : queueMicrotask.bind(null);


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/FlingGestureHandler.ts": 
/*!***********************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/FlingGestureHandler.ts ***!
  \***********************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get FlingGestureHandler () {
        return FlingGestureHandler;
    },
    get flingGestureHandlerProps () {
        return flingGestureHandlerProps;
    },
    get flingHandlerName () {
        return flingHandlerName;
    }
});
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _to_consumable_array = __webpack_require__(/*! @swc/helpers/_/_to_consumable_array */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_to_consumable_array.cjs");
var _createHandler = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./createHandler */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/createHandler.tsx"));
var _gestureHandlerCommon = __webpack_require__(/*! ./gestureHandlerCommon */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestureHandlerCommon.ts");
var flingGestureHandlerProps = [
    'numberOfPointers',
    'direction'
];
var flingHandlerName = 'FlingGestureHandler';
var FlingGestureHandler = (0, _createHandler.default)({
    name: flingHandlerName,
    allowedProps: _to_consumable_array._(_gestureHandlerCommon.baseGestureHandlerProps).concat(_to_consumable_array._(flingGestureHandlerProps)),
    config: {}
});


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/ForceTouchGestureHandler.ts": 
/*!****************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/ForceTouchGestureHandler.ts ***!
  \****************************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get ForceTouchGestureHandler () {
        return ForceTouchGestureHandler;
    },
    get forceTouchGestureHandlerProps () {
        return forceTouchGestureHandlerProps;
    },
    get forceTouchHandlerName () {
        return forceTouchHandlerName;
    }
});
var _call_super = __webpack_require__(/*! @swc/helpers/_/_call_super */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_call_super.cjs");
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_create_class.cjs");
var _inherits = __webpack_require__(/*! @swc/helpers/_/_inherits */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_inherits.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _to_consumable_array = __webpack_require__(/*! @swc/helpers/_/_to_consumable_array */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_to_consumable_array.cjs");
var _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react"));
var _utils = __webpack_require__(/*! ../utils */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/utils.ts");
var _PlatformConstants = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../PlatformConstants */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/PlatformConstants.ts"));
var _createHandler = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./createHandler */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/createHandler.tsx"));
var _gestureHandlerCommon = __webpack_require__(/*! ./gestureHandlerCommon */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestureHandlerCommon.ts");
var forceTouchGestureHandlerProps = [
    'minForce',
    'maxForce',
    'feedbackOnActivation'
];
// implicit `children` prop has been removed in @types/react^18.0.0
var ForceTouchFallback = /*#__PURE__*/ function(_React_Component) {
    "use strict";
    _inherits._(ForceTouchFallback, _React_Component);
    function ForceTouchFallback() {
        _class_call_check._(this, ForceTouchFallback);
        return _call_super._(this, ForceTouchFallback, arguments);
    }
    _create_class._(ForceTouchFallback, [
        {
            key: "componentDidMount",
            value: function componentDidMount() {
                console.warn((0, _utils.tagMessage)('ForceTouchGestureHandler is not available on this platform. Please use ForceTouchGestureHandler.forceTouchAvailable to conditionally render other components that would provide a fallback behavior specific to your usecase'));
            }
        },
        {
            key: "render",
            value: function render() {
                return this.props.children;
            }
        }
    ]);
    return ForceTouchFallback;
}(_react.default.Component);
ForceTouchFallback.forceTouchAvailable = false;
var forceTouchHandlerName = 'ForceTouchGestureHandler';
var ForceTouchGestureHandler = (_PlatformConstants.default === null || _PlatformConstants.default === void 0 ? void 0 : _PlatformConstants.default.forceTouchAvailable) ? (0, _createHandler.default)({
    name: forceTouchHandlerName,
    allowedProps: _to_consumable_array._(_gestureHandlerCommon.baseGestureHandlerProps).concat(_to_consumable_array._(forceTouchGestureHandlerProps)),
    config: {}
}) : ForceTouchFallback;
ForceTouchGestureHandler.forceTouchAvailable = (_PlatformConstants.default === null || _PlatformConstants.default === void 0 ? void 0 : _PlatformConstants.default.forceTouchAvailable) || false;


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/LongPressGestureHandler.ts": 
/*!***************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/LongPressGestureHandler.ts ***!
  \***************************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get LongPressGestureHandler () {
        return LongPressGestureHandler;
    },
    get longPressGestureHandlerProps () {
        return longPressGestureHandlerProps;
    },
    get longPressHandlerName () {
        return longPressHandlerName;
    }
});
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _to_consumable_array = __webpack_require__(/*! @swc/helpers/_/_to_consumable_array */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_to_consumable_array.cjs");
var _createHandler = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./createHandler */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/createHandler.tsx"));
var _gestureHandlerCommon = __webpack_require__(/*! ./gestureHandlerCommon */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestureHandlerCommon.ts");
var longPressGestureHandlerProps = [
    'minDurationMs',
    'maxDist',
    'numberOfPointers'
];
var longPressHandlerName = 'LongPressGestureHandler';
var LongPressGestureHandler = (0, _createHandler.default)({
    name: longPressHandlerName,
    allowedProps: _to_consumable_array._(_gestureHandlerCommon.baseGestureHandlerProps).concat(_to_consumable_array._(longPressGestureHandlerProps)),
    config: {
        shouldCancelWhenOutside: true
    }
});


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/PanGestureHandler.ts": 
/*!*********************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/PanGestureHandler.ts ***!
  \*********************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get PanGestureHandler () {
        return PanGestureHandler;
    },
    get managePanProps () {
        return managePanProps;
    },
    get panGestureHandlerCustomNativeProps () {
        return panGestureHandlerCustomNativeProps;
    },
    get panGestureHandlerProps () {
        return panGestureHandlerProps;
    },
    get panHandlerName () {
        return panHandlerName;
    }
});
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _to_consumable_array = __webpack_require__(/*! @swc/helpers/_/_to_consumable_array */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_to_consumable_array.cjs");
var _createHandler = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./createHandler */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/createHandler.tsx"));
var _gestureHandlerCommon = __webpack_require__(/*! ./gestureHandlerCommon */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestureHandlerCommon.ts");
var panGestureHandlerProps = [
    'activeOffsetY',
    'activeOffsetX',
    'failOffsetY',
    'failOffsetX',
    'minDist',
    'minVelocity',
    'minVelocityX',
    'minVelocityY',
    'minPointers',
    'maxPointers',
    'avgTouches',
    'enableTrackpadTwoFingerGesture',
    'activateAfterLongPress'
];
var panGestureHandlerCustomNativeProps = [
    'activeOffsetYStart',
    'activeOffsetYEnd',
    'activeOffsetXStart',
    'activeOffsetXEnd',
    'failOffsetYStart',
    'failOffsetYEnd',
    'failOffsetXStart',
    'failOffsetXEnd'
];
var panHandlerName = 'PanGestureHandler';
var PanGestureHandler = (0, _createHandler.default)({
    name: panHandlerName,
    allowedProps: _to_consumable_array._(_gestureHandlerCommon.baseGestureHandlerProps).concat(_to_consumable_array._(panGestureHandlerProps)),
    config: {},
    transformProps: managePanProps,
    customNativeProps: panGestureHandlerCustomNativeProps
});
function validatePanGestureHandlerProps(props) {
    if (Array.isArray(props.activeOffsetX) && (props.activeOffsetX[0] > 0 || props.activeOffsetX[1] < 0)) {
        throw new Error(`First element of activeOffsetX should be negative, a the second one should be positive`);
    }
    if (Array.isArray(props.activeOffsetY) && (props.activeOffsetY[0] > 0 || props.activeOffsetY[1] < 0)) {
        throw new Error(`First element of activeOffsetY should be negative, a the second one should be positive`);
    }
    if (Array.isArray(props.failOffsetX) && (props.failOffsetX[0] > 0 || props.failOffsetX[1] < 0)) {
        throw new Error(`First element of failOffsetX should be negative, a the second one should be positive`);
    }
    if (Array.isArray(props.failOffsetY) && (props.failOffsetY[0] > 0 || props.failOffsetY[1] < 0)) {
        throw new Error(`First element of failOffsetY should be negative, a the second one should be positive`);
    }
    if (props.minDist && (props.failOffsetX || props.failOffsetY)) {
        throw new Error(`It is not supported to use minDist with failOffsetX or failOffsetY, use activeOffsetX and activeOffsetY instead`);
    }
    if (props.minDist && (props.activeOffsetX || props.activeOffsetY)) {
        throw new Error(`It is not supported to use minDist with activeOffsetX or activeOffsetY`);
    }
}
function transformPanGestureHandlerProps(props) {
    var res = _object_spread._({}, props);
    if (props.activeOffsetX !== undefined) {
        delete res.activeOffsetX;
        if (Array.isArray(props.activeOffsetX)) {
            res.activeOffsetXStart = props.activeOffsetX[0];
            res.activeOffsetXEnd = props.activeOffsetX[1];
        } else if (props.activeOffsetX < 0) {
            res.activeOffsetXStart = props.activeOffsetX;
        } else {
            res.activeOffsetXEnd = props.activeOffsetX;
        }
    }
    if (props.activeOffsetY !== undefined) {
        delete res.activeOffsetY;
        if (Array.isArray(props.activeOffsetY)) {
            res.activeOffsetYStart = props.activeOffsetY[0];
            res.activeOffsetYEnd = props.activeOffsetY[1];
        } else if (props.activeOffsetY < 0) {
            res.activeOffsetYStart = props.activeOffsetY;
        } else {
            res.activeOffsetYEnd = props.activeOffsetY;
        }
    }
    if (props.failOffsetX !== undefined) {
        delete res.failOffsetX;
        if (Array.isArray(props.failOffsetX)) {
            res.failOffsetXStart = props.failOffsetX[0];
            res.failOffsetXEnd = props.failOffsetX[1];
        } else if (props.failOffsetX < 0) {
            res.failOffsetXStart = props.failOffsetX;
        } else {
            res.failOffsetXEnd = props.failOffsetX;
        }
    }
    if (props.failOffsetY !== undefined) {
        delete res.failOffsetY;
        if (Array.isArray(props.failOffsetY)) {
            res.failOffsetYStart = props.failOffsetY[0];
            res.failOffsetYEnd = props.failOffsetY[1];
        } else if (props.failOffsetY < 0) {
            res.failOffsetYStart = props.failOffsetY;
        } else {
            res.failOffsetYEnd = props.failOffsetY;
        }
    }
    return res;
}
function managePanProps(props) {
    if (true) {
        validatePanGestureHandlerProps(props);
    }
    return transformPanGestureHandlerProps(props);
}


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/PinchGestureHandler.ts": 
/*!***********************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/PinchGestureHandler.ts ***!
  \***********************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get PinchGestureHandler () {
        return PinchGestureHandler;
    },
    get pinchHandlerName () {
        return pinchHandlerName;
    }
});
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _createHandler = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./createHandler */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/createHandler.tsx"));
var _gestureHandlerCommon = __webpack_require__(/*! ./gestureHandlerCommon */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestureHandlerCommon.ts");
var pinchHandlerName = 'PinchGestureHandler';
var PinchGestureHandler = (0, _createHandler.default)({
    name: pinchHandlerName,
    allowedProps: _gestureHandlerCommon.baseGestureHandlerProps,
    config: {}
});


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/RotationGestureHandler.ts": 
/*!**************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/RotationGestureHandler.ts ***!
  \**************************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get RotationGestureHandler () {
        return RotationGestureHandler;
    },
    get rotationHandlerName () {
        return rotationHandlerName;
    }
});
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _createHandler = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./createHandler */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/createHandler.tsx"));
var _gestureHandlerCommon = __webpack_require__(/*! ./gestureHandlerCommon */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestureHandlerCommon.ts");
var rotationHandlerName = 'RotationGestureHandler';
var RotationGestureHandler = (0, _createHandler.default)({
    name: rotationHandlerName,
    allowedProps: _gestureHandlerCommon.baseGestureHandlerProps,
    config: {}
});


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/TapGestureHandler.ts": 
/*!*********************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/TapGestureHandler.ts ***!
  \*********************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get TapGestureHandler () {
        return TapGestureHandler;
    },
    get tapGestureHandlerProps () {
        return tapGestureHandlerProps;
    },
    get tapHandlerName () {
        return tapHandlerName;
    }
});
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _to_consumable_array = __webpack_require__(/*! @swc/helpers/_/_to_consumable_array */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_to_consumable_array.cjs");
var _createHandler = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./createHandler */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/createHandler.tsx"));
var _gestureHandlerCommon = __webpack_require__(/*! ./gestureHandlerCommon */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestureHandlerCommon.ts");
var tapGestureHandlerProps = [
    'maxDurationMs',
    'maxDelayMs',
    'numberOfTaps',
    'maxDeltaX',
    'maxDeltaY',
    'maxDist',
    'minPointers'
];
var tapHandlerName = 'TapGestureHandler';
var TapGestureHandler = (0, _createHandler.default)({
    name: tapHandlerName,
    allowedProps: _to_consumable_array._(_gestureHandlerCommon.baseGestureHandlerProps).concat(_to_consumable_array._(tapGestureHandlerProps)),
    config: {
        shouldCancelWhenOutside: true
    }
});


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/customDirectEventTypes.ts": 
/*!**************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/customDirectEventTypes.ts ***!
  \**************************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
// @ts-ignore - its taken straight from RN
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "customDirectEventTypes", ({
    enumerable: true,
    get: function() {
        return _ReactNativeViewConfigRegistry.customDirectEventTypes;
    }
}));
var _ReactNativeViewConfigRegistry = __webpack_require__(/*! react-native/Libraries/Renderer/shims/ReactNativeViewConfigRegistry */ "webpack/sharing/consume/default/react-native/Libraries/Renderer/shims/ReactNativeViewConfigRegistry/react-native/Libraries/Renderer/shims/ReactNativeViewConfigRegistry");


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestureHandlerCommon.ts": 
/*!************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestureHandlerCommon.ts ***!
  \************************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
// Previous types exported gesture handlers as classes which creates an interface and variable, both named the same as class.
// Without those types, we'd introduce breaking change, forcing users to prefix every handler type specification with typeof
// e.g. React.createRef<TapGestureHandler> -> React.createRef<typeof TapGestureHandler>.
// See https://www.typescriptlang.org/docs/handbook/classes.html#constructor-functions for reference.
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get MouseButton () {
        return MouseButton;
    },
    get baseGestureHandlerProps () {
        return baseGestureHandlerProps;
    },
    get baseGestureHandlerWithDetectorProps () {
        return baseGestureHandlerWithDetectorProps;
    }
});
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _to_consumable_array = __webpack_require__(/*! @swc/helpers/_/_to_consumable_array */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_to_consumable_array.cjs");
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react"));
var commonProps = [
    'id',
    'enabled',
    'shouldCancelWhenOutside',
    'hitSlop',
    'cancelsTouchesInView',
    'userSelect',
    'activeCursor',
    'mouseButton',
    'enableContextMenu',
    'touchAction'
];
var componentInteractionProps = [
    'waitFor',
    'simultaneousHandlers',
    'blocksHandlers'
];
var baseGestureHandlerProps = _to_consumable_array._(commonProps).concat(_to_consumable_array._(componentInteractionProps), [
    'onBegan',
    'onFailed',
    'onCancelled',
    'onActivated',
    'onEnded',
    'onGestureEvent',
    'onHandlerStateChange'
]);
var baseGestureHandlerWithDetectorProps = _to_consumable_array._(commonProps).concat([
    'needsPointerData',
    'manualActivation'
]);
var MouseButton = /*#__PURE__*/ function(MouseButton) {
    MouseButton[MouseButton["LEFT"] = 1] = "LEFT";
    MouseButton[MouseButton["RIGHT"] = 2] = "RIGHT";
    MouseButton[MouseButton["MIDDLE"] = 4] = "MIDDLE";
    MouseButton[MouseButton["BUTTON_4"] = 8] = "BUTTON_4";
    MouseButton[MouseButton["BUTTON_5"] = 16] = "BUTTON_5";
    MouseButton[MouseButton["ALL"] = 31] = "ALL";
    return MouseButton;
}({});


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/GestureDetector/attachHandlers.ts": 
/*!*******************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/GestureDetector/attachHandlers.ts ***!
  \*******************************************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "attachHandlers", ({
    enumerable: true,
    get: function() {
        return attachHandlers;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react"));
var _handlersRegistry = __webpack_require__(/*! ../../handlersRegistry */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/handlersRegistry.ts");
var _RNGestureHandlerModule = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../../RNGestureHandlerModule */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/RNGestureHandlerModule.ts"));
var _utils = __webpack_require__(/*! ../../utils */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/utils.ts");
var _ActionType = __webpack_require__(/*! ../../../ActionType */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/ActionType.ts");
var _reactnative = __webpack_require__(/*! react-native */ "webpack/sharing/consume/default/react-native/react-native");
var _ghQueueMicrotask = __webpack_require__(/*! ../../../ghQueueMicrotask */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/ghQueueMicrotask.ts");
var _utils1 = __webpack_require__(/*! ./utils */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/GestureDetector/utils.ts");
var _mountRegistry = __webpack_require__(/*! ../../../mountRegistry */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/mountRegistry.ts");
function attachHandlers(ref) {
    var preparedGesture = ref.preparedGesture, gestureConfig = ref.gestureConfig, gesturesToAttach = ref.gesturesToAttach, viewTag = ref.viewTag, webEventHandlersRef = ref.webEventHandlersRef;
    gestureConfig.initialize();
    // Use queueMicrotask to extract handlerTags, because all refs should be initialized
    // when it's ran
    (0, _ghQueueMicrotask.ghQueueMicrotask)(()=>{
        if (!preparedGesture.isMounted) {
            return;
        }
        gestureConfig.prepare();
    });
    for (var handler of gesturesToAttach){
        (0, _utils1.checkGestureCallbacksForWorklets)(handler);
        _RNGestureHandlerModule.default.createGestureHandler(handler.handlerName, handler.handlerTag, (0, _utils.filterConfig)(handler.config, _utils1.ALLOWED_PROPS));
        (0, _handlersRegistry.registerHandler)(handler.handlerTag, handler, handler.config.testId);
    }
    // Use queueMicrotask to extract handlerTags, because all refs should be initialized
    // when it's ran
    (0, _ghQueueMicrotask.ghQueueMicrotask)(()=>{
        if (!preparedGesture.isMounted) {
            return;
        }
        for (var handler of gesturesToAttach){
            _RNGestureHandlerModule.default.updateGestureHandler(handler.handlerTag, (0, _utils.filterConfig)(handler.config, _utils1.ALLOWED_PROPS, (0, _utils1.extractGestureRelations)(handler)));
        }
        (0, _utils.scheduleFlushOperations)();
    });
    for (var gesture of gesturesToAttach){
        var actionType = gesture.shouldUseReanimated ? _ActionType.ActionType.REANIMATED_WORKLET : _ActionType.ActionType.JS_FUNCTION_NEW_API;
        if (_reactnative.Platform.OS === 'web') {
            _RNGestureHandlerModule.default.attachGestureHandler(gesture.handlerTag, viewTag, _ActionType.ActionType.JS_FUNCTION_OLD_API, webEventHandlersRef);
        } else {
            _RNGestureHandlerModule.default.attachGestureHandler(gesture.handlerTag, viewTag, actionType);
        }
        _mountRegistry.MountRegistry.gestureWillMount(gesture);
    }
    preparedGesture.attachedGestures = gesturesToAttach;
    if (preparedGesture.animatedHandlers) {
        var isAnimatedGesture = (g)=>g.shouldUseReanimated;
        preparedGesture.animatedHandlers.value = gesturesToAttach.filter(isAnimatedGesture).map((g)=>g.handlers);
    }
}


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/GestureDetector/dropHandlers.ts": 
/*!*****************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/GestureDetector/dropHandlers.ts ***!
  \*****************************************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "dropHandlers", ({
    enumerable: true,
    get: function() {
        return dropHandlers;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _handlersRegistry = __webpack_require__(/*! ../../handlersRegistry */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/handlersRegistry.ts");
var _RNGestureHandlerModule = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../../RNGestureHandlerModule */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/RNGestureHandlerModule.ts"));
var _utils = __webpack_require__(/*! ../../utils */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/utils.ts");
var _mountRegistry = __webpack_require__(/*! ../../../mountRegistry */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/mountRegistry.ts");
function dropHandlers(preparedGesture) {
    for (var handler of preparedGesture.attachedGestures){
        _RNGestureHandlerModule.default.dropGestureHandler(handler.handlerTag);
        (0, _handlersRegistry.unregisterHandler)(handler.handlerTag, handler.config.testId);
        _mountRegistry.MountRegistry.gestureWillUnmount(handler);
    }
    (0, _utils.scheduleFlushOperations)();
}


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/GestureDetector/needsToReattach.ts": 
/*!********************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/GestureDetector/needsToReattach.ts ***!
  \********************************************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "needsToReattach", ({
    enumerable: true,
    get: function() {
        return needsToReattach;
    }
}));
function needsToReattach(preparedGesture, newGestures) {
    if (newGestures.length !== preparedGesture.attachedGestures.length) {
        return true;
    }
    for(var i = 0; i < newGestures.length; i++){
        if (newGestures[i].handlerName !== preparedGesture.attachedGestures[i].handlerName || newGestures[i].shouldUseReanimated !== preparedGesture.attachedGestures[i].shouldUseReanimated) {
            return true;
        }
    }
    return false;
}


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/GestureDetector/updateHandlers.ts": 
/*!*******************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/GestureDetector/updateHandlers.ts ***!
  \*******************************************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "updateHandlers", ({
    enumerable: true,
    get: function() {
        return updateHandlers;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _handlersRegistry = __webpack_require__(/*! ../../handlersRegistry */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/handlersRegistry.ts");
var _RNGestureHandlerModule = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../../RNGestureHandlerModule */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/RNGestureHandlerModule.ts"));
var _utils = __webpack_require__(/*! ../../utils */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/utils.ts");
var _ghQueueMicrotask = __webpack_require__(/*! ../../../ghQueueMicrotask */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/ghQueueMicrotask.ts");
var _utils1 = __webpack_require__(/*! ./utils */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/GestureDetector/utils.ts");
function updateHandlers(preparedGesture, gestureConfig, newGestures) {
    gestureConfig.prepare();
    for(var i = 0; i < newGestures.length; i++){
        var handler = preparedGesture.attachedGestures[i];
        (0, _utils1.checkGestureCallbacksForWorklets)(handler);
        // Only update handlerTag when it's actually different, it may be the same
        // if gesture config object is wrapped with useMemo
        if (newGestures[i].handlerTag !== handler.handlerTag) {
            newGestures[i].handlerTag = handler.handlerTag;
            newGestures[i].handlers.handlerTag = handler.handlerTag;
        }
    }
    // Store attached gestures to avoid crash when gestures changed after queueing micro task
    var attachedGestures = preparedGesture.attachedGestures;
    // Use queueMicrotask to extract handlerTags, because when it's ran, all refs should be updated
    // and handlerTags in BaseGesture references should be updated in the loop above (we need to wait
    // in case of external relations)
    (0, _ghQueueMicrotask.ghQueueMicrotask)(()=>{
        if (!preparedGesture.isMounted) {
            return;
        }
        // Stop if attached gestures changed after queueing micro task
        if (attachedGestures !== preparedGesture.attachedGestures) {
            return;
        }
        // If amount of gesture configs changes, we need to update the callbacks in shared value
        var shouldUpdateSharedValueIfUsed = attachedGestures.length !== newGestures.length;
        for(var i = 0; i < newGestures.length; i++){
            var handler = attachedGestures[i];
            // If the gestureId is different (gesture isn't wrapped with useMemo or its dependencies changed),
            // we need to update the shared value, assuming the gesture runs on UI thread or the thread changed
            if (handler.handlers.gestureId !== newGestures[i].handlers.gestureId && (newGestures[i].shouldUseReanimated || handler.shouldUseReanimated)) {
                shouldUpdateSharedValueIfUsed = true;
            }
            handler.config = newGestures[i].config;
            handler.handlers = newGestures[i].handlers;
            _RNGestureHandlerModule.default.updateGestureHandler(handler.handlerTag, (0, _utils.filterConfig)(handler.config, _utils1.ALLOWED_PROPS, (0, _utils1.extractGestureRelations)(handler)));
            (0, _handlersRegistry.registerHandler)(handler.handlerTag, handler, handler.config.testId);
        }
        if (preparedGesture.animatedHandlers && shouldUpdateSharedValueIfUsed) {
            var newHandlersValue = attachedGestures.filter((g)=>g.shouldUseReanimated) // Ignore gestures that shouldn't run on UI
            .map((g)=>g.handlers);
            preparedGesture.animatedHandlers.value = newHandlersValue;
        }
        (0, _utils.scheduleFlushOperations)();
    });
}


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/GestureDetector/useAnimatedGesture.ts": 
/*!***********************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/GestureDetector/useAnimatedGesture.ts ***!
  \***********************************************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "useAnimatedGesture", ({
    enumerable: true,
    get: function() {
        return useAnimatedGesture;
    }
}));
var _to_consumable_array = __webpack_require__(/*! @swc/helpers/_/_to_consumable_array */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_to_consumable_array.cjs");
var _gesture = __webpack_require__(/*! ../gesture */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/gesture.ts");
var _reanimatedWrapper = __webpack_require__(/*! ../reanimatedWrapper */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/reanimatedWrapper.ts");
var _gestureStateManager = __webpack_require__(/*! ../gestureStateManager */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/gestureStateManager.ts");
var _State = __webpack_require__(/*! ../../../State */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/State.ts");
var _TouchEventType = __webpack_require__(/*! ../../../TouchEventType */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/TouchEventType.ts");
var _utils = __webpack_require__(/*! ../../../utils */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/utils.ts");
var _worklet_12174736290982_init_data = {
    code: "function getHandler_Pnpm_useAnimatedGestureTs1(type,gesture){const{CALLBACK_TYPE}=this.__closure;switch(type){case CALLBACK_TYPE.BEGAN:return gesture.onBegin;case CALLBACK_TYPE.START:return gesture.onStart;case CALLBACK_TYPE.UPDATE:return gesture.onUpdate;case CALLBACK_TYPE.CHANGE:return gesture.onChange;case CALLBACK_TYPE.END:return gesture.onEnd;case CALLBACK_TYPE.FINALIZE:return gesture.onFinalize;case CALLBACK_TYPE.TOUCHES_DOWN:return gesture.onTouchesDown;case CALLBACK_TYPE.TOUCHES_MOVE:return gesture.onTouchesMove;case CALLBACK_TYPE.TOUCHES_UP:return gesture.onTouchesUp;case CALLBACK_TYPE.TOUCHES_CANCELLED:return gesture.onTouchesCancelled;}}",
    location: "/Users/antonio.benitez/Desktop/Callstack/CK/mrsasuu/AdoptaApp-Mini-app/node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/GestureDetector/useAnimatedGesture.ts",
    sourceMap: "{\"version\":3,\"names\":[\"getHandler_Pnpm_useAnimatedGestureTs1\",\"type\",\"gesture\",\"CALLBACK_TYPE\",\"__closure\",\"BEGAN\",\"onBegin\",\"START\",\"onStart\",\"UPDATE\",\"onUpdate\",\"CHANGE\",\"onChange\",\"END\",\"onEnd\",\"FINALIZE\",\"onFinalize\",\"TOUCHES_DOWN\",\"onTouchesDown\",\"TOUCHES_MOVE\",\"onTouchesMove\",\"TOUCHES_UP\",\"onTouchesUp\",\"TOUCHES_CANCELLED\",\"onTouchesCancelled\"],\"sources\":[\"/Users/antonio.benitez/Desktop/Callstack/CK/mrsasuu/AdoptaApp-Mini-app/node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/GestureDetector/useAnimatedGesture.ts\"],\"mappings\":\"AAgBA,SAAAA,qCAGEA,CAAAC,IAAA,CAAAC,OAAA,QAAAC,aAAA,OAAAC,SAAA,CAEA,OAAQH,IAAI,EACV,IAAK,CAAAE,aAAa,CAACE,KAAK,CACtB,MAAO,CAAAH,OAAO,CAACI,OAAO,CACxB,IAAK,CAAAH,aAAa,CAACI,KAAK,CACtB,MAAO,CAAAL,OAAO,CAACM,OAAO,CACxB,IAAK,CAAAL,aAAa,CAACM,MAAM,CACvB,MAAO,CAAAP,OAAO,CAACQ,QAAQ,CACzB,IAAK,CAAAP,aAAa,CAACQ,MAAM,CACvB,MAAO,CAAAT,OAAO,CAACU,QAAQ,CACzB,IAAK,CAAAT,aAAa,CAACU,GAAG,CACpB,MAAO,CAAAX,OAAO,CAACY,KAAK,CACtB,IAAK,CAAAX,aAAa,CAACY,QAAQ,CACzB,MAAO,CAAAb,OAAO,CAACc,UAAU,CAC3B,IAAK,CAAAb,aAAa,CAACc,YAAY,CAC7B,MAAO,CAAAf,OAAO,CAACgB,aAAa,CAC9B,IAAK,CAAAf,aAAa,CAACgB,YAAY,CAC7B,MAAO,CAAAjB,OAAO,CAACkB,aAAa,CAC9B,IAAK,CAAAjB,aAAa,CAACkB,UAAU,CAC3B,MAAO,CAAAnB,OAAO,CAACoB,WAAW,CAC5B,IAAK,CAAAnB,aAAa,CAACoB,iBAAiB,CAClC,MAAO,CAAArB,OAAO,CAACsB,kBAAkB,CACrC,CACF\",\"ignoreList\":[]}",
    version: "3.17.5"
};
var getHandler = function() {
    var _e = [
        new __webpack_require__.g.Error(),
        -2,
        -27
    ];
    var getHandler = function(type, gesture) {
        switch(type){
            case _gesture.CALLBACK_TYPE.BEGAN:
                return gesture.onBegin;
            case _gesture.CALLBACK_TYPE.START:
                return gesture.onStart;
            case _gesture.CALLBACK_TYPE.UPDATE:
                return gesture.onUpdate;
            case _gesture.CALLBACK_TYPE.CHANGE:
                return gesture.onChange;
            case _gesture.CALLBACK_TYPE.END:
                return gesture.onEnd;
            case _gesture.CALLBACK_TYPE.FINALIZE:
                return gesture.onFinalize;
            case _gesture.CALLBACK_TYPE.TOUCHES_DOWN:
                return gesture.onTouchesDown;
            case _gesture.CALLBACK_TYPE.TOUCHES_MOVE:
                return gesture.onTouchesMove;
            case _gesture.CALLBACK_TYPE.TOUCHES_UP:
                return gesture.onTouchesUp;
            case _gesture.CALLBACK_TYPE.TOUCHES_CANCELLED:
                return gesture.onTouchesCancelled;
        }
    };
    getHandler.__closure = {
        CALLBACK_TYPE: _gesture.CALLBACK_TYPE
    };
    getHandler.__workletHash = 12174736290982;
    getHandler.__initData = _worklet_12174736290982_init_data;
    getHandler.__stackDetails = _e;
    return getHandler;
}();
var _worklet_6825086001765_init_data = {
    code: "function touchEventTypeToCallbackType_Pnpm_useAnimatedGestureTs2(eventType){const{TouchEventType,CALLBACK_TYPE}=this.__closure;switch(eventType){case TouchEventType.TOUCHES_DOWN:return CALLBACK_TYPE.TOUCHES_DOWN;case TouchEventType.TOUCHES_MOVE:return CALLBACK_TYPE.TOUCHES_MOVE;case TouchEventType.TOUCHES_UP:return CALLBACK_TYPE.TOUCHES_UP;case TouchEventType.TOUCHES_CANCELLED:return CALLBACK_TYPE.TOUCHES_CANCELLED;}return CALLBACK_TYPE.UNDEFINED;}",
    location: "/Users/antonio.benitez/Desktop/Callstack/CK/mrsasuu/AdoptaApp-Mini-app/node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/GestureDetector/useAnimatedGesture.ts",
    sourceMap: "{\"version\":3,\"names\":[\"touchEventTypeToCallbackType_Pnpm_useAnimatedGestureTs2\",\"eventType\",\"TouchEventType\",\"CALLBACK_TYPE\",\"__closure\",\"TOUCHES_DOWN\",\"TOUCHES_MOVE\",\"TOUCHES_UP\",\"TOUCHES_CANCELLED\",\"UNDEFINED\"],\"sources\":[\"/Users/antonio.benitez/Desktop/Callstack/CK/mrsasuu/AdoptaApp-Mini-app/node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/GestureDetector/useAnimatedGesture.ts\"],\"mappings\":\"AA6CA,SAAAA,uDAEiBA,CAAAC,SAAA,QAAAC,cAAA,CAAAC,aAAA,OAAAC,SAAA,CAEf,OAAQH,SAAS,EACf,IAAK,CAAAC,cAAc,CAACG,YAAY,CAC9B,MAAO,CAAAF,aAAa,CAACE,YAAY,CACnC,IAAK,CAAAH,cAAc,CAACI,YAAY,CAC9B,MAAO,CAAAH,aAAa,CAACG,YAAY,CACnC,IAAK,CAAAJ,cAAc,CAACK,UAAU,CAC5B,MAAO,CAAAJ,aAAa,CAACI,UAAU,CACjC,IAAK,CAAAL,cAAc,CAACM,iBAAiB,CACnC,MAAO,CAAAL,aAAa,CAACK,iBAAiB,CAC1C,CACA,MAAO,CAAAL,aAAa,CAACM,SAAS,CAChC\",\"ignoreList\":[]}",
    version: "3.17.5"
};
var touchEventTypeToCallbackType = function() {
    var _e = [
        new __webpack_require__.g.Error(),
        -3,
        -27
    ];
    var touchEventTypeToCallbackType = function(eventType) {
        switch(eventType){
            case _TouchEventType.TouchEventType.TOUCHES_DOWN:
                return _gesture.CALLBACK_TYPE.TOUCHES_DOWN;
            case _TouchEventType.TouchEventType.TOUCHES_MOVE:
                return _gesture.CALLBACK_TYPE.TOUCHES_MOVE;
            case _TouchEventType.TouchEventType.TOUCHES_UP:
                return _gesture.CALLBACK_TYPE.TOUCHES_UP;
            case _TouchEventType.TouchEventType.TOUCHES_CANCELLED:
                return _gesture.CALLBACK_TYPE.TOUCHES_CANCELLED;
        }
        return _gesture.CALLBACK_TYPE.UNDEFINED;
    };
    touchEventTypeToCallbackType.__closure = {
        TouchEventType: _TouchEventType.TouchEventType,
        CALLBACK_TYPE: _gesture.CALLBACK_TYPE
    };
    touchEventTypeToCallbackType.__workletHash = 6825086001765;
    touchEventTypeToCallbackType.__initData = _worklet_6825086001765_init_data;
    touchEventTypeToCallbackType.__stackDetails = _e;
    return touchEventTypeToCallbackType;
}();
var _worklet_6506685255530_init_data = {
    code: "function runWorklet_Pnpm_useAnimatedGestureTs3(type,gesture,event,...args){const{getHandler,tagMessage}=this.__closure;const handler=getHandler(type,gesture);if(gesture.isWorklet[type]){handler===null||handler===void 0||handler(event,...args);}else if(handler){console.warn(tagMessage('Animated gesture callback must be a worklet'));}}",
    location: "/Users/antonio.benitez/Desktop/Callstack/CK/mrsasuu/AdoptaApp-Mini-app/node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/GestureDetector/useAnimatedGesture.ts",
    sourceMap: "{\"version\":3,\"names\":[\"runWorklet_Pnpm_useAnimatedGestureTs3\",\"type\",\"gesture\",\"event\",\"args\",\"getHandler\",\"tagMessage\",\"__closure\",\"handler\",\"isWorklet\",\"console\",\"warn\"],\"sources\":[\"/Users/antonio.benitez/Desktop/Callstack/CK/mrsasuu/AdoptaApp-Mini-app/node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/GestureDetector/useAnimatedGesture.ts\"],\"mappings\":\"AA8DA,SAAAA,qCAIKA,CAAAC,IAAe,CAClBC,OAAA,CAAAC,KAAA,IAAAC,IAAA,QAAAC,UAAA,CAAAC,UAAA,OAAAC,SAAA,CAEA,KAAM,CAAAC,OAAO,CAAGH,UAAU,CAACJ,IAAI,CAAEC,OAAO,CAAC,CACzC,GAAIA,OAAO,CAACO,SAAS,CAACR,IAAI,CAAC,CAAE,CAG3BO,OAAO,SAAPA,OAAO,WAAPA,OAAO,CAAGL,KAAK,CAAE,GAAGC,IAAI,CAAC,CAC3B,CAAC,IAAM,IAAII,OAAO,CAAE,CAClBE,OAAO,CAACC,IAAI,CAACL,UAAU,CAAC,6CAA6C,CAAC,CAAC,CACzE,CACF\",\"ignoreList\":[]}",
    version: "3.17.5"
};
var runWorklet = function() {
    var _e = [
        new __webpack_require__.g.Error(),
        -3,
        -27
    ];
    var runWorklet = function(type, gesture, event, ...args) {
        var handler = getHandler(type, gesture);
        if (gesture.isWorklet[type]) {
            // @ts-ignore Logic below makes sure the correct event is send to the
            // correct handler.
            handler === null || handler === void 0 ? void 0 : handler.apply(void 0, [
                event
            ].concat(_to_consumable_array._(args)));
        } else if (handler) {
            console.warn((0, _utils.tagMessage)('Animated gesture callback must be a worklet'));
        }
    };
    runWorklet.__closure = {
        getHandler,
        tagMessage: _utils.tagMessage
    };
    runWorklet.__workletHash = 6506685255530;
    runWorklet.__initData = _worklet_6506685255530_init_data;
    runWorklet.__stackDetails = _e;
    return runWorklet;
}();
var _worklet_8201524245094_init_data = {
    code: "function isStateChangeEvent_Pnpm_useAnimatedGestureTs4(event){return event.oldState!=null;}",
    location: "/Users/antonio.benitez/Desktop/Callstack/CK/mrsasuu/AdoptaApp-Mini-app/node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/GestureDetector/useAnimatedGesture.ts",
    sourceMap: "{\"version\":3,\"names\":[\"isStateChangeEvent_Pnpm_useAnimatedGestureTs4\",\"event\",\"oldState\"],\"sources\":[\"/Users/antonio.benitez/Desktop/Callstack/CK/mrsasuu/AdoptaApp-Mini-app/node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/GestureDetector/useAnimatedGesture.ts\"],\"mappings\":\"AA+EA,SAAAA,6CAEoCA,CAAAC,KAAA,EAGlC,MAAO,CAAAA,KAAK,CAACC,QAAQ,EAAI,IAAI,CAC/B\",\"ignoreList\":[]}",
    version: "3.17.5"
};
var isStateChangeEvent = function() {
    var _e = [
        new __webpack_require__.g.Error(),
        1,
        -27
    ];
    var isStateChangeEvent = function(event) {
        // @ts-ignore Yes, the oldState prop is missing on GestureTouchEvent, that's the point
        return event.oldState != null;
    };
    isStateChangeEvent.__closure = {};
    isStateChangeEvent.__workletHash = 8201524245094;
    isStateChangeEvent.__initData = _worklet_8201524245094_init_data;
    isStateChangeEvent.__stackDetails = _e;
    return isStateChangeEvent;
}();
var _worklet_6575076970903_init_data = {
    code: "function isTouchEvent_Pnpm_useAnimatedGestureTs5(event){return event.eventType!=null;}",
    location: "/Users/antonio.benitez/Desktop/Callstack/CK/mrsasuu/AdoptaApp-Mini-app/node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/GestureDetector/useAnimatedGesture.ts",
    sourceMap: "{\"version\":3,\"names\":[\"isTouchEvent_Pnpm_useAnimatedGestureTs5\",\"event\",\"eventType\"],\"sources\":[\"/Users/antonio.benitez/Desktop/Callstack/CK/mrsasuu/AdoptaApp-Mini-app/node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/GestureDetector/useAnimatedGesture.ts\"],\"mappings\":\"AAuFA,SAAAA,uCAE8BA,CAAAC,KAAA,EAE5B,MAAO,CAAAA,KAAK,CAACC,SAAS,EAAI,IAAI,CAChC\",\"ignoreList\":[]}",
    version: "3.17.5"
};
var isTouchEvent = function() {
    var _e = [
        new __webpack_require__.g.Error(),
        1,
        -27
    ];
    var isTouchEvent = function(event) {
        return event.eventType != null;
    };
    isTouchEvent.__closure = {};
    isTouchEvent.__workletHash = 6575076970903;
    isTouchEvent.__initData = _worklet_6575076970903_init_data;
    isTouchEvent.__stackDetails = _e;
    return isTouchEvent;
}();
var _worklet_5273055625178_init_data = {
    code: "function pnpm_useAnimatedGestureTs6(event){const{sharedHandlersCallbacks,isStateChangeEvent,State,runWorklet,CALLBACK_TYPE,lastUpdateEvent,isTouchEvent,stateControllers,GestureStateManager,TouchEventType,touchEventTypeToCallbackType}=this.__closure;const currentCallback=sharedHandlersCallbacks.value;if(!currentCallback){return;}for(let i=0;i<currentCallback.length;i++){const gesture=currentCallback[i];if(event.handlerTag!==gesture.handlerTag){continue;}if(isStateChangeEvent(event)){if(event.oldState===State.UNDETERMINED&&event.state===State.BEGAN){runWorklet(CALLBACK_TYPE.BEGAN,gesture,event);}else if((event.oldState===State.BEGAN||event.oldState===State.UNDETERMINED)&&event.state===State.ACTIVE){runWorklet(CALLBACK_TYPE.START,gesture,event);lastUpdateEvent.value[gesture.handlerTag]=undefined;}else if(event.oldState!==event.state&&event.state===State.END){if(event.oldState===State.ACTIVE){runWorklet(CALLBACK_TYPE.END,gesture,event,true);}runWorklet(CALLBACK_TYPE.FINALIZE,gesture,event,true);}else if((event.state===State.FAILED||event.state===State.CANCELLED)&&event.state!==event.oldState){if(event.oldState===State.ACTIVE){runWorklet(CALLBACK_TYPE.END,gesture,event,false);}runWorklet(CALLBACK_TYPE.FINALIZE,gesture,event,false);}}else if(isTouchEvent(event)){if(!stateControllers[i]){stateControllers[i]=GestureStateManager.create(event.handlerTag);}if(event.eventType!==TouchEventType.UNDETERMINED){runWorklet(touchEventTypeToCallbackType(event.eventType),gesture,event,stateControllers[i]);}}else{runWorklet(CALLBACK_TYPE.UPDATE,gesture,event);if(gesture.onChange&&gesture.changeEventCalculator){var _gesture$changeEventC;runWorklet(CALLBACK_TYPE.CHANGE,gesture,(_gesture$changeEventC=gesture.changeEventCalculator)===null||_gesture$changeEventC===void 0?void 0:_gesture$changeEventC.call(gesture,event,lastUpdateEvent.value[gesture.handlerTag]));lastUpdateEvent.value[gesture.handlerTag]=event;}}}}",
    location: "/Users/antonio.benitez/Desktop/Callstack/CK/mrsasuu/AdoptaApp-Mini-app/node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/GestureDetector/useAnimatedGesture.ts",
    sourceMap: "{\"version\":3,\"names\":[\"pnpm_useAnimatedGestureTs6\",\"event\",\"sharedHandlersCallbacks\",\"isStateChangeEvent\",\"State\",\"runWorklet\",\"CALLBACK_TYPE\",\"lastUpdateEvent\",\"isTouchEvent\",\"stateControllers\",\"GestureStateManager\",\"TouchEventType\",\"touchEventTypeToCallbackType\",\"__closure\",\"currentCallback\",\"value\",\"i\",\"length\",\"gesture\",\"handlerTag\",\"oldState\",\"UNDETERMINED\",\"state\",\"BEGAN\",\"ACTIVE\",\"START\",\"undefined\",\"END\",\"FINALIZE\",\"FAILED\",\"CANCELLED\",\"create\",\"eventType\",\"UPDATE\",\"onChange\",\"changeEventCalculator\",\"_gesture$changeEventC\",\"CHANGE\",\"call\"],\"sources\":[\"/Users/antonio.benitez/Desktop/Callstack/CK/mrsasuu/AdoptaApp-Mini-app/node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/GestureDetector/useAnimatedGesture.ts\"],\"mappings\":\"AAqHmB,QACf,CAAAA,0BACGA,CAAAC,KAAA,QAAAC,uBAAA,CAAAC,kBAAA,CAAAC,KAAA,CAAAC,UAAA,CAAAC,aAAA,CAAAC,eAAA,CAAAC,YAAA,CAAAC,gBAAA,CAAAC,mBAAA,CAAAC,cAAA,CAAAC,4BAAA,OAAAC,SAAA,CAGH,KAAM,CAAAC,eAAe,CAAGZ,uBAAuB,CAACa,KAAK,CACrD,GAAI,CAACD,eAAe,CAAE,CACpB,OACF,CAEA,IAAK,GAAI,CAAAE,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGF,eAAe,CAACG,MAAM,CAAED,CAAC,EAAE,CAAE,CAC/C,KAAM,CAAAE,OAAO,CAAGJ,eAAe,CAACE,CAAC,CAAC,CAElC,GAAIf,KAAK,CAACkB,UAAU,GAAKD,OAAO,CAACC,UAAU,CAAE,CAC3C,SACF,CAEA,GAAIhB,kBAAkB,CAACF,KAAK,CAAC,CAAE,CAC7B,GACEA,KAAK,CAACmB,QAAQ,GAAKhB,KAAK,CAACiB,YAAY,EACrCpB,KAAK,CAACqB,KAAK,GAAKlB,KAAK,CAACmB,KAAK,CAC3B,CACAlB,UAAU,CAACC,aAAa,CAACiB,KAAK,CAAEL,OAAO,CAAEjB,KAAK,CAAC,CACjD,CAAC,IAAM,IACL,CAACA,KAAK,CAACmB,QAAQ,GAAKhB,KAAK,CAACmB,KAAK,EAC7BtB,KAAK,CAACmB,QAAQ,GAAKhB,KAAK,CAACiB,YAAY,GACvCpB,KAAK,CAACqB,KAAK,GAAKlB,KAAK,CAACoB,MAAM,CAC5B,CACAnB,UAAU,CAACC,aAAa,CAACmB,KAAK,CAAEP,OAAO,CAAEjB,KAAK,CAAC,CAC/CM,eAAe,CAACQ,KAAK,CAACG,OAAO,CAACC,UAAU,CAAC,CAAGO,SAAS,CACvD,CAAC,IAAM,IACLzB,KAAK,CAACmB,QAAQ,GAAKnB,KAAK,CAACqB,KAAK,EAC9BrB,KAAK,CAACqB,KAAK,GAAKlB,KAAK,CAACuB,GAAG,CACzB,CACA,GAAI1B,KAAK,CAACmB,QAAQ,GAAKhB,KAAK,CAACoB,MAAM,CAAE,CACnCnB,UAAU,CAACC,aAAa,CAACqB,GAAG,CAAET,OAAO,CAAEjB,KAAK,CAAE,IAAI,CAAC,CACrD,CACAI,UAAU,CAACC,aAAa,CAACsB,QAAQ,CAAEV,OAAO,CAAEjB,KAAK,CAAE,IAAI,CAAC,CAC1D,CAAC,IAAM,IACL,CAACA,KAAK,CAACqB,KAAK,GAAKlB,KAAK,CAACyB,MAAM,EAAI5B,KAAK,CAACqB,KAAK,GAAKlB,KAAK,CAAC0B,SAAS,GAChE7B,KAAK,CAACqB,KAAK,GAAKrB,KAAK,CAACmB,QAAQ,CAC9B,CACA,GAAInB,KAAK,CAACmB,QAAQ,GAAKhB,KAAK,CAACoB,MAAM,CAAE,CACnCnB,UAAU,CAACC,aAAa,CAACqB,GAAG,CAAET,OAAO,CAAEjB,KAAK,CAAE,KAAK,CAAC,CACtD,CACAI,UAAU,CAACC,aAAa,CAACsB,QAAQ,CAAEV,OAAO,CAAEjB,KAAK,CAAE,KAAK,CAAC,CAC3D,CACF,CAAC,IAAM,IAAIO,YAAY,CAACP,KAAK,CAAC,CAAE,CAC9B,GAAI,CAACQ,gBAAgB,CAACO,CAAC,CAAC,CAAE,CACxBP,gBAAgB,CAACO,CAAC,CAAC,CAAGN,mBAAmB,CAACqB,MAAM,CAAC9B,KAAK,CAACkB,UAAU,CAAC,CACpE,CAEA,GAAIlB,KAAK,CAAC+B,SAAS,GAAKrB,cAAc,CAACU,YAAY,CAAE,CACnDhB,UAAU,CACRO,4BAA4B,CAACX,KAAK,CAAC+B,SAAS,CAAC,CAC7Cd,OAAO,CACPjB,KAAK,CACLQ,gBAAgB,CAACO,CAAC,CACpB,CAAC,CACH,CACF,CAAC,IAAM,CACLX,UAAU,CAACC,aAAa,CAAC2B,MAAM,CAAEf,OAAO,CAAEjB,KAAK,CAAC,CAEhD,GAAIiB,OAAO,CAACgB,QAAQ,EAAIhB,OAAO,CAACiB,qBAAqB,CAAE,KAAAC,qBAAA,CACrD/B,UAAU,CACRC,aAAa,CAAC+B,MAAM,CACpBnB,OAAO,EAAAkB,qBAAA,CACPlB,OAAO,CAACiB,qBAAqB,UAAAC,qBAAA,iBAA7BA,qBAAA,CAAAE,IAAA,CAAApB,OAAO,CACLjB,KAAK,CACLM,eAAe,CAACQ,KAAK,CAACG,OAAO,CAACC,UAAU,CAC1C,CACF,CAAC,CAEDZ,eAAe,CAACQ,KAAK,CAACG,OAAO,CAACC,UAAU,CAAC,CAAGlB,KAAK,CACnD,CACF,CACF,CACF\",\"ignoreList\":[]}",
    version: "3.17.5"
};
function useAnimatedGesture(preparedGesture, needsRebuild) {
    if (!_reanimatedWrapper.Reanimated) {
        return;
    }
    // Hooks are called conditionally, but the condition is whether the
    // react-native-reanimated is installed, which shouldn't change while running
    // eslint-disable-next-line react-hooks/rules-of-hooks
    var sharedHandlersCallbacks = _reanimatedWrapper.Reanimated.useSharedValue(null);
    // eslint-disable-next-line react-hooks/rules-of-hooks
    var lastUpdateEvent = _reanimatedWrapper.Reanimated.useSharedValue([]);
    // not every gesture needs a state controller, init them lazily
    var stateControllers = [];
    var callback = function() {
        var _e = [
            new __webpack_require__.g.Error(),
            -12,
            -27
        ];
        var pnpm_useAnimatedGestureTs6 = function(event) {
            var currentCallback = sharedHandlersCallbacks.value;
            if (!currentCallback) {
                return;
            }
            for(var i = 0; i < currentCallback.length; i++){
                var gesture = currentCallback[i];
                if (event.handlerTag !== gesture.handlerTag) {
                    continue;
                }
                if (isStateChangeEvent(event)) {
                    if (event.oldState === _State.State.UNDETERMINED && event.state === _State.State.BEGAN) {
                        runWorklet(_gesture.CALLBACK_TYPE.BEGAN, gesture, event);
                    } else if ((event.oldState === _State.State.BEGAN || event.oldState === _State.State.UNDETERMINED) && event.state === _State.State.ACTIVE) {
                        runWorklet(_gesture.CALLBACK_TYPE.START, gesture, event);
                        lastUpdateEvent.value[gesture.handlerTag] = undefined;
                    } else if (event.oldState !== event.state && event.state === _State.State.END) {
                        if (event.oldState === _State.State.ACTIVE) {
                            runWorklet(_gesture.CALLBACK_TYPE.END, gesture, event, true);
                        }
                        runWorklet(_gesture.CALLBACK_TYPE.FINALIZE, gesture, event, true);
                    } else if ((event.state === _State.State.FAILED || event.state === _State.State.CANCELLED) && event.state !== event.oldState) {
                        if (event.oldState === _State.State.ACTIVE) {
                            runWorklet(_gesture.CALLBACK_TYPE.END, gesture, event, false);
                        }
                        runWorklet(_gesture.CALLBACK_TYPE.FINALIZE, gesture, event, false);
                    }
                } else if (isTouchEvent(event)) {
                    if (!stateControllers[i]) {
                        stateControllers[i] = _gestureStateManager.GestureStateManager.create(event.handlerTag);
                    }
                    if (event.eventType !== _TouchEventType.TouchEventType.UNDETERMINED) {
                        runWorklet(touchEventTypeToCallbackType(event.eventType), gesture, event, stateControllers[i]);
                    }
                } else {
                    runWorklet(_gesture.CALLBACK_TYPE.UPDATE, gesture, event);
                    if (gesture.onChange && gesture.changeEventCalculator) {
                        var _gesture_changeEventCalculator;
                        runWorklet(_gesture.CALLBACK_TYPE.CHANGE, gesture, (_gesture_changeEventCalculator = gesture.changeEventCalculator) === null || _gesture_changeEventCalculator === void 0 ? void 0 : _gesture_changeEventCalculator.call(gesture, event, lastUpdateEvent.value[gesture.handlerTag]));
                        lastUpdateEvent.value[gesture.handlerTag] = event;
                    }
                }
            }
        };
        pnpm_useAnimatedGestureTs6.__closure = {
            sharedHandlersCallbacks,
            isStateChangeEvent,
            State: _State.State,
            runWorklet,
            CALLBACK_TYPE: _gesture.CALLBACK_TYPE,
            lastUpdateEvent,
            isTouchEvent,
            stateControllers,
            GestureStateManager: _gestureStateManager.GestureStateManager,
            TouchEventType: _TouchEventType.TouchEventType,
            touchEventTypeToCallbackType
        };
        pnpm_useAnimatedGestureTs6.__workletHash = 5273055625178;
        pnpm_useAnimatedGestureTs6.__initData = _worklet_5273055625178_init_data;
        pnpm_useAnimatedGestureTs6.__stackDetails = _e;
        return pnpm_useAnimatedGestureTs6;
    }();
    // eslint-disable-next-line react-hooks/rules-of-hooks
    var event = _reanimatedWrapper.Reanimated.useEvent(callback, [
        'onGestureHandlerStateChange',
        'onGestureHandlerEvent'
    ], needsRebuild);
    preparedGesture.animatedEventHandler = event;
    preparedGesture.animatedHandlers = sharedHandlersCallbacks;
}


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/GestureDetector/useDetectorUpdater.ts": 
/*!***********************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/GestureDetector/useDetectorUpdater.ts ***!
  \***********************************************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "useDetectorUpdater", ({
    enumerable: true,
    get: function() {
        return useDetectorUpdater;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react"));
var _attachHandlers = __webpack_require__(/*! ./attachHandlers */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/GestureDetector/attachHandlers.ts");
var _updateHandlers = __webpack_require__(/*! ./updateHandlers */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/GestureDetector/updateHandlers.ts");
var _needsToReattach = __webpack_require__(/*! ./needsToReattach */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/GestureDetector/needsToReattach.ts");
var _dropHandlers = __webpack_require__(/*! ./dropHandlers */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/GestureDetector/dropHandlers.ts");
var _utils = __webpack_require__(/*! ./utils */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/GestureDetector/utils.ts");
var _findNodeHandle = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../../findNodeHandle */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/findNodeHandle.ts"));
function useDetectorUpdater(state, preparedGesture, gesturesToAttach, gestureConfig, webEventHandlersRef) {
    var forceRender = (0, _utils.useForceRender)();
    var updateAttachedGestures = (0, _react.useCallback)(// skipConfigUpdate is used to prevent unnecessary updates when only checking if the view has changed
    (skipConfigUpdate)=>{
        // If the underlying view has changed we need to reattach handlers to the new view
        var viewTag = (0, _findNodeHandle.default)(state.viewRef);
        var didUnderlyingViewChange = viewTag !== state.previousViewTag;
        if (didUnderlyingViewChange || (0, _needsToReattach.needsToReattach)(preparedGesture, gesturesToAttach)) {
            (0, _utils.validateDetectorChildren)(state.viewRef);
            (0, _dropHandlers.dropHandlers)(preparedGesture);
            (0, _attachHandlers.attachHandlers)({
                preparedGesture,
                gestureConfig,
                gesturesToAttach,
                webEventHandlersRef,
                viewTag
            });
            if (didUnderlyingViewChange) {
                state.previousViewTag = viewTag;
                state.forceRebuildReanimatedEvent = true;
                forceRender();
            }
        } else if (!skipConfigUpdate) {
            (0, _updateHandlers.updateHandlers)(preparedGesture, gestureConfig, gesturesToAttach);
        }
    }, [
        forceRender,
        gestureConfig,
        gesturesToAttach,
        preparedGesture,
        state,
        webEventHandlersRef
    ]);
    return updateAttachedGestures;
}


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/GestureDetector/useMountReactions.ts": 
/*!**********************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/GestureDetector/useMountReactions.ts ***!
  \**********************************************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "useMountReactions", ({
    enumerable: true,
    get: function() {
        return useMountReactions;
    }
}));
var _utils = __webpack_require__(/*! ../../utils */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/utils.ts");
var _mountRegistry = __webpack_require__(/*! ../../../mountRegistry */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/mountRegistry.ts");
var _react = __webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react");
function shouldUpdateDetector(relation, gesture) {
    if (relation === undefined) {
        return false;
    }
    for (var tag of (0, _utils.transformIntoHandlerTags)(relation)){
        if (tag === gesture.handlerTag) {
            return true;
        }
    }
    return false;
}
function useMountReactions(updateDetector, state) {
    (0, _react.useEffect)(()=>{
        return _mountRegistry.MountRegistry.addMountListener((gesture)=>{
            // At this point the ref in the gesture config should be updated, so we can check if one of the gestures
            // set in a relation with the gesture got mounted. If so, we need to update the detector to propagate
            // the changes to the native side.
            for (var attachedGesture of state.attachedGestures){
                var blocksHandlers = attachedGesture.config.blocksHandlers;
                var requireToFail = attachedGesture.config.requireToFail;
                var simultaneousWith = attachedGesture.config.simultaneousWith;
                if (shouldUpdateDetector(blocksHandlers, gesture) || shouldUpdateDetector(requireToFail, gesture) || shouldUpdateDetector(simultaneousWith, gesture)) {
                    updateDetector();
                    // We can safely return here, if any other gestures should be updated, they will be by the above call
                    return;
                }
            }
        });
    }, [
        updateDetector,
        state
    ]);
}


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/GestureDetector/useViewRefHandler.ts": 
/*!**********************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/GestureDetector/useViewRefHandler.ts ***!
  \**********************************************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "useViewRefHandler", ({
    enumerable: true,
    get: function() {
        return useViewRefHandler;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _utils = __webpack_require__(/*! ../../../utils */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/utils.ts");
var _getShadowNodeFromRef = __webpack_require__(/*! ../../../getShadowNodeFromRef */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/getShadowNodeFromRef.ts");
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react"));
var _findNodeHandle = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../../findNodeHandle */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/findNodeHandle.ts"));
function useViewRefHandler(state, updateAttachedGestures) {
    var refHandler = (0, _react.useCallback)((ref)=>{
        if (ref === null) {
            return;
        }
        state.viewRef = ref;
        // if it's the first render, also set the previousViewTag to prevent reattaching gestures when not needed
        if (state.previousViewTag === -1) {
            state.previousViewTag = (0, _findNodeHandle.default)(state.viewRef);
        }
        // Pass true as `skipConfigUpdate`. Here we only want to trigger the eventual reattaching of handlers
        // in case the view has changed. If the view doesn't change, the update will be handled by detector.
        if (!state.firstRender) {
            updateAttachedGestures(true);
        }
        if ( true && (0, _utils.isFabric)() && __webpack_require__.g.isViewFlatteningDisabled) {
            var node = (0, _getShadowNodeFromRef.getShadowNodeFromRef)(ref);
            if (__webpack_require__.g.isViewFlatteningDisabled(node) === false) {
                console.error((0, _utils.tagMessage)('GestureDetector has received a child that may get view-flattened. ' + '\nTo prevent it from misbehaving you need to wrap the child with a `<View collapsable={false}>`.'));
            }
        }
    }, [
        state,
        updateAttachedGestures
    ]);
    return refHandler;
}


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/GestureDetector/utils.ts": 
/*!**********************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/GestureDetector/utils.ts ***!
  \**********************************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get ALLOWED_PROPS () {
        return ALLOWED_PROPS;
    },
    get checkGestureCallbacksForWorklets () {
        return checkGestureCallbacksForWorklets;
    },
    get extractGestureRelations () {
        return extractGestureRelations;
    },
    get useForceRender () {
        return useForceRender;
    },
    get useWebEventHandlers () {
        return useWebEventHandlers;
    },
    get validateDetectorChildren () {
        return validateDetectorChildren;
    }
});
var _sliced_to_array = __webpack_require__(/*! @swc/helpers/_/_sliced_to_array */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_sliced_to_array.cjs");
var _to_consumable_array = __webpack_require__(/*! @swc/helpers/_/_to_consumable_array */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_to_consumable_array.cjs");
var _reactnative = __webpack_require__(/*! react-native */ "webpack/sharing/consume/default/react-native/react-native");
var _utils = __webpack_require__(/*! ../../../utils */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/utils.ts");
var _gesture = __webpack_require__(/*! ../gesture */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/gesture.ts");
var _FlingGestureHandler = __webpack_require__(/*! ../../FlingGestureHandler */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/FlingGestureHandler.ts");
var _ForceTouchGestureHandler = __webpack_require__(/*! ../../ForceTouchGestureHandler */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/ForceTouchGestureHandler.ts");
var _LongPressGestureHandler = __webpack_require__(/*! ../../LongPressGestureHandler */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/LongPressGestureHandler.ts");
var _PanGestureHandler = __webpack_require__(/*! ../../PanGestureHandler */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/PanGestureHandler.ts");
var _TapGestureHandler = __webpack_require__(/*! ../../TapGestureHandler */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/TapGestureHandler.ts");
var _hoverGesture = __webpack_require__(/*! ../hoverGesture */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/hoverGesture.ts");
var _NativeViewGestureHandler = __webpack_require__(/*! ../../NativeViewGestureHandler */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/NativeViewGestureHandler.ts");
var _gestureHandlerCommon = __webpack_require__(/*! ../../gestureHandlerCommon */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestureHandlerCommon.ts");
var _EnableNewWebImplementation = __webpack_require__(/*! ../../../EnableNewWebImplementation */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/EnableNewWebImplementation.ts");
var _RNRenderer = __webpack_require__(/*! ../../../RNRenderer */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/RNRenderer.ts");
var _react = __webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react");
var _reanimatedWrapper = __webpack_require__(/*! ../reanimatedWrapper */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/reanimatedWrapper.ts");
var _eventReceiver = __webpack_require__(/*! ../eventReceiver */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/eventReceiver.ts");
var ALLOWED_PROPS = _to_consumable_array._(_gestureHandlerCommon.baseGestureHandlerWithDetectorProps).concat(_to_consumable_array._(_TapGestureHandler.tapGestureHandlerProps), _to_consumable_array._(_PanGestureHandler.panGestureHandlerProps), _to_consumable_array._(_PanGestureHandler.panGestureHandlerCustomNativeProps), _to_consumable_array._(_LongPressGestureHandler.longPressGestureHandlerProps), _to_consumable_array._(_ForceTouchGestureHandler.forceTouchGestureHandlerProps), _to_consumable_array._(_FlingGestureHandler.flingGestureHandlerProps), _to_consumable_array._(_hoverGesture.hoverGestureHandlerProps), _to_consumable_array._(_NativeViewGestureHandler.nativeViewGestureHandlerProps));
function convertToHandlerTag(ref) {
    if (typeof ref === 'number') {
        return ref;
    } else if (ref instanceof _gesture.BaseGesture) {
        return ref.handlerTag;
    } else {
        var _ref_current;
        // @ts-ignore in this case it should be a ref either to gesture object or
        // a gesture handler component, in both cases handlerTag property exists
        return ((_ref_current = ref.current) === null || _ref_current === void 0 ? void 0 : _ref_current.handlerTag) ?? -1;
    }
}
function extractValidHandlerTags(interactionGroup) {
    var _interactionGroup_map;
    return (interactionGroup === null || interactionGroup === void 0 ? void 0 : (_interactionGroup_map = interactionGroup.map(convertToHandlerTag)) === null || _interactionGroup_map === void 0 ? void 0 : _interactionGroup_map.filter((tag)=>tag > 0)) ?? [];
}
function extractGestureRelations(gesture) {
    var requireToFail = extractValidHandlerTags(gesture.config.requireToFail);
    var simultaneousWith = extractValidHandlerTags(gesture.config.simultaneousWith);
    var blocksHandlers = extractValidHandlerTags(gesture.config.blocksHandlers);
    return {
        waitFor: requireToFail,
        simultaneousHandlers: simultaneousWith,
        blocksHandlers: blocksHandlers
    };
}
function checkGestureCallbacksForWorklets(gesture) {
    if (false) {}
    // If a gesture is explicitly marked to run on the JS thread there is no need to check
    // if callbacks are worklets as the user is aware they will be ran on the JS thread
    if (gesture.config.runOnJS) {
        return;
    }
    var areSomeNotWorklets = gesture.handlers.isWorklet.includes(false);
    var areSomeWorklets = gesture.handlers.isWorklet.includes(true);
    // If some of the callbacks are worklets and some are not, and the gesture is not
    // explicitly marked with `.runOnJS(true)` show an error
    if (areSomeNotWorklets && areSomeWorklets) {
        console.error((0, _utils.tagMessage)(`Some of the callbacks in the gesture are worklets and some are not. Either make sure that all calbacks are marked as 'worklet' if you wish to run them on the UI thread or use '.runOnJS(true)' modifier on the gesture explicitly to run all callbacks on the JS thread.`));
    }
    if (_reanimatedWrapper.Reanimated === undefined) {
        // If Reanimated is not available, we can't run worklets, so we shouldn't show the warning
        return;
    }
    var areAllNotWorklets = !areSomeWorklets && areSomeNotWorklets;
    // If none of the callbacks are worklets and the gesture is not explicitly marked with
    // `.runOnJS(true)` show a warning
    if (areAllNotWorklets && !(0, _utils.isTestEnv)()) {
        console.warn((0, _utils.tagMessage)(`None of the callbacks in the gesture are worklets. If you wish to run them on the JS thread use '.runOnJS(true)' modifier on the gesture to make this explicit. Otherwise, mark the callbacks as 'worklet' to run them on the UI thread.`));
    }
}
function validateDetectorChildren(ref) {
    // Finds the first native view under the Wrap component and traverses the fiber tree upwards
    // to check whether there is more than one native view as a pseudo-direct child of GestureDetector
    // i.e. this is not ok:
    //            Wrap
    //             |
    //            / \
    //           /   \
    //          /     \
    //         /       \
    //   NativeView  NativeView
    //
    // but this is fine:
    //            Wrap
    //             |
    //         NativeView
    //             |
    //            / \
    //           /   \
    //          /     \
    //         /       \
    //   NativeView  NativeView
    if ( true && _reactnative.Platform.OS !== 'web') {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        var wrapType = // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
        ref._reactInternals.elementType;
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        var instance = _RNRenderer.RNRenderer.findHostInstance_DEPRECATED(ref)._internalFiberInstanceHandleDEV;
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
        while(instance && instance.elementType !== wrapType){
            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
            if (instance.sibling) {
                throw new Error('GestureDetector has more than one native view as its children. This can happen if you are using a custom component that renders multiple views, like React.Fragment. You should wrap content of GestureDetector with a <View> or <Animated.View>.');
            }
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access
            instance = instance.return;
        }
    }
}
function useForceRender() {
    var _useState = _sliced_to_array._((0, _react.useState)(false), 2), renderState = _useState[0], setRenderState = _useState[1];
    var forceRender = (0, _react.useCallback)(()=>{
        setRenderState(!renderState);
    }, [
        renderState,
        setRenderState
    ]);
    return forceRender;
}
function useWebEventHandlers() {
    return (0, _react.useRef)({
        onGestureHandlerEvent: (e)=>{
            (0, _eventReceiver.onGestureHandlerEvent)(e.nativeEvent);
        },
        onGestureHandlerStateChange: (0, _EnableNewWebImplementation.isNewWebImplementationEnabled)() ? (e)=>{
            (0, _eventReceiver.onGestureHandlerEvent)(e.nativeEvent);
        } : undefined
    });
}


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/eventReceiver.ts": 
/*!**************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/eventReceiver.ts ***!
  \**************************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get onGestureHandlerEvent () {
        return onGestureHandlerEvent;
    },
    get startListening () {
        return startListening;
    },
    get stopListening () {
        return stopListening;
    }
});
var _reactnative = __webpack_require__(/*! react-native */ "webpack/sharing/consume/default/react-native/react-native");
var _State = __webpack_require__(/*! ../../State */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/State.ts");
var _TouchEventType = __webpack_require__(/*! ../../TouchEventType */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/TouchEventType.ts");
var _handlersRegistry = __webpack_require__(/*! ../handlersRegistry */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/handlersRegistry.ts");
var _gestureStateManager = __webpack_require__(/*! ./gestureStateManager */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/gestureStateManager.ts");
var gestureHandlerEventSubscription = null;
var gestureHandlerStateChangeEventSubscription = null;
var gestureStateManagers = new Map();
var lastUpdateEvent = [];
function isStateChangeEvent(event) {
    // @ts-ignore oldState doesn't exist on GestureTouchEvent and that's the point
    return event.oldState != null;
}
function isTouchEvent(event) {
    return event.eventType != null;
}
function onGestureHandlerEvent(event) {
    var handler = (0, _handlersRegistry.findHandler)(event.handlerTag);
    if (handler) {
        if (isStateChangeEvent(event)) {
            if (event.oldState === _State.State.UNDETERMINED && event.state === _State.State.BEGAN) {
                var _handler_handlers_onBegin, _handler_handlers;
                (_handler_handlers_onBegin = (_handler_handlers = handler.handlers).onBegin) === null || _handler_handlers_onBegin === void 0 ? void 0 : _handler_handlers_onBegin.call(_handler_handlers, event);
            } else if ((event.oldState === _State.State.BEGAN || event.oldState === _State.State.UNDETERMINED) && event.state === _State.State.ACTIVE) {
                var _handler_handlers_onStart, _handler_handlers1;
                (_handler_handlers_onStart = (_handler_handlers1 = handler.handlers).onStart) === null || _handler_handlers_onStart === void 0 ? void 0 : _handler_handlers_onStart.call(_handler_handlers1, event);
                lastUpdateEvent[handler.handlers.handlerTag] = event;
            } else if (event.oldState !== event.state && event.state === _State.State.END) {
                var _handler_handlers_onFinalize, _handler_handlers2;
                if (event.oldState === _State.State.ACTIVE) {
                    var _handler_handlers_onEnd, _handler_handlers3;
                    (_handler_handlers_onEnd = (_handler_handlers3 = handler.handlers).onEnd) === null || _handler_handlers_onEnd === void 0 ? void 0 : _handler_handlers_onEnd.call(_handler_handlers3, event, true);
                }
                (_handler_handlers_onFinalize = (_handler_handlers2 = handler.handlers).onFinalize) === null || _handler_handlers_onFinalize === void 0 ? void 0 : _handler_handlers_onFinalize.call(_handler_handlers2, event, true);
                lastUpdateEvent[handler.handlers.handlerTag] = undefined;
            } else if ((event.state === _State.State.FAILED || event.state === _State.State.CANCELLED) && event.oldState !== event.state) {
                var _handler_handlers_onFinalize1, _handler_handlers4;
                if (event.oldState === _State.State.ACTIVE) {
                    var _handler_handlers_onEnd1, _handler_handlers5;
                    (_handler_handlers_onEnd1 = (_handler_handlers5 = handler.handlers).onEnd) === null || _handler_handlers_onEnd1 === void 0 ? void 0 : _handler_handlers_onEnd1.call(_handler_handlers5, event, false);
                }
                (_handler_handlers_onFinalize1 = (_handler_handlers4 = handler.handlers).onFinalize) === null || _handler_handlers_onFinalize1 === void 0 ? void 0 : _handler_handlers_onFinalize1.call(_handler_handlers4, event, false);
                gestureStateManagers.delete(event.handlerTag);
                lastUpdateEvent[handler.handlers.handlerTag] = undefined;
            }
        } else if (isTouchEvent(event)) {
            if (!gestureStateManagers.has(event.handlerTag)) {
                gestureStateManagers.set(event.handlerTag, _gestureStateManager.GestureStateManager.create(event.handlerTag));
            }
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            var manager = gestureStateManagers.get(event.handlerTag);
            switch(event.eventType){
                case _TouchEventType.TouchEventType.TOUCHES_DOWN:
                    var _handler_handlers_onTouchesDown, _handler_handlers6;
                    (_handler_handlers6 = handler.handlers) === null || _handler_handlers6 === void 0 ? void 0 : (_handler_handlers_onTouchesDown = _handler_handlers6.onTouchesDown) === null || _handler_handlers_onTouchesDown === void 0 ? void 0 : _handler_handlers_onTouchesDown.call(_handler_handlers6, event, manager);
                    break;
                case _TouchEventType.TouchEventType.TOUCHES_MOVE:
                    var _handler_handlers_onTouchesMove, _handler_handlers7;
                    (_handler_handlers7 = handler.handlers) === null || _handler_handlers7 === void 0 ? void 0 : (_handler_handlers_onTouchesMove = _handler_handlers7.onTouchesMove) === null || _handler_handlers_onTouchesMove === void 0 ? void 0 : _handler_handlers_onTouchesMove.call(_handler_handlers7, event, manager);
                    break;
                case _TouchEventType.TouchEventType.TOUCHES_UP:
                    var _handler_handlers_onTouchesUp, _handler_handlers8;
                    (_handler_handlers8 = handler.handlers) === null || _handler_handlers8 === void 0 ? void 0 : (_handler_handlers_onTouchesUp = _handler_handlers8.onTouchesUp) === null || _handler_handlers_onTouchesUp === void 0 ? void 0 : _handler_handlers_onTouchesUp.call(_handler_handlers8, event, manager);
                    break;
                case _TouchEventType.TouchEventType.TOUCHES_CANCELLED:
                    var _handler_handlers_onTouchesCancelled, _handler_handlers9;
                    (_handler_handlers9 = handler.handlers) === null || _handler_handlers9 === void 0 ? void 0 : (_handler_handlers_onTouchesCancelled = _handler_handlers9.onTouchesCancelled) === null || _handler_handlers_onTouchesCancelled === void 0 ? void 0 : _handler_handlers_onTouchesCancelled.call(_handler_handlers9, event, manager);
                    break;
            }
        } else {
            var _handler_handlers_onUpdate, _handler_handlers10;
            (_handler_handlers_onUpdate = (_handler_handlers10 = handler.handlers).onUpdate) === null || _handler_handlers_onUpdate === void 0 ? void 0 : _handler_handlers_onUpdate.call(_handler_handlers10, event);
            if (handler.handlers.onChange && handler.handlers.changeEventCalculator) {
                var _handler_handlers_changeEventCalculator, _handler_handlers11, _handler_handlers_onChange, _handler_handlers12;
                (_handler_handlers_onChange = (_handler_handlers12 = handler.handlers).onChange) === null || _handler_handlers_onChange === void 0 ? void 0 : _handler_handlers_onChange.call(_handler_handlers12, (_handler_handlers_changeEventCalculator = (_handler_handlers11 = handler.handlers).changeEventCalculator) === null || _handler_handlers_changeEventCalculator === void 0 ? void 0 : _handler_handlers_changeEventCalculator.call(_handler_handlers11, event, lastUpdateEvent[handler.handlers.handlerTag]));
                lastUpdateEvent[handler.handlers.handlerTag] = event;
            }
        }
    } else {
        var oldHandler = (0, _handlersRegistry.findOldGestureHandler)(event.handlerTag);
        if (oldHandler) {
            var nativeEvent = {
                nativeEvent: event
            };
            if (isStateChangeEvent(event)) {
                oldHandler.onGestureStateChange(nativeEvent);
            } else {
                oldHandler.onGestureEvent(nativeEvent);
            }
            return;
        }
    }
}
function startListening() {
    stopListening();
    gestureHandlerEventSubscription = _reactnative.DeviceEventEmitter.addListener('onGestureHandlerEvent', onGestureHandlerEvent);
    gestureHandlerStateChangeEventSubscription = _reactnative.DeviceEventEmitter.addListener('onGestureHandlerStateChange', onGestureHandlerEvent);
}
function stopListening() {
    if (gestureHandlerEventSubscription) {
        gestureHandlerEventSubscription.remove();
        gestureHandlerEventSubscription = null;
    }
    if (gestureHandlerStateChangeEventSubscription) {
        gestureHandlerStateChangeEventSubscription.remove();
        gestureHandlerStateChangeEventSubscription = null;
    }
}


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/flingGesture.ts": 
/*!*************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/flingGesture.ts ***!
  \*************************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "FlingGesture", ({
    enumerable: true,
    get: function() {
        return FlingGesture;
    }
}));
var _call_super = __webpack_require__(/*! @swc/helpers/_/_call_super */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_call_super.cjs");
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_create_class.cjs");
var _inherits = __webpack_require__(/*! @swc/helpers/_/_inherits */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_inherits.cjs");
var _gesture = __webpack_require__(/*! ./gesture */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/gesture.ts");
var FlingGesture = /*#__PURE__*/ function(BaseGesture) {
    "use strict";
    _inherits._(FlingGesture, BaseGesture);
    function FlingGesture() {
        _class_call_check._(this, FlingGesture);
        var _this;
        _this = _call_super._(this, FlingGesture), _this.config = {};
        _this.handlerName = 'FlingGestureHandler';
        return _this;
    }
    _create_class._(FlingGesture, [
        {
            /**
   * Determine exact number of points required to handle the fling gesture.
   * @param pointers
   */ key: "numberOfPointers",
            value: function numberOfPointers(pointers) {
                this.config.numberOfPointers = pointers;
                return this;
            }
        },
        {
            /**
   * Expressed allowed direction of movement.
   * Expected values are exported as constants in the Directions object.
   * Arguments can be combined using `|` operator. Default value is set to `MouseButton.LEFT`.
   * @param direction
   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/fling-gesture/#directionvalue-directions
   */ key: "direction",
            value: function direction(direction) {
                this.config.direction = direction;
                return this;
            }
        }
    ]);
    return FlingGesture;
}(_gesture.BaseGesture);


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/forceTouchGesture.ts": 
/*!******************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/forceTouchGesture.ts ***!
  \******************************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "ForceTouchGesture", ({
    enumerable: true,
    get: function() {
        return ForceTouchGesture;
    }
}));
var _call_super = __webpack_require__(/*! @swc/helpers/_/_call_super */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_call_super.cjs");
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_create_class.cjs");
var _get = __webpack_require__(/*! @swc/helpers/_/_get */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_get.cjs");
var _get_prototype_of = __webpack_require__(/*! @swc/helpers/_/_get_prototype_of */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_get_prototype_of.cjs");
var _inherits = __webpack_require__(/*! @swc/helpers/_/_inherits */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_inherits.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _gesture = __webpack_require__(/*! ./gesture */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/gesture.ts");
var _worklet_11365193947542_init_data = {
    code: "function changeEventCalculator_Pnpm_forceTouchGestureTs1(current,previous){let changePayload;if(previous===undefined){changePayload={forceChange:current.force};}else{changePayload={forceChange:current.force-previous.force};}return{...current,...changePayload};}",
    location: "/Users/antonio.benitez/Desktop/Callstack/CK/mrsasuu/AdoptaApp-Mini-app/node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/forceTouchGesture.ts",
    sourceMap: "{\"version\":3,\"names\":[\"changeEventCalculator_Pnpm_forceTouchGestureTs1\",\"current\",\"previous\",\"changePayload\",\"undefined\",\"forceChange\",\"force\"],\"sources\":[\"/Users/antonio.benitez/Desktop/Callstack/CK/mrsasuu/AdoptaApp-Mini-app/node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/forceTouchGesture.ts\"],\"mappings\":\"AASA,SAAAA,+CAGEA,CAAAC,OAAA,CAAAC,QAAA,EAEA,GAAI,CAAAC,aAAkD,CACtD,GAAID,QAAQ,GAAKE,SAAS,CAAE,CAC1BD,aAAa,CAAG,CACdE,WAAW,CAAEJ,OAAO,CAACK,KACvB,CAAC,CACH,CAAC,IAAM,CACLH,aAAa,CAAG,CACdE,WAAW,CAAEJ,OAAO,CAACK,KAAK,CAAGJ,QAAQ,CAACI,KACxC,CAAC,CACH,CAEA,MAAO,CAAE,GAAGL,OAAO,CAAE,GAAGE,aAAc,CAAC,CACzC\",\"ignoreList\":[]}",
    version: "3.17.5"
};
var changeEventCalculator = function() {
    var _e = [
        new __webpack_require__.g.Error(),
        1,
        -27
    ];
    var changeEventCalculator = function(current, previous) {
        var changePayload;
        if (previous === undefined) {
            changePayload = {
                forceChange: current.force
            };
        } else {
            changePayload = {
                forceChange: current.force - previous.force
            };
        }
        return _object_spread._({}, current, changePayload);
    };
    changeEventCalculator.__closure = {};
    changeEventCalculator.__workletHash = 11365193947542;
    changeEventCalculator.__initData = _worklet_11365193947542_init_data;
    changeEventCalculator.__stackDetails = _e;
    return changeEventCalculator;
}();
var ForceTouchGesture = /*#__PURE__*/ function(ContinousBaseGesture) {
    "use strict";
    _inherits._(ForceTouchGesture, ContinousBaseGesture);
    function ForceTouchGesture() {
        _class_call_check._(this, ForceTouchGesture);
        var _this;
        _this = _call_super._(this, ForceTouchGesture), _this.config = {};
        _this.handlerName = 'ForceTouchGestureHandler';
        return _this;
    }
    _create_class._(ForceTouchGesture, [
        {
            /**
   * A minimal pressure that is required before gesture can activate.
   * Should be a value from range [0.0, 1.0]. Default is 0.2.
   * @param force
   */ key: "minForce",
            value: function minForce(force) {
                this.config.minForce = force;
                return this;
            }
        },
        {
            /**
   * A maximal pressure that could be applied for gesture.
   * If the pressure is greater, gesture fails. Should be a value from range [0.0, 1.0].
   * @param force
   */ key: "maxForce",
            value: function maxForce(force) {
                this.config.maxForce = force;
                return this;
            }
        },
        {
            /**
   * Value defining if haptic feedback has to be performed on activation.
   * @param value
   */ key: "feedbackOnActivation",
            value: function feedbackOnActivation(value) {
                this.config.feedbackOnActivation = value;
                return this;
            }
        },
        {
            key: "onChange",
            value: function onChange(callback) {
                // @ts-ignore TS being overprotective, ForceTouchGestureHandlerEventPayload is Record
                this.handlers.changeEventCalculator = changeEventCalculator;
                return _get._(_get_prototype_of._(ForceTouchGesture.prototype), "onChange", this).call(this, callback);
            }
        }
    ]);
    return ForceTouchGesture;
}(_gesture.ContinousBaseGesture);


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/gesture.ts": 
/*!********************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/gesture.ts ***!
  \********************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get BaseGesture () {
        return BaseGesture;
    },
    get CALLBACK_TYPE () {
        return CALLBACK_TYPE;
    },
    get ContinousBaseGesture () {
        return ContinousBaseGesture;
    },
    get Gesture () {
        return Gesture;
    }
});
var _call_super = __webpack_require__(/*! @swc/helpers/_/_call_super */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_call_super.cjs");
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_create_class.cjs");
var _inherits = __webpack_require__(/*! @swc/helpers/_/_inherits */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_inherits.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _object_spread_props = __webpack_require__(/*! @swc/helpers/_/_object_spread_props */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_object_spread_props.cjs");
var _getNextHandlerTag = __webpack_require__(/*! ../getNextHandlerTag */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/getNextHandlerTag.ts");
var _utils = __webpack_require__(/*! ../../utils */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/utils.ts");
var CALLBACK_TYPE = {
    UNDEFINED: 0,
    BEGAN: 1,
    START: 2,
    UPDATE: 3,
    CHANGE: 4,
    END: 5,
    FINALIZE: 6,
    TOUCHES_DOWN: 7,
    TOUCHES_MOVE: 8,
    TOUCHES_UP: 9,
    TOUCHES_CANCELLED: 10
};
var Gesture = function Gesture() {
    "use strict";
    _class_call_check._(this, Gesture);
};
var nextGestureId = 0;
var BaseGesture = /*#__PURE__*/ function(Gesture) {
    "use strict";
    _inherits._(BaseGesture, Gesture);
    function BaseGesture() {
        _class_call_check._(this, BaseGesture);
        var _this;
        _this = _call_super._(this, BaseGesture), _this.gestureId = -1, _this.handlerTag = -1, _this.handlerName = '', _this.config = {}, _this.handlers = {
            gestureId: -1,
            handlerTag: -1,
            isWorklet: []
        };
        // Used to check whether the gesture config has been updated when wrapping it
        // with `useMemo`. Since every config will have a unique id, when the dependencies
        // don't change, the config won't be recreated and the id will stay the same.
        // If the id is different, it means that the config has changed and the gesture
        // needs to be updated.
        _this.gestureId = nextGestureId++;
        _this.handlers.gestureId = _this.gestureId;
        return _this;
    }
    _create_class._(BaseGesture, [
        {
            key: "addDependency",
            value: function addDependency(key, gesture) {
                var value = this.config[key];
                this.config[key] = value ? Array().concat(value, gesture) : [
                    gesture
                ];
            }
        },
        {
            /**
   * Sets a `ref` to the gesture object, allowing for interoperability with the old API.
   * @param ref
   */ key: "withRef",
            value: function withRef(ref) {
                this.config.ref = ref;
                return this;
            }
        },
        {
            key: "isWorklet",
            value: // eslint-disable-next-line @typescript-eslint/ban-types
            function isWorklet(callback) {
                // @ts-ignore if callback is a worklet, the property will be available, if not then the check will return false
                return callback.__workletHash !== undefined;
            }
        },
        {
            /**
   * Set the callback that is being called when given gesture handler starts receiving touches.
   * At the moment of this callback the handler is in `BEGAN` state and we don't know yet if it will recognize the gesture at all.
   * @param callback
   */ key: "onBegin",
            value: function onBegin(callback) {
                this.handlers.onBegin = callback;
                this.handlers.isWorklet[CALLBACK_TYPE.BEGAN] = this.isWorklet(callback);
                return this;
            }
        },
        {
            /**
   * Set the callback that is being called when the gesture is recognized by the handler and it transitions to the `ACTIVE` state.
   * @param callback
   */ key: "onStart",
            value: function onStart(callback) {
                this.handlers.onStart = callback;
                this.handlers.isWorklet[CALLBACK_TYPE.START] = this.isWorklet(callback);
                return this;
            }
        },
        {
            /**
   * Set the callback that is being called when the gesture that was recognized by the handler finishes and handler reaches `END` state.
   * It will be called only if the handler was previously in the `ACTIVE` state.
   * @param callback
   */ key: "onEnd",
            value: function onEnd(callback) {
                this.handlers.onEnd = callback;
                // @ts-ignore if callback is a worklet, the property will be available, if not then the check will return false
                this.handlers.isWorklet[CALLBACK_TYPE.END] = this.isWorklet(callback);
                return this;
            }
        },
        {
            /**
   * Set the callback that is being called when the handler finalizes handling gesture - the gesture was recognized and has finished or it failed to recognize.
   * @param callback
   */ key: "onFinalize",
            value: function onFinalize(callback) {
                this.handlers.onFinalize = callback;
                // @ts-ignore if callback is a worklet, the property will be available, if not then the check will return false
                this.handlers.isWorklet[CALLBACK_TYPE.FINALIZE] = this.isWorklet(callback);
                return this;
            }
        },
        {
            /**
   * Set the `onTouchesDown` callback which is called every time a pointer is placed on the screen.
   * @param callback
   */ key: "onTouchesDown",
            value: function onTouchesDown(callback) {
                this.config.needsPointerData = true;
                this.handlers.onTouchesDown = callback;
                this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_DOWN] = this.isWorklet(callback);
                return this;
            }
        },
        {
            /**
   * Set the `onTouchesMove` callback which is called every time a pointer is moved on the screen.
   * @param callback
   */ key: "onTouchesMove",
            value: function onTouchesMove(callback) {
                this.config.needsPointerData = true;
                this.handlers.onTouchesMove = callback;
                this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_MOVE] = this.isWorklet(callback);
                return this;
            }
        },
        {
            /**
   * Set the `onTouchesUp` callback which is called every time a pointer is lifted from the screen.
   * @param callback
   */ key: "onTouchesUp",
            value: function onTouchesUp(callback) {
                this.config.needsPointerData = true;
                this.handlers.onTouchesUp = callback;
                this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_UP] = this.isWorklet(callback);
                return this;
            }
        },
        {
            /**
   * Set the `onTouchesCancelled` callback which is called every time a pointer stops being tracked, for example when the gesture finishes.
   * @param callback
   */ key: "onTouchesCancelled",
            value: function onTouchesCancelled(callback) {
                this.config.needsPointerData = true;
                this.handlers.onTouchesCancelled = callback;
                this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_CANCELLED] = this.isWorklet(callback);
                return this;
            }
        },
        {
            /**
   * Indicates whether the given handler should be analyzing stream of touch events or not.
   * @param enabled
   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/pan-gesture#enabledvalue-boolean
   */ key: "enabled",
            value: function enabled(enabled) {
                this.config.enabled = enabled;
                return this;
            }
        },
        {
            /**
   * When true the handler will cancel or fail recognition (depending on its current state) whenever the finger leaves the area of the connected view.
   * @param value
   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/pan-gesture#shouldcancelwhenoutsidevalue-boolean
   */ key: "shouldCancelWhenOutside",
            value: function shouldCancelWhenOutside(value) {
                this.config.shouldCancelWhenOutside = value;
                return this;
            }
        },
        {
            /**
   * This parameter enables control over what part of the connected view area can be used to begin recognizing the gesture.
   * When a negative number is provided the bounds of the view will reduce the area by the given number of points in each of the sides evenly.
   * @param hitSlop
   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/pan-gesture#hitslopsettings
   */ key: "hitSlop",
            value: function hitSlop(hitSlop) {
                this.config.hitSlop = hitSlop;
                return this;
            }
        },
        {
            /**
   * #### Web only
   * This parameter allows to specify which `cursor` should be used when gesture activates.
   * Supports all CSS cursor values (e.g. `"grab"`, `"zoom-in"`). Default value is set to `"auto"`.
   * @param activeCursor
   */ key: "activeCursor",
            value: function activeCursor(activeCursor) {
                this.config.activeCursor = activeCursor;
                return this;
            }
        },
        {
            /**
   * #### Web & Android only
   * Allows users to choose which mouse button should handler respond to.
   * Arguments can be combined using `|` operator, e.g. `mouseButton(MouseButton.LEFT | MouseButton.RIGHT)`.
   * Default value is set to `MouseButton.LEFT`.
   * @param mouseButton
   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/pan-gesture#mousebuttonvalue-mousebutton-web--android-only
   */ key: "mouseButton",
            value: function mouseButton(mouseButton) {
                this.config.mouseButton = mouseButton;
                return this;
            }
        },
        {
            /**
   * When `react-native-reanimated` is installed, the callbacks passed to the gestures are automatically workletized and run on the UI thread when called.
   * This option allows for changing this behavior: when `true`, all the callbacks will be run on the JS thread instead of the UI thread, regardless of whether they are worklets or not.
   * Defaults to `false`.
   * @param runOnJS
   */ key: "runOnJS",
            value: function runOnJS(runOnJS) {
                this.config.runOnJS = runOnJS;
                return this;
            }
        },
        {
            /**
   * Allows gestures across different components to be recognized simultaneously.
   * @param gestures
   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/fundamentals/gesture-composition/#simultaneouswithexternalgesture
   */ key: "simultaneousWithExternalGesture",
            value: function simultaneousWithExternalGesture(...gestures) {
                for (var gesture of gestures){
                    this.addDependency('simultaneousWith', gesture);
                }
                return this;
            }
        },
        {
            /**
   * Allows to delay activation of the handler until all handlers passed as arguments to this method fail (or don't begin at all).
   * @param gestures
   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/fundamentals/gesture-composition/#requireexternalgesturetofail
   */ key: "requireExternalGestureToFail",
            value: function requireExternalGestureToFail(...gestures) {
                for (var gesture of gestures){
                    this.addDependency('requireToFail', gesture);
                }
                return this;
            }
        },
        {
            /**
   * Works similarily to `requireExternalGestureToFail` but the direction of the relation is reversed - instead of being one-to-many relation, it's many-to-one.
   * @param gestures
   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/fundamentals/gesture-composition/#blocksexternalgesture
   */ key: "blocksExternalGesture",
            value: function blocksExternalGesture(...gestures) {
                for (var gesture of gestures){
                    this.addDependency('blocksHandlers', gesture);
                }
                return this;
            }
        },
        {
            /**
   * Sets a `testID` property for gesture object, allowing for querying for it in tests.
   * @param id
   */ key: "withTestId",
            value: function withTestId(id) {
                this.config.testId = id;
                return this;
            }
        },
        {
            /**
   * #### iOS only
   * When `true`, the handler will cancel touches for native UI components (`UIButton`, `UISwitch`, etc) it's attached to when it becomes `ACTIVE`.
   * Default value is `true`.
   * @param value
   */ key: "cancelsTouchesInView",
            value: function cancelsTouchesInView(value) {
                this.config.cancelsTouchesInView = value;
                return this;
            }
        },
        {
            key: "initialize",
            value: function initialize() {
                this.handlerTag = (0, _getNextHandlerTag.getNextHandlerTag)();
                this.handlers = _object_spread_props._(_object_spread._({}, this.handlers), {
                    handlerTag: this.handlerTag
                });
                if (this.config.ref) {
                    this.config.ref.current = this;
                }
            }
        },
        {
            key: "toGestureArray",
            value: function toGestureArray() {
                return [
                    this
                ];
            }
        },
        {
            // eslint-disable-next-line @typescript-eslint/no-empty-function
            key: "prepare",
            value: function prepare() {}
        },
        {
            key: "shouldUseReanimated",
            get: function() {
                // Use Reanimated when runOnJS isn't set explicitly,
                // all defined callbacks are worklets
                // and remote debugging is disabled
                return this.config.runOnJS !== true && !this.handlers.isWorklet.includes(false) && !(0, _utils.isRemoteDebuggingEnabled)();
            }
        }
    ]);
    return BaseGesture;
}(Gesture);
var ContinousBaseGesture = /*#__PURE__*/ function(BaseGesture) {
    "use strict";
    _inherits._(ContinousBaseGesture, BaseGesture);
    function ContinousBaseGesture() {
        _class_call_check._(this, ContinousBaseGesture);
        return _call_super._(this, ContinousBaseGesture, arguments);
    }
    _create_class._(ContinousBaseGesture, [
        {
            /**
   * Set the callback that is being called every time the gesture receives an update while it's active.
   * @param callback
   */ key: "onUpdate",
            value: function onUpdate(callback) {
                this.handlers.onUpdate = callback;
                this.handlers.isWorklet[CALLBACK_TYPE.UPDATE] = this.isWorklet(callback);
                return this;
            }
        },
        {
            /**
   * Set the callback that is being called every time the gesture receives an update while it's active.
   * This callback will receive information about change in value in relation to the last received event.
   * @param callback
   */ key: "onChange",
            value: function onChange(callback) {
                this.handlers.onChange = callback;
                this.handlers.isWorklet[CALLBACK_TYPE.CHANGE] = this.isWorklet(callback);
                return this;
            }
        },
        {
            /**
   * When `true` the handler will not activate by itself even if its activation criteria are met.
   * Instead you can manipulate its state using state manager.
   * @param manualActivation
   */ key: "manualActivation",
            value: function manualActivation(manualActivation) {
                this.config.manualActivation = manualActivation;
                return this;
            }
        }
    ]);
    return ContinousBaseGesture;
}(BaseGesture);


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/gestureComposition.ts": 
/*!*******************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/gestureComposition.ts ***!
  \*******************************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get ComposedGesture () {
        return ComposedGesture;
    },
    get ExclusiveGesture () {
        return ExclusiveGesture;
    },
    get SimultaneousGesture () {
        return SimultaneousGesture;
    }
});
var _call_super = __webpack_require__(/*! @swc/helpers/_/_call_super */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_call_super.cjs");
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_create_class.cjs");
var _inherits = __webpack_require__(/*! @swc/helpers/_/_inherits */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_inherits.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _to_consumable_array = __webpack_require__(/*! @swc/helpers/_/_to_consumable_array */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_to_consumable_array.cjs");
var _gesture = __webpack_require__(/*! ./gesture */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/gesture.ts");
function extendRelation(currentRelation, extendWith) {
    if (currentRelation === undefined) {
        return _to_consumable_array._(extendWith);
    } else {
        return _to_consumable_array._(currentRelation).concat(_to_consumable_array._(extendWith));
    }
}
var ComposedGesture = /*#__PURE__*/ function(Gesture) {
    "use strict";
    _inherits._(ComposedGesture, Gesture);
    function ComposedGesture(...gestures) {
        _class_call_check._(this, ComposedGesture);
        var _this;
        _this = _call_super._(this, ComposedGesture), _this.gestures = [], _this.simultaneousGestures = [], _this.requireGesturesToFail = [];
        _this.gestures = gestures;
        return _this;
    }
    _create_class._(ComposedGesture, [
        {
            key: "prepareSingleGesture",
            value: function prepareSingleGesture(gesture, simultaneousGestures, requireGesturesToFail) {
                if (gesture instanceof _gesture.BaseGesture) {
                    var newConfig = _object_spread._({}, gesture.config);
                    // No need to extend `blocksHandlers` here, because it's not changed in composition.
                    // The same effect is achieved by reversing the order of 2 gestures in `Exclusive`
                    newConfig.simultaneousWith = extendRelation(newConfig.simultaneousWith, simultaneousGestures);
                    newConfig.requireToFail = extendRelation(newConfig.requireToFail, requireGesturesToFail);
                    gesture.config = newConfig;
                } else if (gesture instanceof ComposedGesture) {
                    gesture.simultaneousGestures = simultaneousGestures;
                    gesture.requireGesturesToFail = requireGesturesToFail;
                    gesture.prepare();
                }
            }
        },
        {
            key: "prepare",
            value: function prepare() {
                for (var gesture of this.gestures){
                    this.prepareSingleGesture(gesture, this.simultaneousGestures, this.requireGesturesToFail);
                }
            }
        },
        {
            key: "initialize",
            value: function initialize() {
                for (var gesture of this.gestures){
                    gesture.initialize();
                }
            }
        },
        {
            key: "toGestureArray",
            value: function toGestureArray() {
                return this.gestures.flatMap((gesture)=>gesture.toGestureArray());
            }
        }
    ]);
    return ComposedGesture;
}(_gesture.Gesture);
var SimultaneousGesture = /*#__PURE__*/ function(ComposedGesture) {
    "use strict";
    _inherits._(SimultaneousGesture, ComposedGesture);
    function SimultaneousGesture() {
        _class_call_check._(this, SimultaneousGesture);
        return _call_super._(this, SimultaneousGesture, arguments);
    }
    _create_class._(SimultaneousGesture, [
        {
            key: "prepare",
            value: function prepare() {
                // This piece of magic works something like this:
                // for every gesture in the array
                var simultaneousArrays = this.gestures.map((gesture)=>// we take the array it's in
                    this.gestures// and make a copy without it
                    .filter((x)=>x !== gesture)// then we flatmap the result to get list of raw (not composed) gestures
                    // this way we don't make the gestures simultaneous with themselves, which is
                    // important when the gesture is `ExclusiveGesture` - we don't want to make
                    // exclusive gestures simultaneous
                    .flatMap((x)=>x.toGestureArray()));
                for(var i = 0; i < this.gestures.length; i++){
                    this.prepareSingleGesture(this.gestures[i], simultaneousArrays[i], this.requireGesturesToFail);
                }
            }
        }
    ]);
    return SimultaneousGesture;
}(ComposedGesture);
var ExclusiveGesture = /*#__PURE__*/ function(ComposedGesture) {
    "use strict";
    _inherits._(ExclusiveGesture, ComposedGesture);
    function ExclusiveGesture() {
        _class_call_check._(this, ExclusiveGesture);
        return _call_super._(this, ExclusiveGesture, arguments);
    }
    _create_class._(ExclusiveGesture, [
        {
            key: "prepare",
            value: function prepare() {
                // Transforms the array of gestures into array of grouped raw (not composed) gestures
                // i.e. [gesture1, gesture2, ComposedGesture(gesture3, gesture4)] -> [[gesture1], [gesture2], [gesture3, gesture4]]
                var gestureArrays = this.gestures.map((gesture)=>gesture.toGestureArray());
                var requireToFail = [];
                for(var i = 0; i < this.gestures.length; i++){
                    this.prepareSingleGesture(this.gestures[i], this.simultaneousGestures, this.requireGesturesToFail.concat(requireToFail));
                    // Every group gets to wait for all groups before it
                    requireToFail = requireToFail.concat(gestureArrays[i]);
                }
            }
        }
    ]);
    return ExclusiveGesture;
}(ComposedGesture);


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/gestureObjects.ts": 
/*!***************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/gestureObjects.ts ***!
  \***************************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "GestureObjects", ({
    enumerable: true,
    get: function() {
        return GestureObjects;
    }
}));
var _construct = __webpack_require__(/*! @swc/helpers/_/_construct */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_construct.cjs");
var _to_consumable_array = __webpack_require__(/*! @swc/helpers/_/_to_consumable_array */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_to_consumable_array.cjs");
var _flingGesture = __webpack_require__(/*! ./flingGesture */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/flingGesture.ts");
var _forceTouchGesture = __webpack_require__(/*! ./forceTouchGesture */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/forceTouchGesture.ts");
var _gestureComposition = __webpack_require__(/*! ./gestureComposition */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/gestureComposition.ts");
var _longPressGesture = __webpack_require__(/*! ./longPressGesture */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/longPressGesture.ts");
var _panGesture = __webpack_require__(/*! ./panGesture */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/panGesture.ts");
var _pinchGesture = __webpack_require__(/*! ./pinchGesture */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/pinchGesture.ts");
var _rotationGesture = __webpack_require__(/*! ./rotationGesture */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/rotationGesture.ts");
var _tapGesture = __webpack_require__(/*! ./tapGesture */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/tapGesture.ts");
var _nativeGesture = __webpack_require__(/*! ./nativeGesture */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/nativeGesture.ts");
var _manualGesture = __webpack_require__(/*! ./manualGesture */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/manualGesture.ts");
var _hoverGesture = __webpack_require__(/*! ./hoverGesture */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/hoverGesture.ts");
var GestureObjects = {
    /**
   * A discrete gesture that recognizes one or many taps.
   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/tap-gesture
   */ Tap: ()=>{
        return new _tapGesture.TapGesture();
    },
    /**
   * A continuous gesture that can recognize a panning (dragging) gesture and track its movement.
   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/pan-gesture
   */ Pan: ()=>{
        return new _panGesture.PanGesture();
    },
    /**
   * A continuous gesture that recognizes pinch gesture. It allows for tracking the distance between two fingers and use that information to scale or zoom your content.
   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/pinch-gesture
   */ Pinch: ()=>{
        return new _pinchGesture.PinchGesture();
    },
    /**
   * A continuous gesture that can recognize rotation and track its movement.
   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/rotation-gesture
   */ Rotation: ()=>{
        return new _rotationGesture.RotationGesture();
    },
    /**
   * A discrete gesture that activates when the movement is sufficiently fast.
   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/fling-gesture
   */ Fling: ()=>{
        return new _flingGesture.FlingGesture();
    },
    /**
   * A discrete gesture that activates when the corresponding view is pressed for a sufficiently long time.
   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/long-press-gesture
   */ LongPress: ()=>{
        return new _longPressGesture.LongPressGesture();
    },
    /**
   * #### iOS only
   * A continuous gesture that recognizes force of a touch. It allows for tracking pressure of touch on some iOS devices.
   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/force-touch-gesture
   */ ForceTouch: ()=>{
        return new _forceTouchGesture.ForceTouchGesture();
    },
    /**
   * A gesture that allows other touch handling components to participate in RNGH's gesture system.
   * When used, the other component should be the direct child of a `GestureDetector`.
   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/native-gesture
   */ Native: ()=>{
        return new _nativeGesture.NativeGesture();
    },
    /**
   * A plain gesture that has no specific activation criteria nor event data set.
   * Its state has to be controlled manually using a state manager.
   * It will not fail when all the pointers are lifted from the screen.
   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/manual-gesture
   */ Manual: ()=>{
        return new _manualGesture.ManualGesture();
    },
    /**
   * A continuous gesture that can recognize hovering above the view it's attached to.
   * The hover effect may be activated by moving a mouse or a stylus over the view.
   *
   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/hover-gesture
   */ Hover: ()=>{
        return new _hoverGesture.HoverGesture();
    },
    /**
   * Builds a composed gesture consisting of gestures provided as parameters.
   * The first one that becomes active cancels the rest of gestures.
   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/fundamentals/gesture-composition/#race
   */ Race: (...gestures)=>{
        return _construct._(_gestureComposition.ComposedGesture, _to_consumable_array._(gestures));
    },
    /**
   * Builds a composed gesture that allows all base gestures to run simultaneously.
   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/fundamentals/gesture-composition/#simultaneous
   */ Simultaneous (...gestures) {
        return _construct._(_gestureComposition.SimultaneousGesture, _to_consumable_array._(gestures));
    },
    /**
   * Builds a composed gesture where only one of the provided gestures can become active.
   * Priority is decided through the order of gestures: the first one has higher priority
   * than the second one, second one has higher priority than the third one, and so on.
   * For example, to make a gesture that recognizes both single and double tap you need
   * to call Exclusive(doubleTap, singleTap).
   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/fundamentals/gesture-composition/#exclusive
   */ Exclusive (...gestures) {
        return _construct._(_gestureComposition.ExclusiveGesture, _to_consumable_array._(gestures));
    }
};


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/gestureStateManager.ts": 
/*!********************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/gestureStateManager.ts ***!
  \********************************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "GestureStateManager", ({
    enumerable: true,
    get: function() {
        return GestureStateManager;
    }
}));
var _reanimatedWrapper = __webpack_require__(/*! ./reanimatedWrapper */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/reanimatedWrapper.ts");
var _State = __webpack_require__(/*! ../../State */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/State.ts");
var _utils = __webpack_require__(/*! ../../utils */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/utils.ts");
var warningMessage = (0, _utils.tagMessage)('react-native-reanimated is required in order to use synchronous state management');
// Check if reanimated module is available, but look for useSharedValue as conditional
// require of reanimated can sometimes return content of `utils.ts` file (?)
var REANIMATED_AVAILABLE = (_reanimatedWrapper.Reanimated === null || _reanimatedWrapper.Reanimated === void 0 ? void 0 : _reanimatedWrapper.Reanimated.useSharedValue) !== undefined;
var setGestureState = _reanimatedWrapper.Reanimated === null || _reanimatedWrapper.Reanimated === void 0 ? void 0 : _reanimatedWrapper.Reanimated.setGestureState;
var _worklet_17474649591271_init_data = {
    code: "function create_Pnpm_gestureStateManagerTs1(handlerTag){const{REANIMATED_AVAILABLE,setGestureState,State,warningMessage}=this.__closure;return{begin:function(){'worklet';if(REANIMATED_AVAILABLE){setGestureState(handlerTag,State.BEGAN);}else{console.warn(warningMessage);}},activate:function(){'worklet';if(REANIMATED_AVAILABLE){setGestureState(handlerTag,State.ACTIVE);}else{console.warn(warningMessage);}},fail:function(){'worklet';if(REANIMATED_AVAILABLE){setGestureState(handlerTag,State.FAILED);}else{console.warn(warningMessage);}},end:function(){'worklet';if(REANIMATED_AVAILABLE){setGestureState(handlerTag,State.END);}else{console.warn(warningMessage);}}};}",
    location: "/Users/antonio.benitez/Desktop/Callstack/CK/mrsasuu/AdoptaApp-Mini-app/node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/gestureStateManager.ts",
    sourceMap: "{\"version\":3,\"names\":[\"create_Pnpm_gestureStateManagerTs1\",\"handlerTag\",\"REANIMATED_AVAILABLE\",\"setGestureState\",\"State\",\"warningMessage\",\"__closure\",\"begin\",\"BEGAN\",\"console\",\"warn\",\"activate\",\"ACTIVE\",\"fail\",\"FAILED\",\"end\",\"END\"],\"sources\":[\"/Users/antonio.benitez/Desktop/Callstack/CK/mrsasuu/AdoptaApp-Mini-app/node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/gestureStateManager.ts\"],\"mappings\":\"AAoBA,SAAAA,kCAA6DA,CAAAC,UAAA,QAAAC,oBAAA,CAAAC,eAAA,CAAAC,KAAA,CAAAC,cAAA,OAAAC,SAAA,CAE3D,MAAO,CACLC,KAAK,CAAE,QAAAA,CAAA,CAAM,CACX,SAAS,CACT,GAAIL,oBAAoB,CAAE,CAGxBC,eAAe,CAAEF,UAAU,CAAEG,KAAK,CAACI,KAAK,CAAC,CAC3C,CAAC,IAAM,CACLC,OAAO,CAACC,IAAI,CAACL,cAAc,CAAC,CAC9B,CACF,CAAC,CAEDM,QAAQ,CAAE,QAAAA,CAAA,CAAM,CACd,SAAS,CACT,GAAIT,oBAAoB,CAAE,CAGxBC,eAAe,CAAEF,UAAU,CAAEG,KAAK,CAACQ,MAAM,CAAC,CAC5C,CAAC,IAAM,CACLH,OAAO,CAACC,IAAI,CAACL,cAAc,CAAC,CAC9B,CACF,CAAC,CAEDQ,IAAI,CAAE,QAAAA,CAAA,CAAM,CACV,SAAS,CACT,GAAIX,oBAAoB,CAAE,CAGxBC,eAAe,CAAEF,UAAU,CAAEG,KAAK,CAACU,MAAM,CAAC,CAC5C,CAAC,IAAM,CACLL,OAAO,CAACC,IAAI,CAACL,cAAc,CAAC,CAC9B,CACF,CAAC,CAEDU,GAAG,CAAE,QAAAA,CAAA,CAAM,CACT,SAAS,CACT,GAAIb,oBAAoB,CAAE,CAGxBC,eAAe,CAAEF,UAAU,CAAEG,KAAK,CAACY,GAAG,CAAC,CACzC,CAAC,IAAM,CACLP,OAAO,CAACC,IAAI,CAACL,cAAc,CAAC,CAC9B,CACF,CACF,CAAC,CACH\",\"ignoreList\":[]}",
    version: "3.17.5"
};
var _worklet_4799367197403_init_data = {
    code: "function pnpm_gestureStateManagerTs2(){const{REANIMATED_AVAILABLE,setGestureState,handlerTag,State,warningMessage}=this.__closure;if(REANIMATED_AVAILABLE){setGestureState(handlerTag,State.BEGAN);}else{console.warn(warningMessage);}}",
    location: "/Users/antonio.benitez/Desktop/Callstack/CK/mrsasuu/AdoptaApp-Mini-app/node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/gestureStateManager.ts",
    sourceMap: "{\"version\":3,\"names\":[\"pnpm_gestureStateManagerTs2\",\"REANIMATED_AVAILABLE\",\"setGestureState\",\"handlerTag\",\"State\",\"warningMessage\",\"__closure\",\"BEGAN\",\"console\",\"warn\"],\"sources\":[\"/Users/antonio.benitez/Desktop/Callstack/CK/mrsasuu/AdoptaApp-Mini-app/node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/gestureStateManager.ts\"],\"mappings\":\"AAuBW,SAAAA,2BAAMA,CAAA,QAAAC,oBAAA,CAAAC,eAAA,CAAAC,UAAA,CAAAC,KAAA,CAAAC,cAAA,OAAAC,SAAA,CAEX,GAAIL,oBAAoB,CAAE,CAGxBC,eAAe,CAAEC,UAAU,CAAEC,KAAK,CAACG,KAAK,CAAC,CAC3C,CAAC,IAAM,CACLC,OAAO,CAACC,IAAI,CAACJ,cAAc,CAAC,CAC9B,CACF\",\"ignoreList\":[]}",
    version: "3.17.5"
};
var _worklet_7932903515929_init_data = {
    code: "function pnpm_gestureStateManagerTs3(){const{REANIMATED_AVAILABLE,setGestureState,handlerTag,State,warningMessage}=this.__closure;if(REANIMATED_AVAILABLE){setGestureState(handlerTag,State.ACTIVE);}else{console.warn(warningMessage);}}",
    location: "/Users/antonio.benitez/Desktop/Callstack/CK/mrsasuu/AdoptaApp-Mini-app/node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/gestureStateManager.ts",
    sourceMap: "{\"version\":3,\"names\":[\"pnpm_gestureStateManagerTs3\",\"REANIMATED_AVAILABLE\",\"setGestureState\",\"handlerTag\",\"State\",\"warningMessage\",\"__closure\",\"ACTIVE\",\"console\",\"warn\"],\"sources\":[\"/Users/antonio.benitez/Desktop/Callstack/CK/mrsasuu/AdoptaApp-Mini-app/node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/gestureStateManager.ts\"],\"mappings\":\"AAkCc,SAAAA,2BAAMA,CAAA,QAAAC,oBAAA,CAAAC,eAAA,CAAAC,UAAA,CAAAC,KAAA,CAAAC,cAAA,OAAAC,SAAA,CAEd,GAAIL,oBAAoB,CAAE,CAGxBC,eAAe,CAAEC,UAAU,CAAEC,KAAK,CAACG,MAAM,CAAC,CAC5C,CAAC,IAAM,CACLC,OAAO,CAACC,IAAI,CAACJ,cAAc,CAAC,CAC9B,CACF\",\"ignoreList\":[]}",
    version: "3.17.5"
};
var _worklet_6492077607729_init_data = {
    code: "function pnpm_gestureStateManagerTs4(){const{REANIMATED_AVAILABLE,setGestureState,handlerTag,State,warningMessage}=this.__closure;if(REANIMATED_AVAILABLE){setGestureState(handlerTag,State.FAILED);}else{console.warn(warningMessage);}}",
    location: "/Users/antonio.benitez/Desktop/Callstack/CK/mrsasuu/AdoptaApp-Mini-app/node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/gestureStateManager.ts",
    sourceMap: "{\"version\":3,\"names\":[\"pnpm_gestureStateManagerTs4\",\"REANIMATED_AVAILABLE\",\"setGestureState\",\"handlerTag\",\"State\",\"warningMessage\",\"__closure\",\"FAILED\",\"console\",\"warn\"],\"sources\":[\"/Users/antonio.benitez/Desktop/Callstack/CK/mrsasuu/AdoptaApp-Mini-app/node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/gestureStateManager.ts\"],\"mappings\":\"AA6CU,SAAAA,2BAAMA,CAAA,QAAAC,oBAAA,CAAAC,eAAA,CAAAC,UAAA,CAAAC,KAAA,CAAAC,cAAA,OAAAC,SAAA,CAEV,GAAIL,oBAAoB,CAAE,CAGxBC,eAAe,CAAEC,UAAU,CAAEC,KAAK,CAACG,MAAM,CAAC,CAC5C,CAAC,IAAM,CACLC,OAAO,CAACC,IAAI,CAACJ,cAAc,CAAC,CAC9B,CACF\",\"ignoreList\":[]}",
    version: "3.17.5"
};
var _worklet_2856860112444_init_data = {
    code: "function pnpm_gestureStateManagerTs5(){const{REANIMATED_AVAILABLE,setGestureState,handlerTag,State,warningMessage}=this.__closure;if(REANIMATED_AVAILABLE){setGestureState(handlerTag,State.END);}else{console.warn(warningMessage);}}",
    location: "/Users/antonio.benitez/Desktop/Callstack/CK/mrsasuu/AdoptaApp-Mini-app/node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/gestureStateManager.ts",
    sourceMap: "{\"version\":3,\"names\":[\"pnpm_gestureStateManagerTs5\",\"REANIMATED_AVAILABLE\",\"setGestureState\",\"handlerTag\",\"State\",\"warningMessage\",\"__closure\",\"END\",\"console\",\"warn\"],\"sources\":[\"/Users/antonio.benitez/Desktop/Callstack/CK/mrsasuu/AdoptaApp-Mini-app/node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/gestureStateManager.ts\"],\"mappings\":\"AAwDS,SAAAA,2BAAMA,CAAA,QAAAC,oBAAA,CAAAC,eAAA,CAAAC,UAAA,CAAAC,KAAA,CAAAC,cAAA,OAAAC,SAAA,CAET,GAAIL,oBAAoB,CAAE,CAGxBC,eAAe,CAAEC,UAAU,CAAEC,KAAK,CAACG,GAAG,CAAC,CACzC,CAAC,IAAM,CACLC,OAAO,CAACC,IAAI,CAACJ,cAAc,CAAC,CAC9B,CACF\",\"ignoreList\":[]}",
    version: "3.17.5"
};
var create = function() {
    var _e = [
        new __webpack_require__.g.Error(),
        -5,
        -27
    ];
    var create = function(handlerTag) {
        return {
            begin: function() {
                var _e = [
                    new __webpack_require__.g.Error(),
                    -6,
                    -27
                ];
                var pnpm_gestureStateManagerTs2 = function() {
                    if (REANIMATED_AVAILABLE) {
                        // When Reanimated is available, setGestureState should be defined
                        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                        setGestureState(handlerTag, _State.State.BEGAN);
                    } else {
                        console.warn(warningMessage);
                    }
                };
                pnpm_gestureStateManagerTs2.__closure = {
                    REANIMATED_AVAILABLE,
                    setGestureState,
                    handlerTag,
                    State: _State.State,
                    warningMessage
                };
                pnpm_gestureStateManagerTs2.__workletHash = 4799367197403;
                pnpm_gestureStateManagerTs2.__initData = _worklet_4799367197403_init_data;
                pnpm_gestureStateManagerTs2.__stackDetails = _e;
                return pnpm_gestureStateManagerTs2;
            }(),
            activate: function() {
                var _e = [
                    new __webpack_require__.g.Error(),
                    -6,
                    -27
                ];
                var pnpm_gestureStateManagerTs3 = function() {
                    if (REANIMATED_AVAILABLE) {
                        // When Reanimated is available, setGestureState should be defined
                        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                        setGestureState(handlerTag, _State.State.ACTIVE);
                    } else {
                        console.warn(warningMessage);
                    }
                };
                pnpm_gestureStateManagerTs3.__closure = {
                    REANIMATED_AVAILABLE,
                    setGestureState,
                    handlerTag,
                    State: _State.State,
                    warningMessage
                };
                pnpm_gestureStateManagerTs3.__workletHash = 7932903515929;
                pnpm_gestureStateManagerTs3.__initData = _worklet_7932903515929_init_data;
                pnpm_gestureStateManagerTs3.__stackDetails = _e;
                return pnpm_gestureStateManagerTs3;
            }(),
            fail: function() {
                var _e = [
                    new __webpack_require__.g.Error(),
                    -6,
                    -27
                ];
                var pnpm_gestureStateManagerTs4 = function() {
                    if (REANIMATED_AVAILABLE) {
                        // When Reanimated is available, setGestureState should be defined
                        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                        setGestureState(handlerTag, _State.State.FAILED);
                    } else {
                        console.warn(warningMessage);
                    }
                };
                pnpm_gestureStateManagerTs4.__closure = {
                    REANIMATED_AVAILABLE,
                    setGestureState,
                    handlerTag,
                    State: _State.State,
                    warningMessage
                };
                pnpm_gestureStateManagerTs4.__workletHash = 6492077607729;
                pnpm_gestureStateManagerTs4.__initData = _worklet_6492077607729_init_data;
                pnpm_gestureStateManagerTs4.__stackDetails = _e;
                return pnpm_gestureStateManagerTs4;
            }(),
            end: function() {
                var _e = [
                    new __webpack_require__.g.Error(),
                    -6,
                    -27
                ];
                var pnpm_gestureStateManagerTs5 = function() {
                    if (REANIMATED_AVAILABLE) {
                        // When Reanimated is available, setGestureState should be defined
                        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                        setGestureState(handlerTag, _State.State.END);
                    } else {
                        console.warn(warningMessage);
                    }
                };
                pnpm_gestureStateManagerTs5.__closure = {
                    REANIMATED_AVAILABLE,
                    setGestureState,
                    handlerTag,
                    State: _State.State,
                    warningMessage
                };
                pnpm_gestureStateManagerTs5.__workletHash = 2856860112444;
                pnpm_gestureStateManagerTs5.__initData = _worklet_2856860112444_init_data;
                pnpm_gestureStateManagerTs5.__stackDetails = _e;
                return pnpm_gestureStateManagerTs5;
            }()
        };
    };
    create.__closure = {
        REANIMATED_AVAILABLE,
        setGestureState,
        State: _State.State,
        warningMessage
    };
    create.__workletHash = 17474649591271;
    create.__initData = _worklet_17474649591271_init_data;
    create.__stackDetails = _e;
    return create;
}();
var GestureStateManager = {
    create
};


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/hoverGesture.ts": 
/*!*************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/hoverGesture.ts ***!
  \*************************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get HoverEffect () {
        return HoverEffect;
    },
    get HoverGesture () {
        return HoverGesture;
    },
    get hoverGestureHandlerProps () {
        return hoverGestureHandlerProps;
    }
});
var _call_super = __webpack_require__(/*! @swc/helpers/_/_call_super */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_call_super.cjs");
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_create_class.cjs");
var _get = __webpack_require__(/*! @swc/helpers/_/_get */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_get.cjs");
var _get_prototype_of = __webpack_require__(/*! @swc/helpers/_/_get_prototype_of */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_get_prototype_of.cjs");
var _inherits = __webpack_require__(/*! @swc/helpers/_/_inherits */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_inherits.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _gesture = __webpack_require__(/*! ./gesture */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/gesture.ts");
var HoverEffect = /*#__PURE__*/ function(HoverEffect) {
    HoverEffect[HoverEffect["NONE"] = 0] = "NONE";
    HoverEffect[HoverEffect["LIFT"] = 1] = "LIFT";
    HoverEffect[HoverEffect["HIGHLIGHT"] = 2] = "HIGHLIGHT";
    return HoverEffect;
}({});
var hoverGestureHandlerProps = [
    'hoverEffect'
];
var _worklet_2074844346342_init_data = {
    code: "function changeEventCalculator_Pnpm_hoverGestureTs1(current,previous){let changePayload;if(previous===undefined){changePayload={changeX:current.x,changeY:current.y};}else{changePayload={changeX:current.x-previous.x,changeY:current.y-previous.y};}return{...current,...changePayload};}",
    location: "/Users/antonio.benitez/Desktop/Callstack/CK/mrsasuu/AdoptaApp-Mini-app/node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/hoverGesture.ts",
    sourceMap: "{\"version\":3,\"names\":[\"changeEventCalculator_Pnpm_hoverGestureTs1\",\"current\",\"previous\",\"changePayload\",\"undefined\",\"changeX\",\"x\",\"changeY\",\"y\"],\"sources\":[\"/Users/antonio.benitez/Desktop/Callstack/CK/mrsasuu/AdoptaApp-Mini-app/node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/hoverGesture.ts\"],\"mappings\":\"AAqBA,SAAAA,0CAGEA,CAAAC,OAAA,CAAAC,QAAA,EAEA,GAAI,CAAAC,aAA6C,CACjD,GAAID,QAAQ,GAAKE,SAAS,CAAE,CAC1BD,aAAa,CAAG,CACdE,OAAO,CAAEJ,OAAO,CAACK,CAAC,CAClBC,OAAO,CAAEN,OAAO,CAACO,CACnB,CAAC,CACH,CAAC,IAAM,CACLL,aAAa,CAAG,CACdE,OAAO,CAAEJ,OAAO,CAACK,CAAC,CAAGJ,QAAQ,CAACI,CAAC,CAC/BC,OAAO,CAAEN,OAAO,CAACO,CAAC,CAAGN,QAAQ,CAACM,CAChC,CAAC,CACH,CAEA,MAAO,CAAE,GAAGP,OAAO,CAAE,GAAGE,aAAc,CAAC,CACzC\",\"ignoreList\":[]}",
    version: "3.17.5"
};
var changeEventCalculator = function() {
    var _e = [
        new __webpack_require__.g.Error(),
        1,
        -27
    ];
    var changeEventCalculator = function(current, previous) {
        var changePayload;
        if (previous === undefined) {
            changePayload = {
                changeX: current.x,
                changeY: current.y
            };
        } else {
            changePayload = {
                changeX: current.x - previous.x,
                changeY: current.y - previous.y
            };
        }
        return _object_spread._({}, current, changePayload);
    };
    changeEventCalculator.__closure = {};
    changeEventCalculator.__workletHash = 2074844346342;
    changeEventCalculator.__initData = _worklet_2074844346342_init_data;
    changeEventCalculator.__stackDetails = _e;
    return changeEventCalculator;
}();
var HoverGesture = /*#__PURE__*/ function(ContinousBaseGesture) {
    "use strict";
    _inherits._(HoverGesture, ContinousBaseGesture);
    function HoverGesture() {
        _class_call_check._(this, HoverGesture);
        var _this;
        _this = _call_super._(this, HoverGesture), _this.config = {};
        _this.handlerName = 'HoverGestureHandler';
        return _this;
    }
    _create_class._(HoverGesture, [
        {
            /**
   * #### iOS only
   * Sets the visual hover effect.
   */ key: "effect",
            value: function effect(effect) {
                this.config.hoverEffect = effect;
                return this;
            }
        },
        {
            key: "onChange",
            value: function onChange(callback) {
                // @ts-ignore TS being overprotective, HoverGestureHandlerEventPayload is Record
                this.handlers.changeEventCalculator = changeEventCalculator;
                return _get._(_get_prototype_of._(HoverGesture.prototype), "onChange", this).call(this, callback);
            }
        }
    ]);
    return HoverGesture;
}(_gesture.ContinousBaseGesture);


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/longPressGesture.ts": 
/*!*****************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/longPressGesture.ts ***!
  \*****************************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "LongPressGesture", ({
    enumerable: true,
    get: function() {
        return LongPressGesture;
    }
}));
var _call_super = __webpack_require__(/*! @swc/helpers/_/_call_super */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_call_super.cjs");
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_create_class.cjs");
var _inherits = __webpack_require__(/*! @swc/helpers/_/_inherits */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_inherits.cjs");
var _gesture = __webpack_require__(/*! ./gesture */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/gesture.ts");
var LongPressGesture = /*#__PURE__*/ function(BaseGesture) {
    "use strict";
    _inherits._(LongPressGesture, BaseGesture);
    function LongPressGesture() {
        _class_call_check._(this, LongPressGesture);
        var _this;
        _this = _call_super._(this, LongPressGesture), _this.config = {};
        _this.handlerName = 'LongPressGestureHandler';
        _this.shouldCancelWhenOutside(true);
        return _this;
    }
    _create_class._(LongPressGesture, [
        {
            /**
   * Minimum time, expressed in milliseconds, that a finger must remain pressed on the corresponding view.
   * The default value is 500.
   * @param duration
   */ key: "minDuration",
            value: function minDuration(duration) {
                this.config.minDurationMs = duration;
                return this;
            }
        },
        {
            /**
   * Maximum distance, expressed in points, that defines how far the finger is allowed to travel during a long press gesture.
   * @param distance
   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/long-press-gesture#maxdistancevalue-number
   */ key: "maxDistance",
            value: function maxDistance(distance) {
                this.config.maxDist = distance;
                return this;
            }
        },
        {
            /**
   * Determine exact number of points required to handle the long press gesture.
   * @param pointers
   */ key: "numberOfPointers",
            value: function numberOfPointers(pointers) {
                this.config.numberOfPointers = pointers;
                return this;
            }
        }
    ]);
    return LongPressGesture;
}(_gesture.BaseGesture);


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/manualGesture.ts": 
/*!**************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/manualGesture.ts ***!
  \**************************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "ManualGesture", ({
    enumerable: true,
    get: function() {
        return ManualGesture;
    }
}));
var _call_super = __webpack_require__(/*! @swc/helpers/_/_call_super */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_call_super.cjs");
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_create_class.cjs");
var _get = __webpack_require__(/*! @swc/helpers/_/_get */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_get.cjs");
var _get_prototype_of = __webpack_require__(/*! @swc/helpers/_/_get_prototype_of */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_get_prototype_of.cjs");
var _inherits = __webpack_require__(/*! @swc/helpers/_/_inherits */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_inherits.cjs");
var _gesture = __webpack_require__(/*! ./gesture */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/gesture.ts");
var _worklet_12945462865583_init_data = {
    code: "function changeEventCalculator_Pnpm_manualGestureTs1(current,_previous){return current;}",
    location: "/Users/antonio.benitez/Desktop/Callstack/CK/mrsasuu/AdoptaApp-Mini-app/node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/manualGesture.ts",
    sourceMap: "{\"version\":3,\"names\":[\"changeEventCalculator_Pnpm_manualGestureTs1\",\"current\",\"_previous\"],\"sources\":[\"/Users/antonio.benitez/Desktop/Callstack/CK/mrsasuu/AdoptaApp-Mini-app/node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/manualGesture.ts\"],\"mappings\":\"AAGA,SAAAA,2CAGEA,CAAAC,OAAA,CAAAC,SAAA,EAEA,MAAO,CAAAD,OAAO,CAChB\",\"ignoreList\":[]}",
    version: "3.17.5"
};
var changeEventCalculator = function() {
    var _e = [
        new __webpack_require__.g.Error(),
        1,
        -27
    ];
    var changeEventCalculator = function(current, _previous) {
        return current;
    };
    changeEventCalculator.__closure = {};
    changeEventCalculator.__workletHash = 12945462865583;
    changeEventCalculator.__initData = _worklet_12945462865583_init_data;
    changeEventCalculator.__stackDetails = _e;
    return changeEventCalculator;
}();
var ManualGesture = /*#__PURE__*/ function(ContinousBaseGesture) {
    "use strict";
    _inherits._(ManualGesture, ContinousBaseGesture);
    function ManualGesture() {
        _class_call_check._(this, ManualGesture);
        var _this;
        _this = _call_super._(this, ManualGesture);
        _this.handlerName = 'ManualGestureHandler';
        return _this;
    }
    _create_class._(ManualGesture, [
        {
            key: "onChange",
            value: function onChange(callback) {
                // @ts-ignore TS being overprotective, Record<string, never> is Record
                this.handlers.changeEventCalculator = changeEventCalculator;
                return _get._(_get_prototype_of._(ManualGesture.prototype), "onChange", this).call(this, callback);
            }
        }
    ]);
    return ManualGesture;
}(_gesture.ContinousBaseGesture);


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/nativeGesture.ts": 
/*!**************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/nativeGesture.ts ***!
  \**************************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "NativeGesture", ({
    enumerable: true,
    get: function() {
        return NativeGesture;
    }
}));
var _call_super = __webpack_require__(/*! @swc/helpers/_/_call_super */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_call_super.cjs");
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_create_class.cjs");
var _inherits = __webpack_require__(/*! @swc/helpers/_/_inherits */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_inherits.cjs");
var _gesture = __webpack_require__(/*! ./gesture */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/gesture.ts");
var NativeGesture = /*#__PURE__*/ function(BaseGesture) {
    "use strict";
    _inherits._(NativeGesture, BaseGesture);
    function NativeGesture() {
        _class_call_check._(this, NativeGesture);
        var _this;
        _this = _call_super._(this, NativeGesture), _this.config = {};
        _this.handlerName = 'NativeViewGestureHandler';
        return _this;
    }
    _create_class._(NativeGesture, [
        {
            /**
   * When true, underlying handler will activate unconditionally when in `BEGAN` or `UNDETERMINED` state.
   * @param value
   */ key: "shouldActivateOnStart",
            value: function shouldActivateOnStart(value) {
                this.config.shouldActivateOnStart = value;
                return this;
            }
        },
        {
            /**
   * When true, cancels all other gesture handlers when this `NativeViewGestureHandler` receives an `ACTIVE` state event.
   * @param value
   */ key: "disallowInterruption",
            value: function disallowInterruption(value) {
                this.config.disallowInterruption = value;
                return this;
            }
        }
    ]);
    return NativeGesture;
}(_gesture.BaseGesture);


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/panGesture.ts": 
/*!***********************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/panGesture.ts ***!
  \***********************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "PanGesture", ({
    enumerable: true,
    get: function() {
        return PanGesture;
    }
}));
var _call_super = __webpack_require__(/*! @swc/helpers/_/_call_super */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_call_super.cjs");
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_create_class.cjs");
var _get = __webpack_require__(/*! @swc/helpers/_/_get */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_get.cjs");
var _get_prototype_of = __webpack_require__(/*! @swc/helpers/_/_get_prototype_of */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_get_prototype_of.cjs");
var _inherits = __webpack_require__(/*! @swc/helpers/_/_inherits */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_inherits.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _gesture = __webpack_require__(/*! ./gesture */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/gesture.ts");
var _worklet_1947784830943_init_data = {
    code: "function changeEventCalculator_Pnpm_panGestureTs1(current,previous){let changePayload;if(previous===undefined){changePayload={changeX:current.translationX,changeY:current.translationY};}else{changePayload={changeX:current.translationX-previous.translationX,changeY:current.translationY-previous.translationY};}return{...current,...changePayload};}",
    location: "/Users/antonio.benitez/Desktop/Callstack/CK/mrsasuu/AdoptaApp-Mini-app/node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/panGesture.ts",
    sourceMap: "{\"version\":3,\"names\":[\"changeEventCalculator_Pnpm_panGestureTs1\",\"current\",\"previous\",\"changePayload\",\"undefined\",\"changeX\",\"translationX\",\"changeY\",\"translationY\"],\"sources\":[\"/Users/antonio.benitez/Desktop/Callstack/CK/mrsasuu/AdoptaApp-Mini-app/node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/panGesture.ts\"],\"mappings\":\"AAUA,SAAAA,wCAE8DA,CAAAC,OAC5D,CAAAC,QAAA,EAEA,GAAI,CAAAC,aAA2C,CAC/C,GAAID,QAAQ,GAAKE,SAAS,CAAE,CAC1BD,aAAa,CAAG,CACdE,OAAO,CAAEJ,OAAO,CAACK,YAAY,CAC7BC,OAAO,CAAEN,OAAO,CAACO,YACnB,CAAC,CACH,CAAC,IAAM,CACLL,aAAa,CAAG,CACdE,OAAO,CAAEJ,OAAO,CAACK,YAAY,CAAGJ,QAAQ,CAACI,YAAY,CACrDC,OAAO,CAAEN,OAAO,CAACO,YAAY,CAAGN,QAAQ,CAACM,YAC3C,CAAC,CACH,CAEA,MAAO,CAAE,GAAGP,OAAO,CAAE,GAAGE,aAAc,CAAC,CACzC\",\"ignoreList\":[]}",
    version: "3.17.5"
};
var changeEventCalculator = function() {
    var _e = [
        new __webpack_require__.g.Error(),
        1,
        -27
    ];
    var changeEventCalculator = function(current, previous) {
        var changePayload;
        if (previous === undefined) {
            changePayload = {
                changeX: current.translationX,
                changeY: current.translationY
            };
        } else {
            changePayload = {
                changeX: current.translationX - previous.translationX,
                changeY: current.translationY - previous.translationY
            };
        }
        return _object_spread._({}, current, changePayload);
    };
    changeEventCalculator.__closure = {};
    changeEventCalculator.__workletHash = 1947784830943;
    changeEventCalculator.__initData = _worklet_1947784830943_init_data;
    changeEventCalculator.__stackDetails = _e;
    return changeEventCalculator;
}();
var PanGesture = /*#__PURE__*/ function(ContinousBaseGesture) {
    "use strict";
    _inherits._(PanGesture, ContinousBaseGesture);
    function PanGesture() {
        _class_call_check._(this, PanGesture);
        var _this;
        _this = _call_super._(this, PanGesture), _this.config = {};
        _this.handlerName = 'PanGestureHandler';
        return _this;
    }
    _create_class._(PanGesture, [
        {
            /**
   * Range along Y axis (in points) where fingers travels without activation of gesture.
   * @param offset
   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/pan-gesture#activeoffsetyvalue-number--number
   */ key: "activeOffsetY",
            value: function activeOffsetY(offset) {
                if (Array.isArray(offset)) {
                    this.config.activeOffsetYStart = offset[0];
                    this.config.activeOffsetYEnd = offset[1];
                } else if (offset < 0) {
                    this.config.activeOffsetYStart = offset;
                } else {
                    this.config.activeOffsetYEnd = offset;
                }
                return this;
            }
        },
        {
            /**
   * Range along X axis (in points) where fingers travels without activation of gesture.
   * @param offset
   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/pan-gesture#activeoffsetxvalue-number--number
   */ key: "activeOffsetX",
            value: function activeOffsetX(offset) {
                if (Array.isArray(offset)) {
                    this.config.activeOffsetXStart = offset[0];
                    this.config.activeOffsetXEnd = offset[1];
                } else if (offset < 0) {
                    this.config.activeOffsetXStart = offset;
                } else {
                    this.config.activeOffsetXEnd = offset;
                }
                return this;
            }
        },
        {
            /**
   * When the finger moves outside this range (in points) along Y axis and gesture hasn't yet activated it will fail recognizing the gesture.
   * @param offset
   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/pan-gesture#failoffsetyvalue-number--number
   */ key: "failOffsetY",
            value: function failOffsetY(offset) {
                if (Array.isArray(offset)) {
                    this.config.failOffsetYStart = offset[0];
                    this.config.failOffsetYEnd = offset[1];
                } else if (offset < 0) {
                    this.config.failOffsetYStart = offset;
                } else {
                    this.config.failOffsetYEnd = offset;
                }
                return this;
            }
        },
        {
            /**
   * When the finger moves outside this range (in points) along X axis and gesture hasn't yet activated it will fail recognizing the gesture.
   * @param offset
   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/pan-gesture#failoffsetxvalue-number--number
   */ key: "failOffsetX",
            value: function failOffsetX(offset) {
                if (Array.isArray(offset)) {
                    this.config.failOffsetXStart = offset[0];
                    this.config.failOffsetXEnd = offset[1];
                } else if (offset < 0) {
                    this.config.failOffsetXStart = offset;
                } else {
                    this.config.failOffsetXEnd = offset;
                }
                return this;
            }
        },
        {
            /**
   * A number of fingers that is required to be placed before gesture can activate. Should be a higher or equal to 0 integer.
   * @param minPointers
   */ key: "minPointers",
            value: function minPointers(minPointers) {
                this.config.minPointers = minPointers;
                return this;
            }
        },
        {
            /**
   * When the given number of fingers is placed on the screen and gesture hasn't yet activated it will fail recognizing the gesture.
   * Should be a higher or equal to 0 integer.
   * @param maxPointers
   */ key: "maxPointers",
            value: function maxPointers(maxPointers) {
                this.config.maxPointers = maxPointers;
                return this;
            }
        },
        {
            /**
   * Minimum distance the finger (or multiple finger) need to travel before the gesture activates.
   * Expressed in points.
   * @param distance
   */ key: "minDistance",
            value: function minDistance(distance) {
                this.config.minDist = distance;
                return this;
            }
        },
        {
            /**
   * Minimum velocity the finger has to reach in order to activate handler.
   * @param velocity
   */ key: "minVelocity",
            value: function minVelocity(velocity) {
                this.config.minVelocity = velocity;
                return this;
            }
        },
        {
            /**
   * Minimum velocity along X axis the finger has to reach in order to activate handler.
   * @param velocity
   */ key: "minVelocityX",
            value: function minVelocityX(velocity) {
                this.config.minVelocityX = velocity;
                return this;
            }
        },
        {
            /**
   * Minimum velocity along Y axis the finger has to reach in order to activate handler.
   * @param velocity
   */ key: "minVelocityY",
            value: function minVelocityY(velocity) {
                this.config.minVelocityY = velocity;
                return this;
            }
        },
        {
            /**
   * #### Android only
   * Android, by default, will calculate translation values based on the position of the leading pointer (the first one that was placed on the screen).
   * This modifier allows that behavior to be changed to the one that is default on iOS - the averaged position of all active pointers will be used to calculate the translation values.
   * @param value
   */ key: "averageTouches",
            value: function averageTouches(value) {
                this.config.avgTouches = value;
                return this;
            }
        },
        {
            /**
   * #### iOS only
   * Enables two-finger gestures on supported devices, for example iPads with trackpads.
   * @param value
   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/pan-gesture/#enabletrackpadtwofingergesturevalue-boolean-ios-only
   */ key: "enableTrackpadTwoFingerGesture",
            value: function enableTrackpadTwoFingerGesture(value) {
                this.config.enableTrackpadTwoFingerGesture = value;
                return this;
            }
        },
        {
            /**
   * Duration in milliseconds of the LongPress gesture before Pan is allowed to activate.
   * @param duration
   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/pan-gesture/#activateafterlongpressduration-number
   */ key: "activateAfterLongPress",
            value: function activateAfterLongPress(duration) {
                this.config.activateAfterLongPress = duration;
                return this;
            }
        },
        {
            key: "onChange",
            value: function onChange(callback) {
                // @ts-ignore TS being overprotective, PanGestureHandlerEventPayload is Record
                this.handlers.changeEventCalculator = changeEventCalculator;
                return _get._(_get_prototype_of._(PanGesture.prototype), "onChange", this).call(this, callback);
            }
        }
    ]);
    return PanGesture;
}(_gesture.ContinousBaseGesture);


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/pinchGesture.ts": 
/*!*************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/pinchGesture.ts ***!
  \*************************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "PinchGesture", ({
    enumerable: true,
    get: function() {
        return PinchGesture;
    }
}));
var _call_super = __webpack_require__(/*! @swc/helpers/_/_call_super */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_call_super.cjs");
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_create_class.cjs");
var _get = __webpack_require__(/*! @swc/helpers/_/_get */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_get.cjs");
var _get_prototype_of = __webpack_require__(/*! @swc/helpers/_/_get_prototype_of */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_get_prototype_of.cjs");
var _inherits = __webpack_require__(/*! @swc/helpers/_/_inherits */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_inherits.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _gesture = __webpack_require__(/*! ./gesture */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/gesture.ts");
var _worklet_9876979738005_init_data = {
    code: "function changeEventCalculator_Pnpm_pinchGestureTs1(current,previous){let changePayload;if(previous===undefined){changePayload={scaleChange:current.scale};}else{changePayload={scaleChange:current.scale/previous.scale};}return{...current,...changePayload};}",
    location: "/Users/antonio.benitez/Desktop/Callstack/CK/mrsasuu/AdoptaApp-Mini-app/node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/pinchGesture.ts",
    sourceMap: "{\"version\":3,\"names\":[\"changeEventCalculator_Pnpm_pinchGestureTs1\",\"current\",\"previous\",\"changePayload\",\"undefined\",\"scaleChange\",\"scale\"],\"sources\":[\"/Users/antonio.benitez/Desktop/Callstack/CK/mrsasuu/AdoptaApp-Mini-app/node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/pinchGesture.ts\"],\"mappings\":\"AAQA,SAAAA,0CAGEA,CAAAC,OAAA,CAAAC,QAAA,EAEA,GAAI,CAAAC,aAA6C,CACjD,GAAID,QAAQ,GAAKE,SAAS,CAAE,CAC1BD,aAAa,CAAG,CACdE,WAAW,CAAEJ,OAAO,CAACK,KACvB,CAAC,CACH,CAAC,IAAM,CACLH,aAAa,CAAG,CACdE,WAAW,CAAEJ,OAAO,CAACK,KAAK,CAAGJ,QAAQ,CAACI,KACxC,CAAC,CACH,CAEA,MAAO,CAAE,GAAGL,OAAO,CAAE,GAAGE,aAAc,CAAC,CACzC\",\"ignoreList\":[]}",
    version: "3.17.5"
};
var changeEventCalculator = function() {
    var _e = [
        new __webpack_require__.g.Error(),
        1,
        -27
    ];
    var changeEventCalculator = function(current, previous) {
        var changePayload;
        if (previous === undefined) {
            changePayload = {
                scaleChange: current.scale
            };
        } else {
            changePayload = {
                scaleChange: current.scale / previous.scale
            };
        }
        return _object_spread._({}, current, changePayload);
    };
    changeEventCalculator.__closure = {};
    changeEventCalculator.__workletHash = 9876979738005;
    changeEventCalculator.__initData = _worklet_9876979738005_init_data;
    changeEventCalculator.__stackDetails = _e;
    return changeEventCalculator;
}();
var PinchGesture = /*#__PURE__*/ function(ContinousBaseGesture) {
    "use strict";
    _inherits._(PinchGesture, ContinousBaseGesture);
    function PinchGesture() {
        _class_call_check._(this, PinchGesture);
        var _this;
        _this = _call_super._(this, PinchGesture);
        _this.handlerName = 'PinchGestureHandler';
        return _this;
    }
    _create_class._(PinchGesture, [
        {
            key: "onChange",
            value: function onChange(callback) {
                // @ts-ignore TS being overprotective, PinchGestureHandlerEventPayload is Record
                this.handlers.changeEventCalculator = changeEventCalculator;
                return _get._(_get_prototype_of._(PinchGesture.prototype), "onChange", this).call(this, callback);
            }
        }
    ]);
    return PinchGesture;
}(_gesture.ContinousBaseGesture);


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/reanimatedWrapper.ts": 
/*!******************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/reanimatedWrapper.ts ***!
  \******************************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "Reanimated", ({
    enumerable: true,
    get: function() {
        return Reanimated;
    }
}));
var _utils = __webpack_require__(/*! ../../utils */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/utils.ts");
var Reanimated;
try {
    Reanimated = __webpack_require__(/*! react-native-reanimated */ "webpack/sharing/consume/default/react-native-reanimated/react-native-reanimated");
} catch (e) {
    // When 'react-native-reanimated' is not available we want to quietly continue
    // @ts-ignore TS demands the variable to be initialized
    Reanimated = undefined;
}
if (!(Reanimated === null || Reanimated === void 0 ? void 0 : Reanimated.useSharedValue)) {
    // @ts-ignore Make sure the loaded module is actually Reanimated, if it's not
    // reset the module to undefined so we can fallback to the default implementation
    Reanimated = undefined;
}
var _worklet_12835327155090_init_data = {
    code: "function pnpm_reanimatedWrapperTs1(){const{tagMessage}=this.__closure;console.warn(tagMessage('Please use newer version of react-native-reanimated in order to control state of the gestures.'));}",
    location: "/Users/antonio.benitez/Desktop/Callstack/CK/mrsasuu/AdoptaApp-Mini-app/node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/reanimatedWrapper.ts",
    sourceMap: "{\"version\":3,\"names\":[\"pnpm_reanimatedWrapperTs1\",\"tagMessage\",\"__closure\",\"console\",\"warn\"],\"sources\":[\"/Users/antonio.benitez/Desktop/Callstack/CK/mrsasuu/AdoptaApp-Mini-app/node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/reanimatedWrapper.ts\"],\"mappings\":\"AA+C+B,SAAAA,yBAAMA,CAAA,QAAAC,UAAA,OAAAC,SAAA,CAEjCC,OAAO,CAACC,IAAI,CACVH,UAAU,CACR,gGACF,CACF,CAAC,CACH\",\"ignoreList\":[]}",
    version: "3.17.5"
};
if (Reanimated !== undefined && !Reanimated.setGestureState) {
    // The loaded module is Reanimated but it doesn't have the setGestureState defined
    Reanimated.setGestureState = function() {
        var _e = [
            new __webpack_require__.g.Error(),
            -2,
            -27
        ];
        var pnpm_reanimatedWrapperTs1 = function() {
            console.warn((0, _utils.tagMessage)('Please use newer version of react-native-reanimated in order to control state of the gestures.'));
        };
        pnpm_reanimatedWrapperTs1.__closure = {
            tagMessage: _utils.tagMessage
        };
        pnpm_reanimatedWrapperTs1.__workletHash = 12835327155090;
        pnpm_reanimatedWrapperTs1.__initData = _worklet_12835327155090_init_data;
        pnpm_reanimatedWrapperTs1.__stackDetails = _e;
        return pnpm_reanimatedWrapperTs1;
    }();
}


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/rotationGesture.ts": 
/*!****************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/rotationGesture.ts ***!
  \****************************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "RotationGesture", ({
    enumerable: true,
    get: function() {
        return RotationGesture;
    }
}));
var _call_super = __webpack_require__(/*! @swc/helpers/_/_call_super */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_call_super.cjs");
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_create_class.cjs");
var _get = __webpack_require__(/*! @swc/helpers/_/_get */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_get.cjs");
var _get_prototype_of = __webpack_require__(/*! @swc/helpers/_/_get_prototype_of */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_get_prototype_of.cjs");
var _inherits = __webpack_require__(/*! @swc/helpers/_/_inherits */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_inherits.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _gesture = __webpack_require__(/*! ./gesture */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/gesture.ts");
var _worklet_11988645380499_init_data = {
    code: "function changeEventCalculator_Pnpm_rotationGestureTs1(current,previous){let changePayload;if(previous===undefined){changePayload={rotationChange:current.rotation};}else{changePayload={rotationChange:current.rotation-previous.rotation};}return{...current,...changePayload};}",
    location: "/Users/antonio.benitez/Desktop/Callstack/CK/mrsasuu/AdoptaApp-Mini-app/node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/rotationGesture.ts",
    sourceMap: "{\"version\":3,\"names\":[\"changeEventCalculator_Pnpm_rotationGestureTs1\",\"current\",\"previous\",\"changePayload\",\"undefined\",\"rotationChange\",\"rotation\"],\"sources\":[\"/Users/antonio.benitez/Desktop/Callstack/CK/mrsasuu/AdoptaApp-Mini-app/node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/rotationGesture.ts\"],\"mappings\":\"AAQA,SAAAA,6CAGEA,CAAAC,OAAA,CAAAC,QAAA,EAEA,GAAI,CAAAC,aAAgD,CACpD,GAAID,QAAQ,GAAKE,SAAS,CAAE,CAC1BD,aAAa,CAAG,CACdE,cAAc,CAAEJ,OAAO,CAACK,QAC1B,CAAC,CACH,CAAC,IAAM,CACLH,aAAa,CAAG,CACdE,cAAc,CAAEJ,OAAO,CAACK,QAAQ,CAAGJ,QAAQ,CAACI,QAC9C,CAAC,CACH,CAEA,MAAO,CAAE,GAAGL,OAAO,CAAE,GAAGE,aAAc,CAAC,CACzC\",\"ignoreList\":[]}",
    version: "3.17.5"
};
var changeEventCalculator = function() {
    var _e = [
        new __webpack_require__.g.Error(),
        1,
        -27
    ];
    var changeEventCalculator = function(current, previous) {
        var changePayload;
        if (previous === undefined) {
            changePayload = {
                rotationChange: current.rotation
            };
        } else {
            changePayload = {
                rotationChange: current.rotation - previous.rotation
            };
        }
        return _object_spread._({}, current, changePayload);
    };
    changeEventCalculator.__closure = {};
    changeEventCalculator.__workletHash = 11988645380499;
    changeEventCalculator.__initData = _worklet_11988645380499_init_data;
    changeEventCalculator.__stackDetails = _e;
    return changeEventCalculator;
}();
var RotationGesture = /*#__PURE__*/ function(ContinousBaseGesture) {
    "use strict";
    _inherits._(RotationGesture, ContinousBaseGesture);
    function RotationGesture() {
        _class_call_check._(this, RotationGesture);
        var _this;
        _this = _call_super._(this, RotationGesture);
        _this.handlerName = 'RotationGestureHandler';
        return _this;
    }
    _create_class._(RotationGesture, [
        {
            key: "onChange",
            value: function onChange(callback) {
                // @ts-ignore TS being overprotective, RotationGestureHandlerEventPayload is Record
                this.handlers.changeEventCalculator = changeEventCalculator;
                return _get._(_get_prototype_of._(RotationGesture.prototype), "onChange", this).call(this, callback);
            }
        }
    ]);
    return RotationGesture;
}(_gesture.ContinousBaseGesture);


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/tapGesture.ts": 
/*!***********************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/tapGesture.ts ***!
  \***********************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "TapGesture", ({
    enumerable: true,
    get: function() {
        return TapGesture;
    }
}));
var _call_super = __webpack_require__(/*! @swc/helpers/_/_call_super */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_call_super.cjs");
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_create_class.cjs");
var _inherits = __webpack_require__(/*! @swc/helpers/_/_inherits */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_inherits.cjs");
var _gesture = __webpack_require__(/*! ./gesture */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/gesture.ts");
var TapGesture = /*#__PURE__*/ function(BaseGesture) {
    "use strict";
    _inherits._(TapGesture, BaseGesture);
    function TapGesture() {
        _class_call_check._(this, TapGesture);
        var _this;
        _this = _call_super._(this, TapGesture), _this.config = {};
        _this.handlerName = 'TapGestureHandler';
        _this.shouldCancelWhenOutside(true);
        return _this;
    }
    _create_class._(TapGesture, [
        {
            /**
   * Minimum number of pointers (fingers) required to be placed before the gesture activates.
   * Should be a positive integer. The default value is 1.
   * @param minPointers
   */ key: "minPointers",
            value: function minPointers(minPointers) {
                this.config.minPointers = minPointers;
                return this;
            }
        },
        {
            /**
   * Number of tap gestures required to activate the gesture.
   * The default value is 1.
   * @param count
   */ key: "numberOfTaps",
            value: function numberOfTaps(count) {
                this.config.numberOfTaps = count;
                return this;
            }
        },
        {
            /**
   * Maximum distance, expressed in points, that defines how far the finger is allowed to travel during a tap gesture.
   * @param maxDist
   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/tap-gesture#maxdistancevalue-number
   */ key: "maxDistance",
            value: function maxDistance(maxDist) {
                this.config.maxDist = maxDist;
                return this;
            }
        },
        {
            /**
   * Maximum time, expressed in milliseconds, that defines how fast a finger must be released after a touch.
   * The default value is 500.
   * @param duration
   */ key: "maxDuration",
            value: function maxDuration(duration) {
                this.config.maxDurationMs = duration;
                return this;
            }
        },
        {
            /**
   * Maximum time, expressed in milliseconds, that can pass before the next tap — if many taps are required.
   * The default value is 500.
   * @param delay
   */ key: "maxDelay",
            value: function maxDelay(delay) {
                this.config.maxDelayMs = delay;
                return this;
            }
        },
        {
            /**
   * Maximum distance, expressed in points, that defines how far the finger is allowed to travel along the X axis during a tap gesture.
   * @param delta
   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/tap-gesture#maxdeltaxvalue-number
   */ key: "maxDeltaX",
            value: function maxDeltaX(delta) {
                this.config.maxDeltaX = delta;
                return this;
            }
        },
        {
            /**
   * Maximum distance, expressed in points, that defines how far the finger is allowed to travel along the Y axis during a tap gesture.
   * @param delta
   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/tap-gesture#maxdeltayvalue-number
   */ key: "maxDeltaY",
            value: function maxDeltaY(delta) {
                this.config.maxDeltaY = delta;
                return this;
            }
        }
    ]);
    return TapGesture;
}(_gesture.BaseGesture);


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/getNextHandlerTag.ts": 
/*!*********************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/getNextHandlerTag.ts ***!
  \*********************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "getNextHandlerTag", ({
    enumerable: true,
    get: function() {
        return getNextHandlerTag;
    }
}));
var handlerTag = 1;
function getNextHandlerTag() {
    return handlerTag++;
}


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/handlersRegistry.ts": 
/*!********************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/handlersRegistry.ts ***!
  \********************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get findHandler () {
        return findHandler;
    },
    get findHandlerByTestID () {
        return findHandlerByTestID;
    },
    get findOldGestureHandler () {
        return findOldGestureHandler;
    },
    get handlerIDToTag () {
        return handlerIDToTag;
    },
    get registerHandler () {
        return registerHandler;
    },
    get registerOldGestureHandler () {
        return registerOldGestureHandler;
    },
    get unregisterHandler () {
        return unregisterHandler;
    },
    get unregisterOldGestureHandler () {
        return unregisterOldGestureHandler;
    }
});
var _utils = __webpack_require__(/*! ../utils */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/utils.ts");
var handlerIDToTag = {};
var gestures = new Map();
var oldHandlers = new Map();
var testIDs = new Map();
function registerHandler(handlerTag, handler, testID) {
    gestures.set(handlerTag, handler);
    if ((0, _utils.isTestEnv)() && testID) {
        testIDs.set(testID, handlerTag);
    }
}
function registerOldGestureHandler(handlerTag, handler) {
    oldHandlers.set(handlerTag, handler);
}
function unregisterOldGestureHandler(handlerTag) {
    oldHandlers.delete(handlerTag);
}
function unregisterHandler(handlerTag, testID) {
    gestures.delete(handlerTag);
    if ((0, _utils.isTestEnv)() && testID) {
        testIDs.delete(testID);
    }
}
function findHandler(handlerTag) {
    return gestures.get(handlerTag);
}
function findOldGestureHandler(handlerTag) {
    return oldHandlers.get(handlerTag);
}
function findHandlerByTestID(testID) {
    var handlerTag = testIDs.get(testID);
    if (handlerTag !== undefined) {
        return findHandler(handlerTag) ?? null;
    }
    return null;
}


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/utils.ts": 
/*!*********************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/utils.ts ***!
  \*********************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get filterConfig () {
        return filterConfig;
    },
    get findNodeHandle () {
        return findNodeHandle;
    },
    get scheduleFlushOperations () {
        return scheduleFlushOperations;
    },
    get transformIntoHandlerTags () {
        return transformIntoHandlerTags;
    }
});
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react"));
var _reactnative = __webpack_require__(/*! react-native */ "webpack/sharing/consume/default/react-native/react-native");
var _handlersRegistry = __webpack_require__(/*! ./handlersRegistry */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/handlersRegistry.ts");
var _utils = __webpack_require__(/*! ../utils */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/utils.ts");
var _RNGestureHandlerModule = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../RNGestureHandlerModule */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/RNGestureHandlerModule.ts"));
var _ghQueueMicrotask = __webpack_require__(/*! ../ghQueueMicrotask */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/ghQueueMicrotask.ts");
function isConfigParam(param, name) {
    // param !== Object(param) returns false if `param` is a function
    // or an object and returns true if `param` is null
    return param !== undefined && (param !== Object(param) || !('__isNative' in param)) && name !== 'onHandlerStateChange' && name !== 'onGestureEvent';
}
function filterConfig(props, validProps, ref) {
    var defaults = ref === void 0 ? {} : ref;
    var filteredConfig = _object_spread._({}, defaults);
    for (var key of validProps){
        var value = props[key];
        if (isConfigParam(value, key)) {
            if (key === 'simultaneousHandlers' || key === 'waitFor') {
                value = transformIntoHandlerTags(props[key]);
            } else if (key === 'hitSlop' && typeof value !== 'object') {
                value = {
                    top: value,
                    left: value,
                    bottom: value,
                    right: value
                };
            }
            filteredConfig[key] = value;
        }
    }
    return filteredConfig;
}
function transformIntoHandlerTags(handlerIDs) {
    handlerIDs = (0, _utils.toArray)(handlerIDs);
    if (_reactnative.Platform.OS === 'web') {
        return handlerIDs.map((ref)=>{
            var current = ref.current;
            return current;
        }).filter((handle)=>handle);
    }
    // converts handler string IDs into their numeric tags
    return handlerIDs.map((handlerID)=>{
        var _handlerID_current;
        return _handlersRegistry.handlerIDToTag[handlerID] || ((_handlerID_current = handlerID.current) === null || _handlerID_current === void 0 ? void 0 : _handlerID_current.handlerTag) || -1;
    }).filter((handlerTag)=>handlerTag > 0);
}
function findNodeHandle(node) {
    if (_reactnative.Platform.OS === 'web') {
        return node;
    }
    return (0, _reactnative.findNodeHandle)(node);
}
var flushOperationsScheduled = false;
function scheduleFlushOperations() {
    if (!flushOperationsScheduled) {
        flushOperationsScheduled = true;
        (0, _ghQueueMicrotask.ghQueueMicrotask)(()=>{
            _RNGestureHandlerModule.default.flushOperations();
            flushOperationsScheduled = false;
        });
    }
}


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/index.ts": 
/*!************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/index.ts ***!
  \************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get BaseButton () {
        return _GestureButtons.BaseButton;
    },
    get BorderlessButton () {
        return _GestureButtons.BorderlessButton;
    },
    get Directions () {
        return _Directions.Directions;
    },
    get DrawerLayout () {
        return _DrawerLayout.default;
    },
    get DrawerLayoutAndroid () {
        return _GestureComponents.DrawerLayoutAndroid;
    },
    get FlatList () {
        return _GestureComponents.FlatList;
    },
    get FlingGestureHandler () {
        return _FlingGestureHandler.FlingGestureHandler;
    },
    get ForceTouchGestureHandler () {
        return _ForceTouchGestureHandler.ForceTouchGestureHandler;
    },
    get Gesture () {
        return _gestureObjects.GestureObjects;
    },
    get GestureDetector () {
        return _GestureDetector.GestureDetector;
    },
    get GestureHandlerRootView () {
        return _GestureHandlerRootView.default;
    },
    get HoverEffect () {
        return _hoverGesture.HoverEffect;
    },
    get LongPressGestureHandler () {
        return _LongPressGestureHandler.LongPressGestureHandler;
    },
    get MouseButton () {
        return _gestureHandlerCommon.MouseButton;
    },
    get NativeViewGestureHandler () {
        return _NativeViewGestureHandler.NativeViewGestureHandler;
    },
    get PanGestureHandler () {
        return _PanGestureHandler.PanGestureHandler;
    },
    get PinchGestureHandler () {
        return _PinchGestureHandler.PinchGestureHandler;
    },
    get PointerType () {
        return _PointerType.PointerType;
    },
    get Pressable () {
        return _Pressable.default;
    },
    get PureNativeButton () {
        return _GestureButtons.PureNativeButton;
    },
    get RawButton () {
        return _GestureButtons.RawButton;
    },
    get RectButton () {
        return _GestureButtons.RectButton;
    },
    get RefreshControl () {
        return _GestureComponents.RefreshControl;
    },
    get RotationGestureHandler () {
        return _RotationGestureHandler.RotationGestureHandler;
    },
    get ScrollView () {
        return _GestureComponents.ScrollView;
    },
    get State () {
        return _State.State;
    },
    get Swipeable () {
        return _Swipeable.default;
    },
    get Switch () {
        return _GestureComponents.Switch;
    },
    get TapGestureHandler () {
        return _TapGestureHandler.TapGestureHandler;
    },
    get Text () {
        return _Text.Text;
    },
    get TextInput () {
        return _GestureComponents.TextInput;
    },
    get TouchableHighlight () {
        return _touchables.TouchableHighlight;
    },
    get TouchableNativeFeedback () {
        return _touchables.TouchableNativeFeedback;
    },
    get TouchableOpacity () {
        return _touchables.TouchableOpacity;
    },
    get TouchableWithoutFeedback () {
        return _touchables.TouchableWithoutFeedback;
    },
    get createNativeWrapper () {
        return _createNativeWrapper.default;
    },
    get enableExperimentalWebImplementation () {
        return _EnableNewWebImplementation.enableExperimentalWebImplementation;
    },
    get enableLegacyWebImplementation () {
        return _EnableNewWebImplementation.enableLegacyWebImplementation;
    },
    get gestureHandlerRootHOC () {
        return _gestureHandlerRootHOC.default;
    }
});
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _init = __webpack_require__(/*! ./init */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/init.ts");
var _Directions = __webpack_require__(/*! ./Directions */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/Directions.ts");
var _State = __webpack_require__(/*! ./State */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/State.ts");
var _PointerType = __webpack_require__(/*! ./PointerType */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/PointerType.ts");
var _gestureHandlerRootHOC = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./components/gestureHandlerRootHOC */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/components/gestureHandlerRootHOC.tsx"));
var _GestureHandlerRootView = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./components/GestureHandlerRootView */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/components/GestureHandlerRootView.tsx"));
var _gestureHandlerCommon = __webpack_require__(/*! ./handlers/gestureHandlerCommon */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestureHandlerCommon.ts");
var _TapGestureHandler = __webpack_require__(/*! ./handlers/TapGestureHandler */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/TapGestureHandler.ts");
var _ForceTouchGestureHandler = __webpack_require__(/*! ./handlers/ForceTouchGestureHandler */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/ForceTouchGestureHandler.ts");
var _LongPressGestureHandler = __webpack_require__(/*! ./handlers/LongPressGestureHandler */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/LongPressGestureHandler.ts");
var _PanGestureHandler = __webpack_require__(/*! ./handlers/PanGestureHandler */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/PanGestureHandler.ts");
var _PinchGestureHandler = __webpack_require__(/*! ./handlers/PinchGestureHandler */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/PinchGestureHandler.ts");
var _RotationGestureHandler = __webpack_require__(/*! ./handlers/RotationGestureHandler */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/RotationGestureHandler.ts");
var _FlingGestureHandler = __webpack_require__(/*! ./handlers/FlingGestureHandler */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/FlingGestureHandler.ts");
var _createNativeWrapper = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./handlers/createNativeWrapper */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/createNativeWrapper.tsx"));
var _GestureDetector = __webpack_require__(/*! ./handlers/gestures/GestureDetector */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/GestureDetector/index.tsx");
var _gestureObjects = __webpack_require__(/*! ./handlers/gestures/gestureObjects */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/gestureObjects.ts");
var _NativeViewGestureHandler = __webpack_require__(/*! ./handlers/NativeViewGestureHandler */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/NativeViewGestureHandler.ts");
var _GestureButtons = __webpack_require__(/*! ./components/GestureButtons */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/components/GestureButtons.tsx");
var _touchables = __webpack_require__(/*! ./components/touchables */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/components/touchables/index.ts");
var _GestureComponents = __webpack_require__(/*! ./components/GestureComponents */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/components/GestureComponents.tsx");
var _Text = __webpack_require__(/*! ./components/Text */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/components/Text.tsx");
var _hoverGesture = __webpack_require__(/*! ./handlers/gestures/hoverGesture */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/hoverGesture.ts");
var _Swipeable = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./components/Swipeable */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/components/Swipeable.tsx"));
var _Pressable = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./components/Pressable */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/components/Pressable/index.ts"));
var _DrawerLayout = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./components/DrawerLayout */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/components/DrawerLayout.tsx"));
var _EnableNewWebImplementation = __webpack_require__(/*! ./EnableNewWebImplementation */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/EnableNewWebImplementation.ts");
(0, _init.initialize)();


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/init.ts": 
/*!***********************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/init.ts ***!
  \***********************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get initialize () {
        return initialize;
    },
    get maybeInitializeFabric () {
        return maybeInitializeFabric;
    }
});
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _eventReceiver = __webpack_require__(/*! ./handlers/gestures/eventReceiver */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/eventReceiver.ts");
var _RNGestureHandlerModule = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./RNGestureHandlerModule */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/RNGestureHandlerModule.ts"));
var _utils = __webpack_require__(/*! ./utils */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/utils.ts");
var fabricInitialized = false;
function initialize() {
    (0, _eventReceiver.startListening)();
}
function maybeInitializeFabric() {
    if ((0, _utils.isFabric)() && !fabricInitialized) {
        _RNGestureHandlerModule.default.install();
        fabricInitialized = true;
    }
}


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/mountRegistry.ts": 
/*!********************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/mountRegistry.ts ***!
  \********************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "MountRegistry", ({
    enumerable: true,
    get: function() {
        return MountRegistry;
    }
}));
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_create_class.cjs");
var MountRegistry = /*#__PURE__*/ function() {
    "use strict";
    function MountRegistry() {
        _class_call_check._(this, MountRegistry);
    }
    _create_class._(MountRegistry, null, [
        {
            key: "addMountListener",
            value: function addMountListener(listener) {
                this.mountListeners.add(listener);
                return ()=>{
                    this.mountListeners.delete(listener);
                };
            }
        },
        {
            key: "addUnmountListener",
            value: function addUnmountListener(listener) {
                this.unmountListeners.add(listener);
                return ()=>{
                    this.unmountListeners.delete(listener);
                };
            }
        },
        {
            key: "gestureHandlerWillMount",
            value: function gestureHandlerWillMount(handler) {
                this.mountListeners.forEach((listener)=>listener(handler));
            }
        },
        {
            key: "gestureHandlerWillUnmount",
            value: function gestureHandlerWillUnmount(handler) {
                this.unmountListeners.forEach((listener)=>listener(handler));
            }
        },
        {
            key: "gestureWillMount",
            value: function gestureWillMount(gesture) {
                this.mountListeners.forEach((listener)=>listener(gesture));
            }
        },
        {
            key: "gestureWillUnmount",
            value: function gestureWillUnmount(gesture) {
                this.unmountListeners.forEach((listener)=>listener(gesture));
            }
        }
    ]);
    return MountRegistry;
}();
MountRegistry.mountListeners = new Set();
MountRegistry.unmountListeners = new Set();


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/utils.ts": 
/*!************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/utils.ts ***!
  \************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get INT32_MAX () {
        return INT32_MAX;
    },
    get deepEqual () {
        return deepEqual;
    },
    get hasProperty () {
        return hasProperty;
    },
    get isFabric () {
        return isFabric;
    },
    get isReact19 () {
        return isReact19;
    },
    get isRemoteDebuggingEnabled () {
        return isRemoteDebuggingEnabled;
    },
    get isTestEnv () {
        return isTestEnv;
    },
    get tagMessage () {
        return tagMessage;
    },
    get toArray () {
        return toArray;
    },
    get withPrevAndCurrent () {
        return withPrevAndCurrent;
    }
});
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _to_consumable_array = __webpack_require__(/*! @swc/helpers/_/_to_consumable_array */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_to_consumable_array.cjs");
var _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react"));
function toArray(object) {
    if (!Array.isArray(object)) {
        return [
            object
        ];
    }
    return object;
}
function withPrevAndCurrent(array, mapFn) {
    var previousArr = [
        null
    ];
    var currentArr = _to_consumable_array._(array);
    var transformedArr = [];
    currentArr.forEach((current, i)=>{
        // This type cast is fine and solves problem mentioned in https://github.com/software-mansion/react-native-gesture-handler/pull/2867 (namely that `previous` can be undefined).
        // Unfortunately, linter on our CI does not allow this type of casting as it is unnecessary. To bypass that we use eslint-disable.
        // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
        var previous = previousArr[i];
        var transformed = mapFn(previous, current);
        previousArr.push(transformed);
        transformedArr.push(transformed);
    });
    return transformedArr;
}
function hasProperty(object, key) {
    return Object.prototype.hasOwnProperty.call(object, key);
}
function isTestEnv() {
    // @ts-ignore Do not use `@types/node` because it will prioritise Node types over RN types which breaks the types (ex. setTimeout) in React Native projects.
    return hasProperty(__webpack_require__.g, 'process') && "development" === 'test';
}
function tagMessage(msg) {
    return `[react-native-gesture-handler] ${msg}`;
}
function isFabric() {
    var _global;
    // @ts-expect-error nativeFabricUIManager is not yet included in the RN types
    return !!((_global = __webpack_require__.g) === null || _global === void 0 ? void 0 : _global.nativeFabricUIManager);
}
function isReact19() {
    return _react.default.version.startsWith('19.');
}
function isRemoteDebuggingEnabled() {
    // react-native-reanimated checks if in remote debugging in the same way
    // @ts-ignore global is available but node types are not included
    var localGlobal = __webpack_require__.g;
    return (!localGlobal.nativeCallSyncHook || !!localGlobal.__REMOTEDEV__) && !localGlobal.RN$Bridgeless;
}
function deepEqual(obj1, obj2) {
    if (obj1 === obj2) {
        return true;
    }
    if (typeof obj1 !== 'object' || typeof obj2 !== 'object' || obj1 === null || obj2 === null) {
        return false;
    }
    var keys1 = Object.keys(obj1);
    var keys2 = Object.keys(obj2);
    if (keys1.length !== keys2.length) {
        return false;
    }
    for (var key of keys1){
        if (!keys2.includes(key) || !deepEqual(obj1[key], obj2[key])) {
            return false;
        }
    }
    return true;
}
var INT32_MAX = 2 ** 31 - 1;


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/components/DrawerLayout.tsx": 
/*!*******************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/components/DrawerLayout.tsx ***!
  \*******************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
// This component is based on RN's DrawerLayoutAndroid API
//
// It perhaps deserves to be put in a separate repo, but since it relies on
// react-native-gesture-handler library which isn't very popular at the moment I
// decided to keep it here for the time being. It will allow us to move faster
// and fix issues that may arise in gesture handler library that could be found
// when using the drawer component
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return DrawerLayout;
    }
}));
var _call_super = __webpack_require__(/*! @swc/helpers/_/_call_super */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_call_super.cjs");
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_create_class.cjs");
var _inherits = __webpack_require__(/*! @swc/helpers/_/_inherits */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_inherits.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _object_spread_props = __webpack_require__(/*! @swc/helpers/_/_object_spread_props */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_object_spread_props.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/.pnpm/react@19.0.0/node_modules/react/jsx-runtime.js");
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react"));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! invariant */ "./node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/browser.js"));
var _reactnative = __webpack_require__(/*! react-native */ "webpack/sharing/consume/default/react-native/react-native");
var _PanGestureHandler = __webpack_require__(/*! ../handlers/PanGestureHandler */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/PanGestureHandler.ts");
var _TapGestureHandler = __webpack_require__(/*! ../handlers/TapGestureHandler */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/TapGestureHandler.ts");
var _State = __webpack_require__(/*! ../State */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/State.ts");
var DRAG_TOSS = 0.05;
var IDLE = 'Idle';
var DRAGGING = 'Dragging';
var SETTLING = 'Settling';
var DrawerLayout = /*#__PURE__*/ function(Component) {
    "use strict";
    _inherits._(DrawerLayout, Component);
    function DrawerLayout(props) {
        _class_call_check._(this, DrawerLayout);
        var _this;
        _this = _call_super._(this, DrawerLayout, [
            props
        ]), _this.accessibilityIsModalView = /*#__PURE__*/ _react.createRef(), _this.pointerEventsView = /*#__PURE__*/ _react.createRef(), _this.panGestureHandler = /*#__PURE__*/ _react.createRef(), _this.drawerShown = false, _this.updateAnimatedEvent = (props, state)=>{
            // Event definition is based on
            var drawerPosition = props.drawerPosition, drawerWidth = props.drawerWidth, drawerType = props.drawerType;
            var dragXValue = state.dragX, touchXValue = state.touchX, drawerTranslation = state.drawerTranslation, containerWidth = state.containerWidth;
            var dragX = dragXValue;
            var touchX = touchXValue;
            if (drawerPosition !== 'left') {
                // Most of the code is written in a way to handle left-side drawer. In
                // order to handle right-side drawer the only thing we need to do is to
                // reverse events coming from gesture handler in a way they emulate
                // left-side drawer gestures. E.g. dragX is simply -dragX, and touchX is
                // calulcated by subtracing real touchX from the width of the container
                // (such that when touch happens at the right edge the value is simply 0)
                dragX = _reactnative.Animated.multiply(new _reactnative.Animated.Value(-1), dragXValue); // TODO(TS): (for all "as" in this file) make sure we can map this
                touchX = _reactnative.Animated.add(new _reactnative.Animated.Value(containerWidth), _reactnative.Animated.multiply(new _reactnative.Animated.Value(-1), touchXValue)); // TODO(TS): make sure we can map this;
                touchXValue.setValue(containerWidth);
            } else {
                touchXValue.setValue(0);
            }
            // While closing the drawer when user starts gesture outside of its area (in greyed
            // out part of the window), we want the drawer to follow only once finger reaches the
            // edge of the drawer.
            // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by
            // dots. The touch gesture starts at '*' and moves left, touch path is indicated by
            // an arrow pointing left
            // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+
            //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|
            //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|
            //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|
            //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|
            //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|
            //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|
            //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|
            //    +---------------+    +---------------+    +---------------+    +---------------+
            //
            // For the above to work properly we define animated value that will keep
            // start position of the gesture. Then we use that value to calculate how
            // much we need to subtract from the dragX. If the gesture started on the
            // greyed out area we take the distance from the edge of the drawer to the
            // start position. Otherwise we don't subtract at all and the drawer be
            // pulled back as soon as you start the pan.
            //
            // This is used only when drawerType is "front"
            //
            var translationX = dragX;
            if (drawerType === 'front') {
                var startPositionX = _reactnative.Animated.add(touchX, _reactnative.Animated.multiply(new _reactnative.Animated.Value(-1), dragX));
                var dragOffsetFromOnStartPosition = startPositionX.interpolate({
                    inputRange: [
                        drawerWidth - 1,
                        drawerWidth,
                        drawerWidth + 1
                    ],
                    outputRange: [
                        0,
                        0,
                        1
                    ]
                });
                translationX = _reactnative.Animated.add(dragX, dragOffsetFromOnStartPosition); // TODO: as above
            }
            _this.openValue = _reactnative.Animated.add(translationX, drawerTranslation).interpolate({
                inputRange: [
                    0,
                    drawerWidth
                ],
                outputRange: [
                    0,
                    1
                ],
                extrapolate: 'clamp'
            });
            var gestureOptions = {
                useNativeDriver: props.useNativeAnimations
            };
            if (_this.props.onDrawerSlide) {
                gestureOptions.listener = (ev)=>{
                    var _this_props_onDrawerSlide, _this_props;
                    var translationX = Math.floor(Math.abs(ev.nativeEvent.translationX));
                    var position = translationX / _this.state.containerWidth;
                    (_this_props_onDrawerSlide = (_this_props = _this.props).onDrawerSlide) === null || _this_props_onDrawerSlide === void 0 ? void 0 : _this_props_onDrawerSlide.call(_this_props, position);
                };
            }
            _this.onGestureEvent = _reactnative.Animated.event([
                {
                    nativeEvent: {
                        translationX: dragXValue,
                        x: touchXValue
                    }
                }
            ], gestureOptions);
        }, _this.handleContainerLayout = (ref)=>{
            var nativeEvent = ref.nativeEvent;
            _this.setState({
                containerWidth: nativeEvent.layout.width
            });
        }, _this.emitStateChanged = (newState, drawerWillShow)=>{
            var _this_props_onDrawerStateChanged, _this_props;
            (_this_props_onDrawerStateChanged = (_this_props = _this.props).onDrawerStateChanged) === null || _this_props_onDrawerStateChanged === void 0 ? void 0 : _this_props_onDrawerStateChanged.call(_this_props, newState, drawerWillShow);
        }, _this.openingHandlerStateChange = (ref)=>{
            var nativeEvent = ref.nativeEvent;
            if (nativeEvent.oldState === _State.State.ACTIVE) {
                _this.handleRelease({
                    nativeEvent
                });
            } else if (nativeEvent.state === _State.State.ACTIVE) {
                _this.emitStateChanged(DRAGGING, false);
                _this.setState({
                    drawerState: DRAGGING
                });
                if (_this.props.keyboardDismissMode === 'on-drag') {
                    _reactnative.Keyboard.dismiss();
                }
                if (_this.props.hideStatusBar) {
                    _reactnative.StatusBar.setHidden(true, _this.props.statusBarAnimation || 'slide');
                }
            }
        }, _this.onTapHandlerStateChange = (ref)=>{
            var nativeEvent = ref.nativeEvent;
            if (_this.drawerShown && nativeEvent.oldState === _State.State.ACTIVE && _this.props.drawerLockMode !== 'locked-open') {
                _this.closeDrawer();
            }
        }, _this.handleRelease = (ref)=>{
            var nativeEvent = ref.nativeEvent;
            var _this_props = _this.props, drawerWidth = _this_props.drawerWidth, drawerPosition = _this_props.drawerPosition, drawerType = _this_props.drawerType;
            var containerWidth = _this.state.containerWidth;
            var dragX = nativeEvent.translationX, velocityX = nativeEvent.velocityX, touchX = nativeEvent.x;
            if (drawerPosition !== 'left') {
                // See description in _updateAnimatedEvent about why events are flipped
                // for right-side drawer
                dragX = -dragX;
                touchX = containerWidth - touchX;
                velocityX = -velocityX;
            }
            var gestureStartX = touchX - dragX;
            var dragOffsetBasedOnStart = 0;
            if (drawerType === 'front') {
                dragOffsetBasedOnStart = gestureStartX > drawerWidth ? gestureStartX - drawerWidth : 0;
            }
            var startOffsetX = dragX + dragOffsetBasedOnStart + (_this.drawerShown ? drawerWidth : 0);
            var projOffsetX = startOffsetX + DRAG_TOSS * velocityX;
            var shouldOpen = projOffsetX > drawerWidth / 2;
            if (shouldOpen) {
                _this.animateDrawer(startOffsetX, drawerWidth, velocityX);
            } else {
                _this.animateDrawer(startOffsetX, 0, velocityX);
            }
        }, _this.updateShowing = (showing)=>{
            var _this_accessibilityIsModalView_current, _this_pointerEventsView_current, // @ts-ignore internal API, maybe could be fixed in handler types
            _this_panGestureHandler_current;
            _this.drawerShown = showing;
            (_this_accessibilityIsModalView_current = _this.accessibilityIsModalView.current) === null || _this_accessibilityIsModalView_current === void 0 ? void 0 : _this_accessibilityIsModalView_current.setNativeProps({
                accessibilityViewIsModal: showing
            });
            (_this_pointerEventsView_current = _this.pointerEventsView.current) === null || _this_pointerEventsView_current === void 0 ? void 0 : _this_pointerEventsView_current.setNativeProps({
                pointerEvents: showing ? 'auto' : 'none'
            });
            var _this_props = _this.props, drawerPosition = _this_props.drawerPosition, minSwipeDistance = _this_props.minSwipeDistance, edgeWidth = _this_props.edgeWidth;
            var fromLeft = drawerPosition === 'left';
            // gestureOrientation is 1 if the expected gesture is from left to right and
            // -1 otherwise e.g. when drawer is on the left and is closed we expect left
            // to right gesture, thus orientation will be 1.
            var gestureOrientation = (fromLeft ? 1 : -1) * (_this.drawerShown ? -1 : 1);
            // When drawer is closed we want the hitSlop to be horizontally shorter than
            // the container size by the value of SLOP. This will make it only activate
            // when gesture happens not further than SLOP away from the edge
            var hitSlop = fromLeft ? {
                left: 0,
                width: showing ? undefined : edgeWidth
            } : {
                right: 0,
                width: showing ? undefined : edgeWidth
            };
            (_this_panGestureHandler_current = _this.panGestureHandler.current) === null || _this_panGestureHandler_current === void 0 ? void 0 : _this_panGestureHandler_current.setNativeProps({
                hitSlop,
                activeOffsetX: gestureOrientation * minSwipeDistance
            });
        }, _this.animateDrawer = (fromValue, toValue, velocity, speed)=>{
            _this.state.dragX.setValue(0);
            _this.state.touchX.setValue(_this.props.drawerPosition === 'left' ? 0 : _this.state.containerWidth);
            if (fromValue != null) {
                var nextFramePosition = fromValue;
                if (_this.props.useNativeAnimations) {
                    // When using native driver, we predict the next position of the
                    // animation because it takes one frame of a roundtrip to pass RELEASE
                    // event from native driver to JS before we can start animating. Without
                    // it, it is more noticable that the frame is dropped.
                    if (fromValue < toValue && velocity > 0) {
                        nextFramePosition = Math.min(fromValue + velocity / 60.0, toValue);
                    } else if (fromValue > toValue && velocity < 0) {
                        nextFramePosition = Math.max(fromValue + velocity / 60.0, toValue);
                    }
                }
                _this.state.drawerTranslation.setValue(nextFramePosition);
            }
            var willShow = toValue !== 0;
            _this.updateShowing(willShow);
            _this.emitStateChanged(SETTLING, willShow);
            _this.setState({
                drawerState: SETTLING
            });
            if (_this.props.hideStatusBar) {
                _reactnative.StatusBar.setHidden(willShow, _this.props.statusBarAnimation || 'slide');
            }
            _reactnative.Animated.spring(_this.state.drawerTranslation, {
                velocity,
                bounciness: 0,
                toValue,
                useNativeDriver: _this.props.useNativeAnimations,
                speed: speed ?? undefined
            }).start((ref)=>{
                var finished = ref.finished;
                if (finished) {
                    _this.emitStateChanged(IDLE, willShow);
                    _this.setState({
                        drawerOpened: willShow
                    });
                    if (_this.state.drawerState !== DRAGGING) {
                        // It's possilbe that user started drag while the drawer
                        // was settling, don't override state in this case
                        _this.setState({
                            drawerState: IDLE
                        });
                    }
                    if (willShow) {
                        var _this_props_onDrawerOpen, _this_props;
                        (_this_props_onDrawerOpen = (_this_props = _this.props).onDrawerOpen) === null || _this_props_onDrawerOpen === void 0 ? void 0 : _this_props_onDrawerOpen.call(_this_props);
                    } else {
                        var _this_props_onDrawerClose, _this_props1;
                        (_this_props_onDrawerClose = (_this_props1 = _this.props).onDrawerClose) === null || _this_props_onDrawerClose === void 0 ? void 0 : _this_props_onDrawerClose.call(_this_props1);
                    }
                }
            });
        }, _this.openDrawer = (ref)=>{
            var options = ref === void 0 ? {} : ref;
            _this.animateDrawer(// TODO: decide if it should be null or undefined is the proper value
            undefined, _this.props.drawerWidth, options.velocity ? options.velocity : 0, options.speed);
            // We need to force the update, otherwise the overlay is not rerendered and
            // it would not be clickable
            _this.forceUpdate();
        }, _this.closeDrawer = (ref)=>{
            var options = ref === void 0 ? {} : ref;
            // TODO: decide if it should be null or undefined is the proper value
            _this.animateDrawer(undefined, 0, options.velocity ? options.velocity : 0, options.speed);
            // We need to force the update, otherwise the overlay is not rerendered and
            // it would be still clickable
            _this.forceUpdate();
        }, _this.renderOverlay = ()=>{
            /* Overlay styles */ (0, _invariant.default)(_this.openValue, 'should be set');
            var overlayOpacity;
            if (_this.state.drawerState !== IDLE) {
                overlayOpacity = _this.openValue;
            } else {
                overlayOpacity = _this.state.drawerOpened ? 1 : 0;
            }
            var dynamicOverlayStyles = {
                opacity: overlayOpacity,
                backgroundColor: _this.props.overlayColor
            };
            return /*#__PURE__*/ (0, _jsxruntime.jsx)(_TapGestureHandler.TapGestureHandler, {
                onHandlerStateChange: _this.onTapHandlerStateChange,
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Animated.View, {
                    pointerEvents: _this.drawerShown ? 'auto' : 'none',
                    ref: _this.pointerEventsView,
                    style: [
                        styles.overlay,
                        dynamicOverlayStyles
                    ]
                })
            });
        }, _this.renderDrawer = ()=>{
            var _this_props = _this.props, drawerBackgroundColor = _this_props.drawerBackgroundColor, drawerWidth = _this_props.drawerWidth, drawerPosition = _this_props.drawerPosition, drawerType = _this_props.drawerType, drawerContainerStyle = _this_props.drawerContainerStyle, contentContainerStyle = _this_props.contentContainerStyle;
            var fromLeft = drawerPosition === 'left';
            var drawerSlide = drawerType !== 'back';
            var containerSlide = drawerType !== 'front';
            // We rely on row and row-reverse flex directions to position the drawer
            // properly. Apparently for RTL these are flipped which requires us to use
            // the opposite setting for the drawer to appear from left or right
            // according to the drawerPosition prop
            var reverseContentDirection = _reactnative.I18nManager.isRTL ? fromLeft : !fromLeft;
            var dynamicDrawerStyles = {
                backgroundColor: drawerBackgroundColor,
                width: drawerWidth
            };
            var openValue = _this.openValue;
            (0, _invariant.default)(openValue, 'should be set');
            var containerStyles;
            if (containerSlide) {
                var containerTranslateX = openValue.interpolate({
                    inputRange: [
                        0,
                        1
                    ],
                    outputRange: fromLeft ? [
                        0,
                        drawerWidth
                    ] : [
                        0,
                        -drawerWidth
                    ],
                    extrapolate: 'clamp'
                });
                containerStyles = {
                    transform: [
                        {
                            translateX: containerTranslateX
                        }
                    ]
                };
            }
            var drawerTranslateX = 0;
            if (drawerSlide) {
                var closedDrawerOffset = fromLeft ? -drawerWidth : drawerWidth;
                if (_this.state.drawerState !== IDLE) {
                    drawerTranslateX = openValue.interpolate({
                        inputRange: [
                            0,
                            1
                        ],
                        outputRange: [
                            closedDrawerOffset,
                            0
                        ],
                        extrapolate: 'clamp'
                    });
                } else {
                    drawerTranslateX = _this.state.drawerOpened ? 0 : closedDrawerOffset;
                }
            }
            var drawerStyles = {
                transform: [
                    {
                        translateX: drawerTranslateX
                    }
                ],
                flexDirection: reverseContentDirection ? 'row-reverse' : 'row'
            };
            return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.Animated.View, {
                style: styles.main,
                onLayout: _this.handleContainerLayout,
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.Animated.View, {
                        style: [
                            drawerType === 'front' ? styles.containerOnBack : styles.containerInFront,
                            containerStyles,
                            contentContainerStyle
                        ],
                        importantForAccessibility: _this.drawerShown ? 'no-hide-descendants' : 'yes',
                        children: [
                            typeof _this.props.children === 'function' ? _this.props.children(_this.openValue) : _this.props.children,
                            _this.renderOverlay()
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Animated.View, {
                        pointerEvents: "box-none",
                        ref: _this.accessibilityIsModalView,
                        accessibilityViewIsModal: _this.drawerShown,
                        style: [
                            styles.drawerContainer,
                            drawerStyles,
                            drawerContainerStyle
                        ],
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
                            style: dynamicDrawerStyles,
                            children: _this.props.renderNavigationView(_this.openValue)
                        })
                    })
                ]
            });
        }, _this.setPanGestureRef = (ref)=>{
            var _this_props_onGestureRef, _this_props;
            // TODO(TS): make sure it is OK taken from
            // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/31065#issuecomment-596081842
            _this.panGestureHandler.current = ref;
            (_this_props_onGestureRef = (_this_props = _this.props).onGestureRef) === null || _this_props_onGestureRef === void 0 ? void 0 : _this_props_onGestureRef.call(_this_props, ref);
        };
        var dragX = new _reactnative.Animated.Value(0);
        var touchX = new _reactnative.Animated.Value(0);
        var drawerTranslation = new _reactnative.Animated.Value(0);
        _this.state = {
            dragX,
            touchX,
            drawerTranslation,
            containerWidth: 0,
            drawerState: IDLE,
            drawerOpened: false
        };
        _this.updateAnimatedEvent(props, _this.state);
        return _this;
    }
    _create_class._(DrawerLayout, [
        {
            key: "shouldComponentUpdate",
            value: function shouldComponentUpdate(props, state) {
                if (this.props.drawerPosition !== props.drawerPosition || this.props.drawerWidth !== props.drawerWidth || this.props.drawerType !== props.drawerType || this.state.containerWidth !== state.containerWidth) {
                    this.updateAnimatedEvent(props, state);
                }
                return true;
            }
        },
        {
            key: "render",
            value: function render() {
                var _this_props = this.props, drawerPosition = _this_props.drawerPosition, drawerLockMode = _this_props.drawerLockMode, edgeWidth = _this_props.edgeWidth, minSwipeDistance = _this_props.minSwipeDistance;
                var fromLeft = drawerPosition === 'left';
                // gestureOrientation is 1 if the expected gesture is from left to right and
                // -1 otherwise e.g. when drawer is on the left and is closed we expect left
                // to right gesture, thus orientation will be 1.
                var gestureOrientation = (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);
                // When drawer is closed we want the hitSlop to be horizontally shorter than
                // the container size by the value of SLOP. This will make it only activate
                // when gesture happens not further than SLOP away from the edge
                var hitSlop = fromLeft ? {
                    left: 0,
                    width: this.drawerShown ? undefined : edgeWidth
                } : {
                    right: 0,
                    width: this.drawerShown ? undefined : edgeWidth
                };
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(_PanGestureHandler.PanGestureHandler, {
                    // @ts-ignore could be fixed in handler types
                    userSelect: this.props.userSelect,
                    activeCursor: this.props.activeCursor,
                    mouseButton: this.props.mouseButton,
                    enableContextMenu: this.props.enableContextMenu,
                    ref: this.setPanGestureRef,
                    hitSlop: hitSlop,
                    activeOffsetX: gestureOrientation * minSwipeDistance,
                    failOffsetY: [
                        -15,
                        15
                    ],
                    onGestureEvent: this.onGestureEvent,
                    onHandlerStateChange: this.openingHandlerStateChange,
                    enableTrackpadTwoFingerGesture: this.props.enableTrackpadTwoFingerGesture,
                    enabled: drawerLockMode !== 'locked-closed' && drawerLockMode !== 'locked-open',
                    children: this.renderDrawer()
                });
            }
        }
    ]);
    return DrawerLayout;
}(_react.Component);
DrawerLayout.defaultProps = {
    drawerWidth: 200,
    drawerPosition: 'left',
    useNativeAnimations: true,
    drawerType: 'front',
    edgeWidth: 20,
    minSwipeDistance: 3,
    overlayColor: 'rgba(0, 0, 0, 0.7)',
    drawerLockMode: 'unlocked',
    enableTrackpadTwoFingerGesture: false
};
DrawerLayout.positions = {
    Left: 'left',
    Right: 'right'
};
var styles = _reactnative.StyleSheet.create({
    drawerContainer: _object_spread_props._(_object_spread._({}, _reactnative.StyleSheet.absoluteFillObject), {
        zIndex: 1001,
        flexDirection: 'row'
    }),
    containerInFront: _object_spread_props._(_object_spread._({}, _reactnative.StyleSheet.absoluteFillObject), {
        zIndex: 1002
    }),
    containerOnBack: _object_spread._({}, _reactnative.StyleSheet.absoluteFillObject),
    main: {
        flex: 1,
        zIndex: 0,
        overflow: 'hidden'
    },
    overlay: _object_spread_props._(_object_spread._({}, _reactnative.StyleSheet.absoluteFillObject), {
        zIndex: 1000
    })
});


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/components/GestureButtons.tsx": 
/*!*********************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/components/GestureButtons.tsx ***!
  \*********************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get BaseButton () {
        return BaseButton;
    },
    get BorderlessButton () {
        return BorderlessButton;
    },
    get PureNativeButton () {
        return _GestureHandlerButton.default;
    },
    get RawButton () {
        return RawButton;
    },
    get RectButton () {
        return RectButton;
    }
});
var _call_super = __webpack_require__(/*! @swc/helpers/_/_call_super */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_call_super.cjs");
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_create_class.cjs");
var _inherits = __webpack_require__(/*! @swc/helpers/_/_inherits */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_inherits.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _object_spread_props = __webpack_require__(/*! @swc/helpers/_/_object_spread_props */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_object_spread_props.cjs");
var _object_without_properties = __webpack_require__(/*! @swc/helpers/_/_object_without_properties */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_object_without_properties.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/.pnpm/react@19.0.0/node_modules/react/jsx-runtime.js");
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react"));
var _reactnative = __webpack_require__(/*! react-native */ "webpack/sharing/consume/default/react-native/react-native");
var _createNativeWrapper = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../handlers/createNativeWrapper */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/createNativeWrapper.tsx"));
var _GestureHandlerButton = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./GestureHandlerButton */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/components/GestureHandlerButton.tsx"));
var _State = __webpack_require__(/*! ../State */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/State.ts");
var _utils = __webpack_require__(/*! ../utils */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/utils.ts");
var RawButton = (0, _createNativeWrapper.default)(_GestureHandlerButton.default, {
    shouldCancelWhenOutside: false,
    shouldActivateOnStart: false
});
var IS_FABRIC = null;
var InnerBaseButton = /*#__PURE__*/ function(_React_Component) {
    "use strict";
    _inherits._(InnerBaseButton, _React_Component);
    function InnerBaseButton(props) {
        _class_call_check._(this, InnerBaseButton);
        var _this;
        _this = _call_super._(this, InnerBaseButton, [
            props
        ]), _this.handleEvent = (ref)=>{
            var nativeEvent = ref.nativeEvent;
            var state = nativeEvent.state, oldState = nativeEvent.oldState, pointerInside = nativeEvent.pointerInside;
            var active = pointerInside && state === _State.State.ACTIVE;
            if (active !== _this.lastActive && _this.props.onActiveStateChange) {
                _this.props.onActiveStateChange(active);
            }
            if (!_this.longPressDetected && oldState === _State.State.ACTIVE && state !== _State.State.CANCELLED && _this.lastActive && _this.props.onPress) {
                _this.props.onPress(pointerInside);
            }
            if (!_this.lastActive && // NativeViewGestureHandler sends different events based on platform
            state === (_reactnative.Platform.OS !== 'android' ? _State.State.ACTIVE : _State.State.BEGAN) && pointerInside) {
                _this.longPressDetected = false;
                if (_this.props.onLongPress) {
                    _this.longPressTimeout = setTimeout(_this.onLongPress, _this.props.delayLongPress);
                }
            } else if (// Cancel longpress timeout if it's set and the finger moved out of the view
            state === _State.State.ACTIVE && !pointerInside && _this.longPressTimeout !== undefined) {
                clearTimeout(_this.longPressTimeout);
                _this.longPressTimeout = undefined;
            } else if (// Cancel longpress timeout if it's set and the gesture has finished
            _this.longPressTimeout !== undefined && (state === _State.State.END || state === _State.State.CANCELLED || state === _State.State.FAILED)) {
                clearTimeout(_this.longPressTimeout);
                _this.longPressTimeout = undefined;
            }
            _this.lastActive = active;
        }, _this.onLongPress = ()=>{
            var _this_props_onLongPress, _this_props;
            _this.longPressDetected = true;
            (_this_props_onLongPress = (_this_props = _this.props).onLongPress) === null || _this_props_onLongPress === void 0 ? void 0 : _this_props_onLongPress.call(_this_props);
        }, // Normally, the parent would execute it's handler first, then forward the
        // event to listeners. However, here our handler is virtually only forwarding
        // events to listeners, so we reverse the order to keep the proper order of
        // the callbacks (from "raw" ones to "processed").
        _this.onHandlerStateChange = (e)=>{
            var _this_props_onHandlerStateChange, _this_props;
            (_this_props_onHandlerStateChange = (_this_props = _this.props).onHandlerStateChange) === null || _this_props_onHandlerStateChange === void 0 ? void 0 : _this_props_onHandlerStateChange.call(_this_props, e);
            _this.handleEvent(e);
        }, _this.onGestureEvent = (e)=>{
            var _this_props_onGestureEvent, _this_props;
            (_this_props_onGestureEvent = (_this_props = _this.props).onGestureEvent) === null || _this_props_onGestureEvent === void 0 ? void 0 : _this_props_onGestureEvent.call(_this_props, e);
            _this.handleEvent(e); // TODO: maybe it is not correct
        };
        _this.lastActive = false;
        _this.longPressDetected = false;
        return _this;
    }
    _create_class._(InnerBaseButton, [
        {
            key: "render",
            value: function render() {
                var _this_props = this.props, unprocessedRippleColor = _this_props.rippleColor, style = _this_props.style, rest = _object_without_properties._(_this_props, [
                    "rippleColor",
                    "style"
                ]);
                if (IS_FABRIC === null) {
                    IS_FABRIC = (0, _utils.isFabric)();
                }
                var rippleColor = IS_FABRIC ? unprocessedRippleColor : (0, _reactnative.processColor)(unprocessedRippleColor ?? undefined);
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(RawButton, _object_spread_props._(_object_spread._({
                    ref: this.props.innerRef,
                    rippleColor: rippleColor,
                    style: [
                        style,
                        _reactnative.Platform.OS === 'ios' && {
                            cursor: undefined
                        }
                    ]
                }, rest), {
                    onGestureEvent: this.onGestureEvent,
                    onHandlerStateChange: this.onHandlerStateChange
                }));
            }
        }
    ]);
    return InnerBaseButton;
}(_react.Component);
InnerBaseButton.defaultProps = {
    delayLongPress: 600
};
var AnimatedInnerBaseButton = _reactnative.Animated.createAnimatedComponent(InnerBaseButton);
var BaseButton = /*#__PURE__*/ _react.forwardRef((props, ref)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(InnerBaseButton, _object_spread._({
        innerRef: ref
    }, props)));
var AnimatedBaseButton = /*#__PURE__*/ _react.forwardRef((props, ref)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(AnimatedInnerBaseButton, _object_spread._({
        innerRef: ref
    }, props)));
var btnStyles = _reactnative.StyleSheet.create({
    underlay: {
        position: 'absolute',
        left: 0,
        right: 0,
        bottom: 0,
        top: 0
    }
});
var InnerRectButton = /*#__PURE__*/ function(_React_Component) {
    "use strict";
    _inherits._(InnerRectButton, _React_Component);
    function InnerRectButton(props) {
        _class_call_check._(this, InnerRectButton);
        var _this;
        _this = _call_super._(this, InnerRectButton, [
            props
        ]), _this.onActiveStateChange = (active)=>{
            var _this_props_onActiveStateChange, _this_props;
            if (_reactnative.Platform.OS !== 'android') {
                _this.opacity.setValue(active ? _this.props.activeOpacity : 0);
            }
            (_this_props_onActiveStateChange = (_this_props = _this.props).onActiveStateChange) === null || _this_props_onActiveStateChange === void 0 ? void 0 : _this_props_onActiveStateChange.call(_this_props, active);
        };
        _this.opacity = new _reactnative.Animated.Value(0);
        return _this;
    }
    _create_class._(InnerRectButton, [
        {
            key: "render",
            value: function render() {
                var _this_props = this.props, children = _this_props.children, style = _this_props.style, rest = _object_without_properties._(_this_props, [
                    "children",
                    "style"
                ]);
                var resolvedStyle = _reactnative.StyleSheet.flatten(style ?? {});
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)(BaseButton, _object_spread_props._(_object_spread._({}, rest), {
                    ref: this.props.innerRef,
                    style: resolvedStyle,
                    onActiveStateChange: this.onActiveStateChange,
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Animated.View, {
                            style: [
                                btnStyles.underlay,
                                {
                                    opacity: this.opacity,
                                    backgroundColor: this.props.underlayColor,
                                    borderRadius: resolvedStyle.borderRadius,
                                    borderTopLeftRadius: resolvedStyle.borderTopLeftRadius,
                                    borderTopRightRadius: resolvedStyle.borderTopRightRadius,
                                    borderBottomLeftRadius: resolvedStyle.borderBottomLeftRadius,
                                    borderBottomRightRadius: resolvedStyle.borderBottomRightRadius
                                }
                            ]
                        }),
                        children
                    ]
                }));
            }
        }
    ]);
    return InnerRectButton;
}(_react.Component);
InnerRectButton.defaultProps = {
    activeOpacity: 0.105,
    underlayColor: 'black'
};
var RectButton = /*#__PURE__*/ _react.forwardRef((props, ref)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(InnerRectButton, _object_spread._({
        innerRef: ref
    }, props)));
var InnerBorderlessButton = /*#__PURE__*/ function(_React_Component) {
    "use strict";
    _inherits._(InnerBorderlessButton, _React_Component);
    function InnerBorderlessButton(props) {
        _class_call_check._(this, InnerBorderlessButton);
        var _this;
        _this = _call_super._(this, InnerBorderlessButton, [
            props
        ]), _this.onActiveStateChange = (active)=>{
            var _this_props_onActiveStateChange, _this_props;
            if (_reactnative.Platform.OS !== 'android') {
                _this.opacity.setValue(active ? _this.props.activeOpacity : 1);
            }
            (_this_props_onActiveStateChange = (_this_props = _this.props).onActiveStateChange) === null || _this_props_onActiveStateChange === void 0 ? void 0 : _this_props_onActiveStateChange.call(_this_props, active);
        };
        _this.opacity = new _reactnative.Animated.Value(1);
        return _this;
    }
    _create_class._(InnerBorderlessButton, [
        {
            key: "render",
            value: function render() {
                var _this_props = this.props, children = _this_props.children, style = _this_props.style, innerRef = _this_props.innerRef, rest = _object_without_properties._(_this_props, [
                    "children",
                    "style",
                    "innerRef"
                ]);
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(AnimatedBaseButton, _object_spread_props._(_object_spread._({}, rest), {
                    innerRef: innerRef,
                    onActiveStateChange: this.onActiveStateChange,
                    style: [
                        style,
                        _reactnative.Platform.OS === 'ios' && {
                            opacity: this.opacity
                        }
                    ],
                    children: children
                }));
            }
        }
    ]);
    return InnerBorderlessButton;
}(_react.Component);
InnerBorderlessButton.defaultProps = {
    activeOpacity: 0.3,
    borderless: true
};
var BorderlessButton = /*#__PURE__*/ _react.forwardRef((props, ref)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(InnerBorderlessButton, _object_spread._({
        innerRef: ref
    }, props)));


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/components/GestureComponents.tsx": 
/*!************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/components/GestureComponents.tsx ***!
  \************************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get DrawerLayoutAndroid () {
        return DrawerLayoutAndroid;
    },
    get FlatList () {
        return FlatList;
    },
    get RefreshControl () {
        return RefreshControl;
    },
    get ScrollView () {
        return ScrollView;
    },
    get Switch () {
        return Switch;
    },
    get TextInput () {
        return TextInput;
    }
});
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _object_spread_props = __webpack_require__(/*! @swc/helpers/_/_object_spread_props */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_object_spread_props.cjs");
var _object_without_properties = __webpack_require__(/*! @swc/helpers/_/_object_without_properties */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_object_without_properties.cjs");
var _sliced_to_array = __webpack_require__(/*! @swc/helpers/_/_sliced_to_array */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_sliced_to_array.cjs");
var _to_consumable_array = __webpack_require__(/*! @swc/helpers/_/_to_consumable_array */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_to_consumable_array.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/.pnpm/react@19.0.0/node_modules/react/jsx-runtime.js");
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react"));
var _reactnative = __webpack_require__(/*! react-native */ "webpack/sharing/consume/default/react-native/react-native");
var _createNativeWrapper = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../handlers/createNativeWrapper */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/createNativeWrapper.tsx"));
var _NativeViewGestureHandler = __webpack_require__(/*! ../handlers/NativeViewGestureHandler */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/NativeViewGestureHandler.ts");
var _utils = __webpack_require__(/*! ../utils */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/utils.ts");
var RefreshControl = (0, _createNativeWrapper.default)(_reactnative.RefreshControl, {
    disallowInterruption: true,
    shouldCancelWhenOutside: false
});
var GHScrollView = (0, _createNativeWrapper.default)(_reactnative.ScrollView, {
    disallowInterruption: true,
    shouldCancelWhenOutside: false
});
var ScrollView = /*#__PURE__*/ _react.forwardRef((props, ref)=>{
    var refreshControlGestureRef = _react.useRef(null);
    var refreshControl = props.refreshControl, waitFor = props.waitFor, rest = _object_without_properties._(props, [
        "refreshControl",
        "waitFor"
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(GHScrollView, _object_spread_props._(_object_spread._({}, rest), {
        // @ts-ignore `ref` exists on `GHScrollView`
        ref: ref,
        waitFor: _to_consumable_array._((0, _utils.toArray)(waitFor ?? [])).concat([
            refreshControlGestureRef
        ]),
        // @ts-ignore we don't pass `refreshing` prop as we only want to override the ref
        refreshControl: refreshControl ? /*#__PURE__*/ _react.cloneElement(refreshControl, {
            // @ts-ignore for reasons unknown to me, `ref` doesn't exist on the type inferred by TS
            ref: refreshControlGestureRef
        }) : undefined
    }));
});
var Switch = (0, _createNativeWrapper.default)(_reactnative.Switch, {
    shouldCancelWhenOutside: false,
    shouldActivateOnStart: true,
    disallowInterruption: true
});
var TextInput = (0, _createNativeWrapper.default)(_reactnative.TextInput);
var DrawerLayoutAndroid = (0, _createNativeWrapper.default)(_reactnative.DrawerLayoutAndroid, {
    disallowInterruption: true
});
var FlatList = /*#__PURE__*/ _react.forwardRef((props, ref)=>{
    var refreshControlGestureRef = _react.useRef(null);
    var waitFor = props.waitFor, refreshControl = props.refreshControl, rest = _object_without_properties._(props, [
        "waitFor",
        "refreshControl"
    ]);
    var flatListProps = {};
    var scrollViewProps = {};
    for (var _$ref of Object.entries(rest)){
        var _ref = _sliced_to_array._(_$ref, 2), propName = _ref[0], value = _ref[1];
        // https://github.com/microsoft/TypeScript/issues/26255
        if (_NativeViewGestureHandler.nativeViewProps.includes(propName)) {
            // @ts-ignore - this function cannot have generic type so we have to ignore this error
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
            scrollViewProps[propName] = value;
        } else {
            // @ts-ignore - this function cannot have generic type so we have to ignore this error
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
            flatListProps[propName] = value;
        }
    }
    return(// @ts-ignore - this function cannot have generic type so we have to ignore this error
    /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.FlatList, _object_spread_props._(_object_spread._({
        ref: ref
    }, flatListProps), {
        renderScrollComponent: (scrollProps)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(ScrollView, _object_spread_props._(_object_spread._({}, scrollProps, scrollViewProps), {
                waitFor: _to_consumable_array._((0, _utils.toArray)(waitFor ?? [])).concat([
                    refreshControlGestureRef
                ])
            })),
        // @ts-ignore we don't pass `refreshing` prop as we only want to override the ref
        refreshControl: refreshControl ? /*#__PURE__*/ _react.cloneElement(refreshControl, {
            // @ts-ignore for reasons unknown to me, `ref` doesn't exist on the type inferred by TS
            ref: refreshControlGestureRef
        }) : undefined
    })));
});


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/components/GestureHandlerButton.tsx": 
/*!***************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/components/GestureHandlerButton.tsx ***!
  \***************************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _RNGestureHandlerButtonNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../specs/RNGestureHandlerButtonNativeComponent */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/specs/RNGestureHandlerButtonNativeComponent.ts"));
var _default = _RNGestureHandlerButtonNativeComponent.default;


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/components/GestureHandlerRootView.tsx": 
/*!*****************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/components/GestureHandlerRootView.tsx ***!
  \*****************************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return GestureHandlerRootView;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _object_without_properties = __webpack_require__(/*! @swc/helpers/_/_object_without_properties */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_object_without_properties.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/.pnpm/react@19.0.0/node_modules/react/jsx-runtime.js");
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react"));
var _reactnative = __webpack_require__(/*! react-native */ "webpack/sharing/consume/default/react-native/react-native");
var _init = __webpack_require__(/*! ../init */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/init.ts");
var _GestureHandlerRootViewContext = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../GestureHandlerRootViewContext */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/GestureHandlerRootViewContext.ts"));
function GestureHandlerRootView(_param) {
    var style = _param.style, rest = _object_without_properties._(_param, [
        "style"
    ]);
    // Try initialize fabric on the first render, at this point we can
    // reliably check if fabric is enabled (the function contains a flag
    // to make sure it's called only once)
    (0, _init.maybeInitializeFabric)();
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_GestureHandlerRootViewContext.default.Provider, {
        value: true,
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, _object_spread._({
            style: style ?? styles.container
        }, rest))
    });
}
var styles = _reactnative.StyleSheet.create({
    container: {
        flex: 1
    }
});


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/components/Pressable/Pressable.tsx": 
/*!**************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/components/Pressable/Pressable.tsx ***!
  \**************************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _object_spread_props = __webpack_require__(/*! @swc/helpers/_/_object_spread_props */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_object_spread_props.cjs");
var _object_without_properties = __webpack_require__(/*! @swc/helpers/_/_object_without_properties */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_object_without_properties.cjs");
var _sliced_to_array = __webpack_require__(/*! @swc/helpers/_/_sliced_to_array */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_sliced_to_array.cjs");
var _to_consumable_array = __webpack_require__(/*! @swc/helpers/_/_to_consumable_array */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_to_consumable_array.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/.pnpm/react@19.0.0/node_modules/react/jsx-runtime.js");
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react"));
var _gestureObjects = __webpack_require__(/*! ../../handlers/gestures/gestureObjects */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/gestureObjects.ts");
var _GestureDetector = __webpack_require__(/*! ../../handlers/gestures/GestureDetector */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/GestureDetector/index.tsx");
var _reactnative = __webpack_require__(/*! react-native */ "webpack/sharing/consume/default/react-native/react-native");
var _GestureHandlerButton = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../GestureHandlerButton */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/components/GestureHandlerButton.tsx"));
var _utils = __webpack_require__(/*! ./utils */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/components/Pressable/utils.ts");
var _PressabilityDebugView = __webpack_require__(/*! ../../handlers/PressabilityDebugView */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/PressabilityDebugView.tsx");
var _utils1 = __webpack_require__(/*! ../../utils */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/utils.ts");
var DEFAULT_LONG_PRESS_DURATION = 500;
var IS_TEST_ENV = (0, _utils1.isTestEnv)();
var IS_FABRIC = null;
var Pressable = /*#__PURE__*/ (0, _react.forwardRef)((props, pressableRef)=>{
    var _Gesture;
    var testOnly_pressed = props.testOnly_pressed, hitSlop = props.hitSlop, pressRetentionOffset = props.pressRetentionOffset, delayHoverIn = props.delayHoverIn, onHoverIn = props.onHoverIn, delayHoverOut = props.delayHoverOut, onHoverOut = props.onHoverOut, delayLongPress = props.delayLongPress, unstable_pressDelay = props.unstable_pressDelay, onPress = props.onPress, onPressIn = props.onPressIn, onPressOut = props.onPressOut, onLongPress = props.onLongPress, style = props.style, children = props.children, android_disableSound = props.android_disableSound, android_ripple = props.android_ripple, disabled = props.disabled, accessible = props.accessible, remainingProps = _object_without_properties._(props, [
        "testOnly_pressed",
        "hitSlop",
        "pressRetentionOffset",
        "delayHoverIn",
        "onHoverIn",
        "delayHoverOut",
        "onHoverOut",
        "delayLongPress",
        "unstable_pressDelay",
        "onPress",
        "onPressIn",
        "onPressOut",
        "onLongPress",
        "style",
        "children",
        "android_disableSound",
        "android_ripple",
        "disabled",
        "accessible"
    ]);
    var _useState = _sliced_to_array._((0, _react.useState)(testOnly_pressed ?? false), 2), pressedState = _useState[0], setPressedState = _useState[1];
    // Disabled when onLongPress has been called
    var isPressCallbackEnabled = (0, _react.useRef)(true);
    var hasPassedBoundsChecks = (0, _react.useRef)(false);
    var shouldPreventNativeEffects = (0, _react.useRef)(false);
    var normalizedHitSlop = (0, _react.useMemo)(()=>typeof hitSlop === 'number' ? (0, _utils.numberAsInset)(hitSlop) : hitSlop ?? {}, [
        hitSlop
    ]);
    var normalizedPressRetentionOffset = (0, _react.useMemo)(()=>typeof pressRetentionOffset === 'number' ? (0, _utils.numberAsInset)(pressRetentionOffset) : pressRetentionOffset ?? {}, [
        pressRetentionOffset
    ]);
    var hoverInTimeout = (0, _react.useRef)(null);
    var hoverOutTimeout = (0, _react.useRef)(null);
    var hoverGesture = (0, _react.useMemo)(()=>_gestureObjects.GestureObjects.Hover().manualActivation(true) // Stops Hover from blocking Native gesture activation on web
        .cancelsTouchesInView(false).onBegin((event)=>{
            if (hoverOutTimeout.current) {
                clearTimeout(hoverOutTimeout.current);
            }
            if (delayHoverIn) {
                hoverInTimeout.current = setTimeout(()=>onHoverIn === null || onHoverIn === void 0 ? void 0 : onHoverIn((0, _utils.gestureToPressableEvent)(event)), delayHoverIn);
                return;
            }
            onHoverIn === null || onHoverIn === void 0 ? void 0 : onHoverIn((0, _utils.gestureToPressableEvent)(event));
        }).onFinalize((event)=>{
            if (hoverInTimeout.current) {
                clearTimeout(hoverInTimeout.current);
            }
            if (delayHoverOut) {
                hoverOutTimeout.current = setTimeout(()=>onHoverOut === null || onHoverOut === void 0 ? void 0 : onHoverOut((0, _utils.gestureToPressableEvent)(event)), delayHoverOut);
                return;
            }
            onHoverOut === null || onHoverOut === void 0 ? void 0 : onHoverOut((0, _utils.gestureToPressableEvent)(event));
        }), [
        delayHoverIn,
        delayHoverOut,
        onHoverIn,
        onHoverOut
    ]);
    var pressDelayTimeoutRef = (0, _react.useRef)(null);
    var isTouchPropagationAllowed = (0, _react.useRef)(false);
    // iOS only: due to varying flow of gestures, events sometimes have to be saved for later use
    var deferredEventPayload = (0, _react.useRef)(null);
    var pressInHandler = (0, _react.useCallback)((event)=>{
        if (handlingOnTouchesDown.current) {
            deferredEventPayload.current = event;
        }
        if (!isTouchPropagationAllowed.current) {
            return;
        }
        deferredEventPayload.current = null;
        onPressIn === null || onPressIn === void 0 ? void 0 : onPressIn(event);
        isPressCallbackEnabled.current = true;
        pressDelayTimeoutRef.current = null;
        setPressedState(true);
    }, [
        onPressIn
    ]);
    var pressOutHandler = (0, _react.useCallback)((event)=>{
        if (!isTouchPropagationAllowed.current) {
            hasPassedBoundsChecks.current = false;
            isPressCallbackEnabled.current = true;
            deferredEventPayload.current = null;
            if (longPressTimeoutRef.current) {
                clearTimeout(longPressTimeoutRef.current);
                longPressTimeoutRef.current = null;
            }
            if (pressDelayTimeoutRef.current) {
                clearTimeout(pressDelayTimeoutRef.current);
                pressDelayTimeoutRef.current = null;
            }
            return;
        }
        if (!hasPassedBoundsChecks.current || event.nativeEvent.touches.length > event.nativeEvent.changedTouches.length) {
            return;
        }
        if (unstable_pressDelay && pressDelayTimeoutRef.current !== null) {
            // When delay is preemptively finished by lifting touches,
            // we want to immediately activate it's effects - pressInHandler,
            // even though we are located at the pressOutHandler
            clearTimeout(pressDelayTimeoutRef.current);
            pressInHandler(event);
        }
        if (deferredEventPayload.current) {
            onPressIn === null || onPressIn === void 0 ? void 0 : onPressIn(deferredEventPayload.current);
            deferredEventPayload.current = null;
        }
        onPressOut === null || onPressOut === void 0 ? void 0 : onPressOut(event);
        if (isPressCallbackEnabled.current) {
            onPress === null || onPress === void 0 ? void 0 : onPress(event);
        }
        if (longPressTimeoutRef.current) {
            clearTimeout(longPressTimeoutRef.current);
            longPressTimeoutRef.current = null;
        }
        isTouchPropagationAllowed.current = false;
        hasPassedBoundsChecks.current = false;
        isPressCallbackEnabled.current = true;
        setPressedState(false);
    }, [
        onPress,
        onPressIn,
        onPressOut,
        pressInHandler,
        unstable_pressDelay
    ]);
    var handlingOnTouchesDown = (0, _react.useRef)(false);
    var onEndHandlingTouchesDown = (0, _react.useRef)(null);
    var cancelledMidPress = (0, _react.useRef)(false);
    var activateLongPress = (0, _react.useCallback)((event)=>{
        if (!isTouchPropagationAllowed.current) {
            return;
        }
        if (hasPassedBoundsChecks.current) {
            onLongPress === null || onLongPress === void 0 ? void 0 : onLongPress((0, _utils.gestureTouchToPressableEvent)(event));
            isPressCallbackEnabled.current = false;
        }
        if (longPressTimeoutRef.current) {
            clearTimeout(longPressTimeoutRef.current);
            longPressTimeoutRef.current = null;
        }
    }, [
        onLongPress
    ]);
    var longPressTimeoutRef = (0, _react.useRef)(null);
    var longPressMinDuration = (delayLongPress ?? DEFAULT_LONG_PRESS_DURATION) + (unstable_pressDelay ?? 0);
    var innerPressableRef = (0, _react.useRef)(null);
    var measureCallback = (0, _react.useCallback)((width, height, event)=>{
        var _onEndHandlingTouchesDown_current;
        if (!(0, _utils.isTouchWithinInset)({
            width,
            height
        }, normalizedHitSlop, event.changedTouches.at(-1)) || hasPassedBoundsChecks.current || cancelledMidPress.current) {
            cancelledMidPress.current = false;
            onEndHandlingTouchesDown.current = null;
            handlingOnTouchesDown.current = false;
            return;
        }
        hasPassedBoundsChecks.current = true;
        // In case of multiple touches, the first one starts long press gesture
        if (longPressTimeoutRef.current === null) {
            // Start long press gesture timer
            longPressTimeoutRef.current = setTimeout(()=>activateLongPress(event), longPressMinDuration);
        }
        if (unstable_pressDelay) {
            pressDelayTimeoutRef.current = setTimeout(()=>{
                pressInHandler((0, _utils.gestureTouchToPressableEvent)(event));
            }, unstable_pressDelay);
        } else {
            pressInHandler((0, _utils.gestureTouchToPressableEvent)(event));
        }
        (_onEndHandlingTouchesDown_current = onEndHandlingTouchesDown.current) === null || _onEndHandlingTouchesDown_current === void 0 ? void 0 : _onEndHandlingTouchesDown_current.call(onEndHandlingTouchesDown);
        onEndHandlingTouchesDown.current = null;
        handlingOnTouchesDown.current = false;
    }, [
        activateLongPress,
        longPressMinDuration,
        normalizedHitSlop,
        pressInHandler,
        unstable_pressDelay
    ]);
    var pressAndTouchGesture = (0, _react.useMemo)(()=>_gestureObjects.GestureObjects.LongPress().minDuration(_utils1.INT32_MAX) // Stops long press from blocking native gesture
        .maxDistance(_utils1.INT32_MAX) // Stops long press from cancelling after set distance
        .cancelsTouchesInView(false).onTouchesDown((event)=>{
            handlingOnTouchesDown.current = true;
            if (pressableRef) {
                var _pressableRef_current;
                (_pressableRef_current = pressableRef.current) === null || _pressableRef_current === void 0 ? void 0 : _pressableRef_current.measure((_x, _y, width, height)=>{
                    measureCallback(width, height, event);
                });
            } else {
                var _innerPressableRef_current;
                (_innerPressableRef_current = innerPressableRef.current) === null || _innerPressableRef_current === void 0 ? void 0 : _innerPressableRef_current.measure((_x, _y, width, height)=>{
                    measureCallback(width, height, event);
                });
            }
        }).onTouchesUp((event)=>{
            if (handlingOnTouchesDown.current) {
                onEndHandlingTouchesDown.current = ()=>pressOutHandler((0, _utils.gestureTouchToPressableEvent)(event));
                return;
            }
            // On iOS, short taps will make LongPress gesture call onTouchesUp before Native gesture calls onStart
            // This variable ensures that onStart isn't detected as the first gesture since Pressable is pressed.
            if (deferredEventPayload.current !== null) {
                shouldPreventNativeEffects.current = true;
            }
            pressOutHandler((0, _utils.gestureTouchToPressableEvent)(event));
        }).onTouchesCancelled((event)=>{
            isPressCallbackEnabled.current = false;
            if (handlingOnTouchesDown.current) {
                cancelledMidPress.current = true;
                onEndHandlingTouchesDown.current = ()=>pressOutHandler((0, _utils.gestureTouchToPressableEvent)(event));
                return;
            }
            if (!hasPassedBoundsChecks.current || event.allTouches.length > event.changedTouches.length) {
                return;
            }
            pressOutHandler((0, _utils.gestureTouchToPressableEvent)(event));
        }), [
        pressableRef,
        measureCallback,
        pressOutHandler
    ]);
    // RNButton is placed inside ButtonGesture to enable Android's ripple and to capture non-propagating events
    var buttonGesture = (0, _react.useMemo)(()=>_gestureObjects.GestureObjects.Native().onBegin(()=>{
            // Android sets BEGAN state on press down
            if (_reactnative.Platform.OS === 'android' || _reactnative.Platform.OS === 'macos') {
                isTouchPropagationAllowed.current = true;
            }
        }).onStart(()=>{
            if (_reactnative.Platform.OS === 'web') {
                isTouchPropagationAllowed.current = true;
            }
            // iOS sets ACTIVE state on press down
            if (_reactnative.Platform.OS !== 'ios') {
                return;
            }
            if (deferredEventPayload.current) {
                isTouchPropagationAllowed.current = true;
                if (hasPassedBoundsChecks.current) {
                    pressInHandler(deferredEventPayload.current);
                    deferredEventPayload.current = null;
                } else {
                    pressOutHandler(deferredEventPayload.current);
                    isTouchPropagationAllowed.current = false;
                }
                return;
            }
            if (hasPassedBoundsChecks.current) {
                isTouchPropagationAllowed.current = true;
                return;
            }
            if (shouldPreventNativeEffects.current) {
                shouldPreventNativeEffects.current = false;
                if (!handlingOnTouchesDown.current) {
                    return;
                }
            }
            isTouchPropagationAllowed.current = true;
        }), [
        pressInHandler,
        pressOutHandler
    ]);
    var appliedHitSlop = (0, _utils.addInsets)(normalizedHitSlop, normalizedPressRetentionOffset);
    var isPressableEnabled = disabled !== true;
    var gestures = [
        buttonGesture,
        pressAndTouchGesture,
        hoverGesture
    ];
    for (var gesture of gestures){
        gesture.enabled(isPressableEnabled);
        gesture.runOnJS(true);
        gesture.hitSlop(appliedHitSlop);
        gesture.shouldCancelWhenOutside(_reactnative.Platform.OS === 'web' ? false : true);
    }
    // Uses different hitSlop, to activate on hitSlop area instead of pressRetentionOffset area
    buttonGesture.hitSlop(normalizedHitSlop);
    var gesture1 = (_Gesture = _gestureObjects.GestureObjects).Simultaneous.apply(_Gesture, _to_consumable_array._(gestures));
    // `cursor: 'pointer'` on `RNButton` crashes iOS
    var pointerStyle = _reactnative.Platform.OS === 'web' ? {
        cursor: 'pointer'
    } : {};
    var styleProp = typeof style === 'function' ? style({
        pressed: pressedState
    }) : style;
    var childrenProp = typeof children === 'function' ? children({
        pressed: pressedState
    }) : children;
    var rippleColor = (0, _react.useMemo)(()=>{
        if (IS_FABRIC === null) {
            IS_FABRIC = (0, _utils1.isFabric)();
        }
        var defaultRippleColor = android_ripple ? undefined : 'transparent';
        var unprocessedRippleColor = (android_ripple === null || android_ripple === void 0 ? void 0 : android_ripple.color) ?? defaultRippleColor;
        return IS_FABRIC ? unprocessedRippleColor : (0, _reactnative.processColor)(unprocessedRippleColor);
    }, [
        android_ripple
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_GestureDetector.GestureDetector, {
        gesture: gesture1,
        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_GestureHandlerButton.default, _object_spread_props._(_object_spread._({}, remainingProps), {
            ref: pressableRef ?? innerPressableRef,
            accessible: accessible !== false,
            hitSlop: appliedHitSlop,
            enabled: isPressableEnabled,
            touchSoundDisabled: android_disableSound ?? undefined,
            rippleColor: rippleColor,
            rippleRadius: (android_ripple === null || android_ripple === void 0 ? void 0 : android_ripple.radius) ?? undefined,
            style: [
                pointerStyle,
                styleProp
            ],
            testOnly_onPress: IS_TEST_ENV ? onPress : undefined,
            testOnly_onPressIn: IS_TEST_ENV ? onPressIn : undefined,
            testOnly_onPressOut: IS_TEST_ENV ? onPressOut : undefined,
            testOnly_onLongPress: IS_TEST_ENV ? onLongPress : undefined,
            children: [
                childrenProp,
                 true ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_PressabilityDebugView.PressabilityDebugView, {
                    color: "red",
                    hitSlop: normalizedHitSlop
                }) : 0
            ]
        }))
    });
});
var _default = Pressable;


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/components/Swipeable.tsx": 
/*!****************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/components/Swipeable.tsx ***!
  \****************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
// Similarily to the DrawerLayout component this deserves to be put in a
// separate repo. Although, keeping it here for the time being will allow us to
// move faster and fix possible issues quicker
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return Swipeable;
    }
}));
var _call_super = __webpack_require__(/*! @swc/helpers/_/_call_super */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_call_super.cjs");
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_create_class.cjs");
var _inherits = __webpack_require__(/*! @swc/helpers/_/_inherits */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_inherits.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _object_spread_props = __webpack_require__(/*! @swc/helpers/_/_object_spread_props */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_object_spread_props.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/.pnpm/react@19.0.0/node_modules/react/jsx-runtime.js");
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react"));
var _reactnative = __webpack_require__(/*! react-native */ "webpack/sharing/consume/default/react-native/react-native");
var _PanGestureHandler = __webpack_require__(/*! ../handlers/PanGestureHandler */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/PanGestureHandler.ts");
var _TapGestureHandler = __webpack_require__(/*! ../handlers/TapGestureHandler */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/TapGestureHandler.ts");
var _State = __webpack_require__(/*! ../State */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/State.ts");
var DRAG_TOSS = 0.05;
var Swipeable = /*#__PURE__*/ function(Component) {
    "use strict";
    _inherits._(Swipeable, Component);
    function Swipeable(props) {
        _class_call_check._(this, Swipeable);
        var _this;
        _this = _call_super._(this, Swipeable, [
            props
        ]), _this.updateAnimatedEvent = (props, state)=>{
            var friction = props.friction, overshootFriction = props.overshootFriction;
            var dragX = state.dragX, rowTranslation = state.rowTranslation, _state_leftWidth = state.leftWidth, leftWidth = _state_leftWidth === void 0 ? 0 : _state_leftWidth, _state_rowWidth = state.rowWidth, rowWidth = _state_rowWidth === void 0 ? 0 : _state_rowWidth;
            var _state_rightOffset = state.rightOffset, rightOffset = _state_rightOffset === void 0 ? rowWidth : _state_rightOffset;
            var rightWidth = Math.max(0, rowWidth - rightOffset);
            var _props_overshootLeft = props.overshootLeft, overshootLeft = _props_overshootLeft === void 0 ? leftWidth > 0 : _props_overshootLeft, _props_overshootRight = props.overshootRight, overshootRight = _props_overshootRight === void 0 ? rightWidth > 0 : _props_overshootRight;
            var transX = _reactnative.Animated.add(rowTranslation, dragX.interpolate({
                inputRange: [
                    0,
                    friction
                ],
                outputRange: [
                    0,
                    1
                ]
            })).interpolate({
                inputRange: [
                    -rightWidth - 1,
                    -rightWidth,
                    leftWidth,
                    leftWidth + 1
                ],
                outputRange: [
                    -rightWidth - (overshootRight ? 1 / overshootFriction : 0),
                    -rightWidth,
                    leftWidth,
                    leftWidth + (overshootLeft ? 1 / overshootFriction : 0)
                ]
            });
            _this.transX = transX;
            _this.showLeftAction = leftWidth > 0 ? transX.interpolate({
                inputRange: [
                    -1,
                    0,
                    leftWidth
                ],
                outputRange: [
                    0,
                    0,
                    1
                ]
            }) : new _reactnative.Animated.Value(0);
            _this.leftActionTranslate = _this.showLeftAction.interpolate({
                inputRange: [
                    0,
                    Number.MIN_VALUE
                ],
                outputRange: [
                    -10000,
                    0
                ],
                extrapolate: 'clamp'
            });
            _this.showRightAction = rightWidth > 0 ? transX.interpolate({
                inputRange: [
                    -rightWidth,
                    0,
                    1
                ],
                outputRange: [
                    1,
                    0,
                    0
                ]
            }) : new _reactnative.Animated.Value(0);
            _this.rightActionTranslate = _this.showRightAction.interpolate({
                inputRange: [
                    0,
                    Number.MIN_VALUE
                ],
                outputRange: [
                    -10000,
                    0
                ],
                extrapolate: 'clamp'
            });
        }, _this.onTapHandlerStateChange = (ref)=>{
            var nativeEvent = ref.nativeEvent;
            if (nativeEvent.oldState === _State.State.ACTIVE) {
                _this.close();
            }
        }, _this.onHandlerStateChange = (ev)=>{
            if (ev.nativeEvent.oldState === _State.State.ACTIVE) {
                _this.handleRelease(ev);
            }
            if (ev.nativeEvent.state === _State.State.ACTIVE) {
                var _ev_nativeEvent = ev.nativeEvent, velocityX = _ev_nativeEvent.velocityX, dragX = _ev_nativeEvent.translationX;
                var rowState = _this.state.rowState;
                var friction = _this.props.friction;
                var translationX = (dragX + DRAG_TOSS * velocityX) / friction;
                var direction = rowState === -1 ? 'right' : rowState === 1 ? 'left' : translationX > 0 ? 'left' : 'right';
                if (rowState === 0) {
                    var _this_props_onSwipeableOpenStartDrag, _this_props;
                    (_this_props_onSwipeableOpenStartDrag = (_this_props = _this.props).onSwipeableOpenStartDrag) === null || _this_props_onSwipeableOpenStartDrag === void 0 ? void 0 : _this_props_onSwipeableOpenStartDrag.call(_this_props, direction);
                } else {
                    var _this_props_onSwipeableCloseStartDrag, _this_props1;
                    (_this_props_onSwipeableCloseStartDrag = (_this_props1 = _this.props).onSwipeableCloseStartDrag) === null || _this_props_onSwipeableCloseStartDrag === void 0 ? void 0 : _this_props_onSwipeableCloseStartDrag.call(_this_props1, direction);
                }
            }
        }, _this.handleRelease = (ev)=>{
            var _ev_nativeEvent = ev.nativeEvent, velocityX = _ev_nativeEvent.velocityX, dragX = _ev_nativeEvent.translationX;
            var _this_state = _this.state, _this_state_leftWidth = _this_state.leftWidth, leftWidth = _this_state_leftWidth === void 0 ? 0 : _this_state_leftWidth, _this_state_rowWidth = _this_state.rowWidth, rowWidth = _this_state_rowWidth === void 0 ? 0 : _this_state_rowWidth, rowState = _this_state.rowState;
            var _this_state1 = _this.state, _this_state_rightOffset = _this_state1.rightOffset, rightOffset = _this_state_rightOffset === void 0 ? rowWidth : _this_state_rightOffset;
            var rightWidth = rowWidth - rightOffset;
            var _this_props = _this.props, friction = _this_props.friction, _this_props_leftThreshold = _this_props.leftThreshold, leftThreshold = _this_props_leftThreshold === void 0 ? leftWidth / 2 : _this_props_leftThreshold, _this_props_rightThreshold = _this_props.rightThreshold, rightThreshold = _this_props_rightThreshold === void 0 ? rightWidth / 2 : _this_props_rightThreshold;
            var startOffsetX = _this.currentOffset() + dragX / friction;
            var translationX = (dragX + DRAG_TOSS * velocityX) / friction;
            var toValue = 0;
            if (rowState === 0) {
                if (translationX > leftThreshold) {
                    toValue = leftWidth;
                } else if (translationX < -rightThreshold) {
                    toValue = -rightWidth;
                }
            } else if (rowState === 1) {
                // Swiped to left
                if (translationX > -leftThreshold) {
                    toValue = leftWidth;
                }
            } else {
                // Swiped to right
                if (translationX < rightThreshold) {
                    toValue = -rightWidth;
                }
            }
            _this.animateRow(startOffsetX, toValue, velocityX / friction);
        }, _this.animateRow = (fromValue, toValue, velocityX)=>{
            var _this_state = _this.state, dragX = _this_state.dragX, rowTranslation = _this_state.rowTranslation;
            dragX.setValue(0);
            rowTranslation.setValue(fromValue);
            _this.setState({
                rowState: Math.sign(toValue)
            });
            _reactnative.Animated.spring(rowTranslation, _object_spread._({
                restSpeedThreshold: 1.7,
                restDisplacementThreshold: 0.4,
                velocity: velocityX,
                bounciness: 0,
                toValue,
                useNativeDriver: _this.props.useNativeAnimations
            }, _this.props.animationOptions)).start((ref)=>{
                var finished = ref.finished;
                if (finished) {
                    if (toValue > 0) {
                        var _this_props_onSwipeableLeftOpen, _this_props, _this_props_onSwipeableOpen, _this_props1;
                        (_this_props_onSwipeableLeftOpen = (_this_props = _this.props).onSwipeableLeftOpen) === null || _this_props_onSwipeableLeftOpen === void 0 ? void 0 : _this_props_onSwipeableLeftOpen.call(_this_props);
                        (_this_props_onSwipeableOpen = (_this_props1 = _this.props).onSwipeableOpen) === null || _this_props_onSwipeableOpen === void 0 ? void 0 : _this_props_onSwipeableOpen.call(_this_props1, 'left', _this);
                    } else if (toValue < 0) {
                        var _this_props_onSwipeableRightOpen, _this_props2, _this_props_onSwipeableOpen1, _this_props3;
                        (_this_props_onSwipeableRightOpen = (_this_props2 = _this.props).onSwipeableRightOpen) === null || _this_props_onSwipeableRightOpen === void 0 ? void 0 : _this_props_onSwipeableRightOpen.call(_this_props2);
                        (_this_props_onSwipeableOpen1 = (_this_props3 = _this.props).onSwipeableOpen) === null || _this_props_onSwipeableOpen1 === void 0 ? void 0 : _this_props_onSwipeableOpen1.call(_this_props3, 'right', _this);
                    } else {
                        var _this_props_onSwipeableClose, _this_props4;
                        var closingDirection = fromValue > 0 ? 'left' : 'right';
                        (_this_props_onSwipeableClose = (_this_props4 = _this.props).onSwipeableClose) === null || _this_props_onSwipeableClose === void 0 ? void 0 : _this_props_onSwipeableClose.call(_this_props4, closingDirection, _this);
                    }
                }
            });
            if (toValue > 0) {
                var _this_props_onSwipeableLeftWillOpen, _this_props, _this_props_onSwipeableWillOpen, _this_props1;
                (_this_props_onSwipeableLeftWillOpen = (_this_props = _this.props).onSwipeableLeftWillOpen) === null || _this_props_onSwipeableLeftWillOpen === void 0 ? void 0 : _this_props_onSwipeableLeftWillOpen.call(_this_props);
                (_this_props_onSwipeableWillOpen = (_this_props1 = _this.props).onSwipeableWillOpen) === null || _this_props_onSwipeableWillOpen === void 0 ? void 0 : _this_props_onSwipeableWillOpen.call(_this_props1, 'left');
            } else if (toValue < 0) {
                var _this_props_onSwipeableRightWillOpen, _this_props2, _this_props_onSwipeableWillOpen1, _this_props3;
                (_this_props_onSwipeableRightWillOpen = (_this_props2 = _this.props).onSwipeableRightWillOpen) === null || _this_props_onSwipeableRightWillOpen === void 0 ? void 0 : _this_props_onSwipeableRightWillOpen.call(_this_props2);
                (_this_props_onSwipeableWillOpen1 = (_this_props3 = _this.props).onSwipeableWillOpen) === null || _this_props_onSwipeableWillOpen1 === void 0 ? void 0 : _this_props_onSwipeableWillOpen1.call(_this_props3, 'right');
            } else {
                var _this_props_onSwipeableWillClose, _this_props4;
                var closingDirection = fromValue > 0 ? 'left' : 'right';
                (_this_props_onSwipeableWillClose = (_this_props4 = _this.props).onSwipeableWillClose) === null || _this_props_onSwipeableWillClose === void 0 ? void 0 : _this_props_onSwipeableWillClose.call(_this_props4, closingDirection);
            }
        }, _this.onRowLayout = (ref)=>{
            var nativeEvent = ref.nativeEvent;
            _this.setState({
                rowWidth: nativeEvent.layout.width
            });
        }, _this.currentOffset = ()=>{
            var _this_state = _this.state, _this_state_leftWidth = _this_state.leftWidth, leftWidth = _this_state_leftWidth === void 0 ? 0 : _this_state_leftWidth, _this_state_rowWidth = _this_state.rowWidth, rowWidth = _this_state_rowWidth === void 0 ? 0 : _this_state_rowWidth, rowState = _this_state.rowState;
            var _this_state1 = _this.state, _this_state_rightOffset = _this_state1.rightOffset, rightOffset = _this_state_rightOffset === void 0 ? rowWidth : _this_state_rightOffset;
            var rightWidth = rowWidth - rightOffset;
            if (rowState === 1) {
                return leftWidth;
            } else if (rowState === -1) {
                return -rightWidth;
            }
            return 0;
        }, _this.close = ()=>{
            _this.animateRow(_this.currentOffset(), 0);
        }, _this.openLeft = ()=>{
            var _this_state = _this.state, _this_state_leftWidth = _this_state.leftWidth, leftWidth = _this_state_leftWidth === void 0 ? 0 : _this_state_leftWidth;
            _this.animateRow(_this.currentOffset(), leftWidth);
        }, _this.openRight = ()=>{
            var _this_state = _this.state, _this_state_rowWidth = _this_state.rowWidth, rowWidth = _this_state_rowWidth === void 0 ? 0 : _this_state_rowWidth;
            var _this_state1 = _this.state, _this_state_rightOffset = _this_state1.rightOffset, rightOffset = _this_state_rightOffset === void 0 ? rowWidth : _this_state_rightOffset;
            var rightWidth = rowWidth - rightOffset;
            _this.animateRow(_this.currentOffset(), -rightWidth);
        }, _this.reset = ()=>{
            var _this_state = _this.state, dragX = _this_state.dragX, rowTranslation = _this_state.rowTranslation;
            dragX.setValue(0);
            rowTranslation.setValue(0);
            _this.setState({
                rowState: 0
            });
        };
        var dragX = new _reactnative.Animated.Value(0);
        _this.state = {
            dragX,
            rowTranslation: new _reactnative.Animated.Value(0),
            rowState: 0,
            leftWidth: undefined,
            rightOffset: undefined,
            rowWidth: undefined
        };
        _this.updateAnimatedEvent(props, _this.state);
        _this.onGestureEvent = _reactnative.Animated.event([
            {
                nativeEvent: {
                    translationX: dragX
                }
            }
        ], {
            useNativeDriver: props.useNativeAnimations
        });
        return _this;
    }
    _create_class._(Swipeable, [
        {
            key: "shouldComponentUpdate",
            value: function shouldComponentUpdate(props, state) {
                if (this.props.friction !== props.friction || this.props.overshootLeft !== props.overshootLeft || this.props.overshootRight !== props.overshootRight || this.props.overshootFriction !== props.overshootFriction || this.state.leftWidth !== state.leftWidth || this.state.rightOffset !== state.rightOffset || this.state.rowWidth !== state.rowWidth) {
                    this.updateAnimatedEvent(props, state);
                }
                return true;
            }
        },
        {
            key: "render",
            value: function render() {
                var rowState = this.state.rowState;
                var _this_props = this.props, children = _this_props.children, renderLeftActions = _this_props.renderLeftActions, renderRightActions = _this_props.renderRightActions, _this_props_dragOffsetFromLeftEdge = _this_props.dragOffsetFromLeftEdge, dragOffsetFromLeftEdge = _this_props_dragOffsetFromLeftEdge === void 0 ? 10 : _this_props_dragOffsetFromLeftEdge, _this_props_dragOffsetFromRightEdge = _this_props.dragOffsetFromRightEdge, dragOffsetFromRightEdge = _this_props_dragOffsetFromRightEdge === void 0 ? 10 : _this_props_dragOffsetFromRightEdge;
                var left = renderLeftActions && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.Animated.View, {
                    style: [
                        styles.leftActions,
                        // All those and below parameters can have ! since they are all
                        // asigned in constructor in `updateAnimatedEvent` but TS cannot spot
                        // it for some reason
                        {
                            transform: [
                                {
                                    translateX: this.leftActionTranslate
                                }
                            ]
                        }
                    ],
                    children: [
                        renderLeftActions(this.showLeftAction, this.transX, this),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
                            onLayout: (ref)=>{
                                var nativeEvent = ref.nativeEvent;
                                return this.setState({
                                    leftWidth: nativeEvent.layout.x
                                });
                            }
                        })
                    ]
                });
                var right = renderRightActions && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.Animated.View, {
                    style: [
                        styles.rightActions,
                        {
                            transform: [
                                {
                                    translateX: this.rightActionTranslate
                                }
                            ]
                        }
                    ],
                    children: [
                        renderRightActions(this.showRightAction, this.transX, this),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
                            onLayout: (ref)=>{
                                var nativeEvent = ref.nativeEvent;
                                return this.setState({
                                    rightOffset: nativeEvent.layout.x
                                });
                            }
                        })
                    ]
                });
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(_PanGestureHandler.PanGestureHandler, _object_spread_props._(_object_spread._({
                    activeOffsetX: [
                        -dragOffsetFromRightEdge,
                        dragOffsetFromLeftEdge
                    ],
                    touchAction: "pan-y"
                }, this.props), {
                    onGestureEvent: this.onGestureEvent,
                    onHandlerStateChange: this.onHandlerStateChange,
                    children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.Animated.View, {
                        onLayout: this.onRowLayout,
                        style: [
                            styles.container,
                            this.props.containerStyle
                        ],
                        children: [
                            left,
                            right,
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_TapGestureHandler.TapGestureHandler, {
                                enabled: rowState !== 0,
                                touchAction: "pan-y",
                                onHandlerStateChange: this.onTapHandlerStateChange,
                                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Animated.View, {
                                    pointerEvents: rowState === 0 ? 'auto' : 'box-only',
                                    style: [
                                        {
                                            transform: [
                                                {
                                                    translateX: this.transX
                                                }
                                            ]
                                        },
                                        this.props.childrenContainerStyle
                                    ],
                                    children: children
                                })
                            })
                        ]
                    })
                }));
            }
        }
    ]);
    return Swipeable;
}(_react.Component);
Swipeable.defaultProps = {
    friction: 1,
    overshootFriction: 1,
    useNativeAnimations: true
};
var styles = _reactnative.StyleSheet.create({
    container: {
        overflow: 'hidden'
    },
    leftActions: _object_spread_props._(_object_spread._({}, _reactnative.StyleSheet.absoluteFillObject), {
        flexDirection: _reactnative.I18nManager.isRTL ? 'row-reverse' : 'row'
    }),
    rightActions: _object_spread_props._(_object_spread._({}, _reactnative.StyleSheet.absoluteFillObject), {
        flexDirection: _reactnative.I18nManager.isRTL ? 'row' : 'row-reverse'
    })
});


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/components/Text.tsx": 
/*!***********************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/components/Text.tsx ***!
  \***********************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "Text", ({
    enumerable: true,
    get: function() {
        return Text;
    }
}));
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _object_without_properties = __webpack_require__(/*! @swc/helpers/_/_object_without_properties */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_object_without_properties.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/.pnpm/react@19.0.0/node_modules/react/jsx-runtime.js");
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react"));
var _reactnative = __webpack_require__(/*! react-native */ "webpack/sharing/consume/default/react-native/react-native");
var _gestureObjects = __webpack_require__(/*! ../handlers/gestures/gestureObjects */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/gestureObjects.ts");
var _GestureDetector = __webpack_require__(/*! ../handlers/gestures/GestureDetector */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/GestureDetector/index.tsx");
var Text = /*#__PURE__*/ (0, _react.forwardRef)((props, ref)=>{
    var onPress = props.onPress, onLongPress = props.onLongPress, rest = _object_without_properties._(props, [
        "onPress",
        "onLongPress"
    ]);
    var textRef = (0, _react.useRef)(null);
    var native = _gestureObjects.GestureObjects.Native().runOnJS(true);
    var refHandler = (node)=>{
        textRef.current = node;
        if (ref === null) {
            return;
        }
        if (typeof ref === 'function') {
            ref(node);
        } else {
            ref.current = node;
        }
    };
    // This is a special case for `Text` component. After https://github.com/software-mansion/react-native-gesture-handler/pull/3379 we check for
    // `displayName` field. However, `Text` from RN has this field set to `Text`, but is also present in `RNSVGElements` set.
    // We don't want to treat our `Text` as the one from `SVG`, therefore we add special field to ref.
    refHandler.rngh = true;
    (0, _react.useEffect)(()=>{
        if (_reactnative.Platform.OS !== 'web') {
            return;
        }
        var textElement = ref ? ref.current : textRef.current;
        // At this point we are sure that textElement is div in HTML tree
        textElement === null || textElement === void 0 ? void 0 : textElement.setAttribute('rnghtext', 'true');
    }, []);
    return onPress || onLongPress ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_GestureDetector.GestureDetector, {
        gesture: native,
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Text, _object_spread._({
            onPress: onPress,
            onLongPress: onLongPress,
            ref: refHandler
        }, rest))
    }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Text, _object_spread._({
        ref: ref
    }, rest));
});


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/components/gestureHandlerRootHOC.tsx": 
/*!****************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/components/gestureHandlerRootHOC.tsx ***!
  \****************************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return gestureHandlerRootHOC;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/.pnpm/react@19.0.0/node_modules/react/jsx-runtime.js");
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react"));
var _reactnative = __webpack_require__(/*! react-native */ "webpack/sharing/consume/default/react-native/react-native");
var _hoistnonreactstatics = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! hoist-non-react-statics */ "./node_modules/.pnpm/hoist-non-react-statics@3.3.2/node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js"));
var _GestureHandlerRootView = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./GestureHandlerRootView */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/components/GestureHandlerRootView.tsx"));
function gestureHandlerRootHOC(Component, containerStyles) {
    function Wrapper(props) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_GestureHandlerRootView.default, {
            style: [
                styles.container,
                containerStyles
            ],
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(Component, _object_spread._({}, props))
        });
    }
    Wrapper.displayName = `gestureHandlerRootHOC(${Component.displayName || Component.name})`;
    // @ts-ignore - hoistNonReactStatics uses old version of @types/react
    (0, _hoistnonreactstatics.default)(Wrapper, Component);
    return Wrapper;
}
var styles = _reactnative.StyleSheet.create({
    container: {
        flex: 1
    }
});


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/components/touchables/GenericTouchable.tsx": 
/*!**********************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/components/touchables/GenericTouchable.tsx ***!
  \**********************************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get TOUCHABLE_STATE () {
        return TOUCHABLE_STATE;
    },
    get default () {
        return GenericTouchable;
    }
});
var _call_super = __webpack_require__(/*! @swc/helpers/_/_call_super */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_call_super.cjs");
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_create_class.cjs");
var _inherits = __webpack_require__(/*! @swc/helpers/_/_inherits */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_inherits.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _object_spread_props = __webpack_require__(/*! @swc/helpers/_/_object_spread_props */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_object_spread_props.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/.pnpm/react@19.0.0/node_modules/react/jsx-runtime.js");
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react"));
var _reactnative = __webpack_require__(/*! react-native */ "webpack/sharing/consume/default/react-native/react-native");
var _State = __webpack_require__(/*! ../../State */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/State.ts");
var _GestureButtons = __webpack_require__(/*! ../GestureButtons */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/components/GestureButtons.tsx");
var TOUCHABLE_STATE = {
    UNDETERMINED: 0,
    BEGAN: 1,
    MOVED_OUTSIDE: 2
};
var GenericTouchable = /*#__PURE__*/ function(Component) {
    "use strict";
    _inherits._(GenericTouchable, Component);
    function GenericTouchable() {
        _class_call_check._(this, GenericTouchable);
        var _this;
        _this = _call_super._(this, GenericTouchable, arguments), // This flag is required since recognition of longPress implies not-invoking onPress
        _this.longPressDetected = false, _this.pointerInside = true, // State of touchable
        _this.STATE = TOUCHABLE_STATE.UNDETERMINED, _this.onGestureEvent = (ref)=>{
            var pointerInside = ref.nativeEvent.pointerInside;
            if (_this.pointerInside !== pointerInside) {
                if (pointerInside) {
                    _this.onMoveIn();
                } else {
                    _this.onMoveOut();
                }
            }
            _this.pointerInside = pointerInside;
        }, _this.onHandlerStateChange = (ref)=>{
            var nativeEvent = ref.nativeEvent;
            var state = nativeEvent.state;
            if (state === _State.State.CANCELLED || state === _State.State.FAILED) {
                // Need to handle case with external cancellation (e.g. by ScrollView)
                _this.moveToState(TOUCHABLE_STATE.UNDETERMINED);
            } else if (// This platform check is an implication of slightly different behavior of handlers on different platform.
            // And Android "Active" state is achieving on first move of a finger, not on press in.
            // On iOS event on "Began" is not delivered.
            state === (_reactnative.Platform.OS !== 'android' ? _State.State.ACTIVE : _State.State.BEGAN) && _this.STATE === TOUCHABLE_STATE.UNDETERMINED) {
                // Moving inside requires
                _this.handlePressIn();
            } else if (state === _State.State.END) {
                var shouldCallOnPress = !_this.longPressDetected && _this.STATE !== TOUCHABLE_STATE.MOVED_OUTSIDE && _this.pressOutTimeout === null;
                _this.handleGoToUndetermined();
                if (shouldCallOnPress) {
                    var // Calls only inside component whether no long press was called previously
                    _this_props_onPress, _this_props;
                    (_this_props_onPress = (_this_props = _this.props).onPress) === null || _this_props_onPress === void 0 ? void 0 : _this_props_onPress.call(_this_props);
                }
            }
        }, _this.onLongPressDetected = ()=>{
            var // Checked for in the caller of `onLongPressDetected`, but better to check twice
            _this_props_onLongPress, _this_props;
            _this.longPressDetected = true;
            (_this_props_onLongPress = (_this_props = _this.props).onLongPress) === null || _this_props_onLongPress === void 0 ? void 0 : _this_props_onLongPress.call(_this_props);
        };
        return _this;
    }
    _create_class._(GenericTouchable, [
        {
            // handlePressIn in called on first touch on traveling inside component.
            // Handles state transition with delay.
            key: "handlePressIn",
            value: function handlePressIn() {
                if (this.props.delayPressIn) {
                    this.pressInTimeout = setTimeout(()=>{
                        this.moveToState(TOUCHABLE_STATE.BEGAN);
                        this.pressInTimeout = null;
                    }, this.props.delayPressIn);
                } else {
                    this.moveToState(TOUCHABLE_STATE.BEGAN);
                }
                if (this.props.onLongPress) {
                    var time = (this.props.delayPressIn || 0) + (this.props.delayLongPress || 0);
                    this.longPressTimeout = setTimeout(this.onLongPressDetected, time);
                }
            }
        },
        {
            // handleMoveOutside in called on traveling outside component.
            // Handles state transition with delay.
            key: "handleMoveOutside",
            value: function handleMoveOutside() {
                if (this.props.delayPressOut) {
                    this.pressOutTimeout = this.pressOutTimeout || setTimeout(()=>{
                        this.moveToState(TOUCHABLE_STATE.MOVED_OUTSIDE);
                        this.pressOutTimeout = null;
                    }, this.props.delayPressOut);
                } else {
                    this.moveToState(TOUCHABLE_STATE.MOVED_OUTSIDE);
                }
            }
        },
        {
            // handleGoToUndetermined transits to UNDETERMINED state with proper delay
            key: "handleGoToUndetermined",
            value: function handleGoToUndetermined() {
                clearTimeout(this.pressOutTimeout); // TODO: maybe it can be undefined
                if (this.props.delayPressOut) {
                    this.pressOutTimeout = setTimeout(()=>{
                        if (this.STATE === TOUCHABLE_STATE.UNDETERMINED) {
                            this.moveToState(TOUCHABLE_STATE.BEGAN);
                        }
                        this.moveToState(TOUCHABLE_STATE.UNDETERMINED);
                        this.pressOutTimeout = null;
                    }, this.props.delayPressOut);
                } else {
                    if (this.STATE === TOUCHABLE_STATE.UNDETERMINED) {
                        this.moveToState(TOUCHABLE_STATE.BEGAN);
                    }
                    this.moveToState(TOUCHABLE_STATE.UNDETERMINED);
                }
            }
        },
        {
            key: "componentDidMount",
            value: function componentDidMount() {
                this.reset();
            }
        },
        {
            // Reset timeout to prevent memory leaks.
            key: "reset",
            value: function reset() {
                this.longPressDetected = false;
                this.pointerInside = true;
                clearTimeout(this.pressInTimeout);
                clearTimeout(this.pressOutTimeout);
                clearTimeout(this.longPressTimeout);
                this.pressOutTimeout = null;
                this.longPressTimeout = null;
                this.pressInTimeout = null;
            }
        },
        {
            // All states' transitions are defined here.
            key: "moveToState",
            value: function moveToState(newState) {
                var // Finally call lister (used by subclasses)
                _this_props_onStateChange, _this_props;
                if (newState === this.STATE) {
                    // Ignore dummy transitions
                    return;
                }
                if (newState === TOUCHABLE_STATE.BEGAN) {
                    var // First touch and moving inside
                    _this_props_onPressIn, _this_props1;
                    (_this_props_onPressIn = (_this_props1 = this.props).onPressIn) === null || _this_props_onPressIn === void 0 ? void 0 : _this_props_onPressIn.call(_this_props1);
                } else if (newState === TOUCHABLE_STATE.MOVED_OUTSIDE) {
                    var // Moving outside
                    _this_props_onPressOut, _this_props2;
                    (_this_props_onPressOut = (_this_props2 = this.props).onPressOut) === null || _this_props_onPressOut === void 0 ? void 0 : _this_props_onPressOut.call(_this_props2);
                } else if (newState === TOUCHABLE_STATE.UNDETERMINED) {
                    // Need to reset each time on transition to UNDETERMINED
                    this.reset();
                    if (this.STATE === TOUCHABLE_STATE.BEGAN) {
                        var // ... and if it happens inside button.
                        _this_props_onPressOut1, _this_props3;
                        (_this_props_onPressOut1 = (_this_props3 = this.props).onPressOut) === null || _this_props_onPressOut1 === void 0 ? void 0 : _this_props_onPressOut1.call(_this_props3);
                    }
                }
                (_this_props_onStateChange = (_this_props = this.props).onStateChange) === null || _this_props_onStateChange === void 0 ? void 0 : _this_props_onStateChange.call(_this_props, this.STATE, newState);
                // ... and make transition.
                this.STATE = newState;
            }
        },
        {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
                // To prevent memory leaks
                this.reset();
            }
        },
        {
            key: "onMoveIn",
            value: function onMoveIn() {
                if (this.STATE === TOUCHABLE_STATE.MOVED_OUTSIDE) {
                    // This call is not throttled with delays (like in RN's implementation).
                    this.moveToState(TOUCHABLE_STATE.BEGAN);
                }
            }
        },
        {
            key: "onMoveOut",
            value: function onMoveOut() {
                // Long press should no longer be detected
                clearTimeout(this.longPressTimeout);
                this.longPressTimeout = null;
                if (this.STATE === TOUCHABLE_STATE.BEGAN) {
                    this.handleMoveOutside();
                }
            }
        },
        {
            key: "render",
            value: function render() {
                var hitSlop = (typeof this.props.hitSlop === 'number' ? {
                    top: this.props.hitSlop,
                    left: this.props.hitSlop,
                    bottom: this.props.hitSlop,
                    right: this.props.hitSlop
                } : this.props.hitSlop) ?? undefined;
                var coreProps = {
                    accessible: this.props.accessible !== false,
                    accessibilityLabel: this.props.accessibilityLabel,
                    accessibilityHint: this.props.accessibilityHint,
                    accessibilityRole: this.props.accessibilityRole,
                    // TODO: check if changed to no 's' correctly, also removed 2 props that are no longer available: `accessibilityComponentType` and `accessibilityTraits`,
                    // would be good to check if it is ok for sure, see: https://github.com/facebook/react-native/issues/24016
                    accessibilityState: this.props.accessibilityState,
                    accessibilityActions: this.props.accessibilityActions,
                    onAccessibilityAction: this.props.onAccessibilityAction,
                    nativeID: this.props.nativeID,
                    onLayout: this.props.onLayout
                };
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(_GestureButtons.BaseButton, _object_spread_props._(_object_spread._({
                    style: this.props.containerStyle,
                    onHandlerStateChange: // TODO: not sure if it can be undefined instead of null
                    this.props.disabled ? undefined : this.onHandlerStateChange,
                    onGestureEvent: this.onGestureEvent,
                    hitSlop: hitSlop,
                    userSelect: this.props.userSelect,
                    shouldActivateOnStart: this.props.shouldActivateOnStart,
                    disallowInterruption: this.props.disallowInterruption,
                    testID: this.props.testID,
                    touchSoundDisabled: this.props.touchSoundDisabled ?? false,
                    enabled: !this.props.disabled
                }, this.props.extraButtonProps), {
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Animated.View, _object_spread_props._(_object_spread._({}, coreProps), {
                        style: this.props.style,
                        children: this.props.children
                    }))
                }));
            }
        }
    ]);
    return GenericTouchable;
}(_react.Component);
GenericTouchable.defaultProps = {
    delayLongPress: 600,
    extraButtonProps: {
        rippleColor: 'transparent',
        exclusive: true
    }
};


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/components/touchables/TouchableHighlight.tsx": 
/*!************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/components/touchables/TouchableHighlight.tsx ***!
  \************************************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return TouchableHighlight;
    }
}));
var _call_super = __webpack_require__(/*! @swc/helpers/_/_call_super */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_call_super.cjs");
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_create_class.cjs");
var _inherits = __webpack_require__(/*! @swc/helpers/_/_inherits */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_inherits.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _object_spread_props = __webpack_require__(/*! @swc/helpers/_/_object_spread_props */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_object_spread_props.cjs");
var _object_without_properties = __webpack_require__(/*! @swc/helpers/_/_object_without_properties */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_object_without_properties.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/.pnpm/react@19.0.0/node_modules/react/jsx-runtime.js");
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react"));
var _GenericTouchable = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ./GenericTouchable */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/components/touchables/GenericTouchable.tsx"));
var _reactnative = __webpack_require__(/*! react-native */ "webpack/sharing/consume/default/react-native/react-native");
var TouchableHighlight = /*#__PURE__*/ function(Component) {
    "use strict";
    _inherits._(TouchableHighlight, Component);
    function TouchableHighlight(props) {
        _class_call_check._(this, TouchableHighlight);
        var _this;
        _this = _call_super._(this, TouchableHighlight, [
            props
        ]), // Copied from RN
        _this.showUnderlay = ()=>{
            var _this_props_onShowUnderlay, _this_props;
            if (!_this.hasPressHandler()) {
                return;
            }
            _this.setState({
                extraChildStyle: {
                    opacity: _this.props.activeOpacity
                },
                extraUnderlayStyle: {
                    backgroundColor: _this.props.underlayColor
                }
            });
            (_this_props_onShowUnderlay = (_this_props = _this.props).onShowUnderlay) === null || _this_props_onShowUnderlay === void 0 ? void 0 : _this_props_onShowUnderlay.call(_this_props);
        }, _this.hasPressHandler = ()=>_this.props.onPress || _this.props.onPressIn || _this.props.onPressOut || _this.props.onLongPress, _this.hideUnderlay = ()=>{
            var _this_props_onHideUnderlay, _this_props;
            _this.setState({
                extraChildStyle: null,
                extraUnderlayStyle: null
            });
            (_this_props_onHideUnderlay = (_this_props = _this.props).onHideUnderlay) === null || _this_props_onHideUnderlay === void 0 ? void 0 : _this_props_onHideUnderlay.call(_this_props);
        }, _this.onStateChange = (_from, to)=>{
            if (to === _GenericTouchable.TOUCHABLE_STATE.BEGAN) {
                _this.showUnderlay();
            } else if (to === _GenericTouchable.TOUCHABLE_STATE.UNDETERMINED || to === _GenericTouchable.TOUCHABLE_STATE.MOVED_OUTSIDE) {
                _this.hideUnderlay();
            }
        };
        _this.state = {
            extraChildStyle: null,
            extraUnderlayStyle: null
        };
        return _this;
    }
    _create_class._(TouchableHighlight, [
        {
            key: "renderChildren",
            value: function renderChildren() {
                if (!this.props.children) {
                    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {});
                }
                var child = _react.Children.only(this.props.children); // TODO: not sure if OK but fixes error
                return /*#__PURE__*/ _react.cloneElement(child, {
                    style: _reactnative.StyleSheet.compose(child.props.style, this.state.extraChildStyle)
                });
            }
        },
        {
            key: "render",
            value: function render() {
                var _this_props = this.props, _this_props_style = _this_props.style, style = _this_props_style === void 0 ? {} : _this_props_style, rest = _object_without_properties._(_this_props, [
                    "style"
                ]);
                var extraUnderlayStyle = this.state.extraUnderlayStyle;
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(_GenericTouchable.default, _object_spread_props._(_object_spread._({}, rest), {
                    style: [
                        style,
                        extraUnderlayStyle
                    ],
                    onStateChange: this.onStateChange,
                    children: this.renderChildren()
                }));
            }
        }
    ]);
    return TouchableHighlight;
}(_react.Component);
TouchableHighlight.defaultProps = _object_spread_props._(_object_spread._({}, _GenericTouchable.default.defaultProps), {
    activeOpacity: 0.85,
    delayPressOut: 100,
    underlayColor: 'black'
});


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/components/touchables/TouchableNativeFeedback.tsx": 
/*!*****************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/components/touchables/TouchableNativeFeedback.tsx ***!
  \*****************************************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _reactnative = __webpack_require__(/*! react-native */ "webpack/sharing/consume/default/react-native/react-native");
/**
 * @deprecated TouchableNativeFeedback will be removed in the future version of Gesture Handler. Use Pressable instead.
 */ var TouchableNativeFeedback = _reactnative.TouchableNativeFeedback;
var _default = TouchableNativeFeedback;


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/components/touchables/TouchableOpacity.tsx": 
/*!**********************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/components/touchables/TouchableOpacity.tsx ***!
  \**********************************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return TouchableOpacity;
    }
}));
var _call_super = __webpack_require__(/*! @swc/helpers/_/_call_super */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_call_super.cjs");
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_create_class.cjs");
var _inherits = __webpack_require__(/*! @swc/helpers/_/_inherits */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_inherits.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _object_spread_props = __webpack_require__(/*! @swc/helpers/_/_object_spread_props */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_object_spread_props.cjs");
var _object_without_properties = __webpack_require__(/*! @swc/helpers/_/_object_without_properties */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_object_without_properties.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/.pnpm/react@19.0.0/node_modules/react/jsx-runtime.js");
var _reactnative = __webpack_require__(/*! react-native */ "webpack/sharing/consume/default/react-native/react-native");
var _GenericTouchable = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ./GenericTouchable */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/components/touchables/GenericTouchable.tsx"));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react"));
var TouchableOpacity = /*#__PURE__*/ function(Component) {
    "use strict";
    _inherits._(TouchableOpacity, Component);
    function TouchableOpacity() {
        _class_call_check._(this, TouchableOpacity);
        var _this;
        _this = _call_super._(this, TouchableOpacity, arguments), // Opacity is 1 one by default but could be overwritten
        _this.getChildStyleOpacityWithDefault = ()=>{
            var childStyle = _reactnative.StyleSheet.flatten(_this.props.style) || {};
            return childStyle.opacity == null ? 1 : childStyle.opacity.valueOf();
        }, _this.opacity = new _reactnative.Animated.Value(_this.getChildStyleOpacityWithDefault()), _this.setOpacityTo = (value, duration)=>{
            _reactnative.Animated.timing(_this.opacity, {
                toValue: value,
                duration: duration,
                easing: _reactnative.Easing.inOut(_reactnative.Easing.quad),
                useNativeDriver: _this.props.useNativeAnimations ?? true
            }).start();
        }, _this.onStateChange = (_from, to)=>{
            if (to === _GenericTouchable.TOUCHABLE_STATE.BEGAN) {
                _this.setOpacityTo(_this.props.activeOpacity, 0);
            } else if (to === _GenericTouchable.TOUCHABLE_STATE.UNDETERMINED || to === _GenericTouchable.TOUCHABLE_STATE.MOVED_OUTSIDE) {
                _this.setOpacityTo(_this.getChildStyleOpacityWithDefault(), 150);
            }
        };
        return _this;
    }
    _create_class._(TouchableOpacity, [
        {
            key: "render",
            value: function render() {
                var _this_props = this.props, _this_props_style = _this_props.style, style = _this_props_style === void 0 ? {} : _this_props_style, rest = _object_without_properties._(_this_props, [
                    "style"
                ]);
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(_GenericTouchable.default, _object_spread_props._(_object_spread._({}, rest), {
                    style: [
                        style,
                        {
                            opacity: this.opacity
                        }
                    ],
                    onStateChange: this.onStateChange,
                    children: this.props.children ? this.props.children : /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {})
                }));
            }
        }
    ]);
    return TouchableOpacity;
}(_react.Component);
TouchableOpacity.defaultProps = _object_spread_props._(_object_spread._({}, _GenericTouchable.default.defaultProps), {
    activeOpacity: 0.2
});


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/components/touchables/TouchableWithoutFeedback.tsx": 
/*!******************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/components/touchables/TouchableWithoutFeedback.tsx ***!
  \******************************************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _object_without_properties = __webpack_require__(/*! @swc/helpers/_/_object_without_properties */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_object_without_properties.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/.pnpm/react@19.0.0/node_modules/react/jsx-runtime.js");
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react"));
var _GenericTouchable = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./GenericTouchable */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/components/touchables/GenericTouchable.tsx"));
/**
 * @deprecated TouchableWithoutFeedback will be removed in the future version of Gesture Handler. Use Pressable instead.
 */ var TouchableWithoutFeedback = /*#__PURE__*/ _react.forwardRef((_param, ref)=>{
    var _param_delayLongPress = _param.delayLongPress, delayLongPress = _param_delayLongPress === void 0 ? 600 : _param_delayLongPress, _param_extraButtonProps = _param.extraButtonProps, extraButtonProps = _param_extraButtonProps === void 0 ? {
        rippleColor: 'transparent',
        exclusive: true
    } : _param_extraButtonProps, rest = _object_without_properties._(_param, [
        "delayLongPress",
        "extraButtonProps"
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_GenericTouchable.default, _object_spread._({
        ref: ref,
        delayLongPress: delayLongPress,
        extraButtonProps: extraButtonProps
    }, rest));
});
var _default = TouchableWithoutFeedback;


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/PressabilityDebugView.tsx": 
/*!**************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/PressabilityDebugView.tsx ***!
  \**************************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
// @ts-ignore it's not exported so we need to import it from path
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "PressabilityDebugView", ({
    enumerable: true,
    get: function() {
        return _PressabilityDebug.PressabilityDebugView;
    }
}));
var _PressabilityDebug = __webpack_require__(/*! react-native/Libraries/Pressability/PressabilityDebug */ "webpack/sharing/consume/default/react-native/Libraries/Pressability/PressabilityDebug/react-native/Libraries/Pressability/PressabilityDebug");


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/createHandler.tsx": 
/*!******************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/createHandler.tsx ***!
  \******************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return createHandler;
    }
}));
var _call_super = __webpack_require__(/*! @swc/helpers/_/_call_super */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_call_super.cjs");
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_create_class.cjs");
var _inherits = __webpack_require__(/*! @swc/helpers/_/_inherits */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_inherits.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _object_spread_props = __webpack_require__(/*! @swc/helpers/_/_object_spread_props */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_object_spread_props.cjs");
var _to_consumable_array = __webpack_require__(/*! @swc/helpers/_/_to_consumable_array */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_to_consumable_array.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/.pnpm/react@19.0.0/node_modules/react/jsx-runtime.js");
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react"));
var _reactnative = __webpack_require__(/*! react-native */ "webpack/sharing/consume/default/react-native/react-native");
var _customDirectEventTypes = __webpack_require__(/*! ./customDirectEventTypes */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/customDirectEventTypes.ts");
var _RNGestureHandlerModule = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../RNGestureHandlerModule */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/RNGestureHandlerModule.ts"));
var _State = __webpack_require__(/*! ../State */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/State.ts");
var _handlersRegistry = __webpack_require__(/*! ./handlersRegistry */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/handlersRegistry.ts");
var _getNextHandlerTag = __webpack_require__(/*! ./getNextHandlerTag */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/getNextHandlerTag.ts");
var _utils = __webpack_require__(/*! ./utils */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/utils.ts");
var _findNodeHandle = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../findNodeHandle */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/findNodeHandle.ts"));
var _utils1 = __webpack_require__(/*! ../utils */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/utils.ts");
var _ActionType = __webpack_require__(/*! ../ActionType */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/ActionType.ts");
var _PressabilityDebugView = __webpack_require__(/*! ./PressabilityDebugView */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/PressabilityDebugView.tsx");
var _GestureHandlerRootViewContext = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../GestureHandlerRootViewContext */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/GestureHandlerRootViewContext.ts"));
var _ghQueueMicrotask = __webpack_require__(/*! ../ghQueueMicrotask */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/ghQueueMicrotask.ts");
var _mountRegistry = __webpack_require__(/*! ../mountRegistry */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/mountRegistry.ts");
var _UIManagerAny_getViewManagerConfig;
var UIManagerAny = _reactnative.UIManager;
_customDirectEventTypes.customDirectEventTypes.topGestureHandlerEvent = {
    registrationName: 'onGestureHandlerEvent'
};
var customGHEventsConfigFabricAndroid = {
    topOnGestureHandlerEvent: {
        registrationName: 'onGestureHandlerEvent'
    },
    topOnGestureHandlerStateChange: {
        registrationName: 'onGestureHandlerStateChange'
    }
};
var customGHEventsConfig = _object_spread._({
    onGestureHandlerEvent: {
        registrationName: 'onGestureHandlerEvent'
    },
    onGestureHandlerStateChange: {
        registrationName: 'onGestureHandlerStateChange'
    }
}, (0, _utils1.isFabric)() && _reactnative.Platform.OS === 'android' && customGHEventsConfigFabricAndroid);
// Add gesture specific events to genericDirectEventTypes object exported from UIManager
// native module.
// Once new event types are registered with react it is possible to dispatch these
// events to all kind of native views.
UIManagerAny.genericDirectEventTypes = _object_spread._({}, UIManagerAny.genericDirectEventTypes, customGHEventsConfig);
var UIManagerConstants = (_UIManagerAny_getViewManagerConfig = UIManagerAny.getViewManagerConfig) === null || _UIManagerAny_getViewManagerConfig === void 0 ? void 0 : _UIManagerAny_getViewManagerConfig.call(UIManagerAny, 'getConstants');
if (UIManagerConstants) {
    UIManagerConstants.genericDirectEventTypes = _object_spread._({}, UIManagerConstants.genericDirectEventTypes, customGHEventsConfig);
}
// Wrap JS responder calls and notify gesture handler manager
var tmp = UIManagerAny.setJSResponder, oldSetJSResponder = tmp === void 0 ? ()=>{
// no-op
} : tmp, tmp1 = UIManagerAny.clearJSResponder, oldClearJSResponder = tmp1 === void 0 ? ()=>{
// no-op
} : tmp1;
UIManagerAny.setJSResponder = (tag, blockNativeResponder)=>{
    _RNGestureHandlerModule.default.handleSetJSResponder(tag, blockNativeResponder);
    oldSetJSResponder(tag, blockNativeResponder);
};
UIManagerAny.clearJSResponder = ()=>{
    _RNGestureHandlerModule.default.handleClearJSResponder();
    oldClearJSResponder();
};
var allowTouches = true;
var DEV_ON_ANDROID =  true && _reactnative.Platform.OS === 'android';
// Toggled inspector blocks touch events in order to allow inspecting on Android
// This needs to be a global variable in order to set initial state for `allowTouches` property in Handler component
if (DEV_ON_ANDROID) {
    _reactnative.DeviceEventEmitter.addListener('toggleElementInspector', ()=>{
        allowTouches = !allowTouches;
    });
}
function hasUnresolvedRefs(props) {
    // TODO(TS) - add type for extract arg
    var extract = (refs)=>{
        if (!Array.isArray(refs)) {
            return refs && refs.current === null;
        }
        return refs.some((r)=>r && r.current === null);
    };
    return extract(props['simultaneousHandlers']) || extract(props['waitFor']);
}
var stateToPropMappings = {
    [_State.State.UNDETERMINED]: undefined,
    [_State.State.BEGAN]: 'onBegan',
    [_State.State.FAILED]: 'onFailed',
    [_State.State.CANCELLED]: 'onCancelled',
    [_State.State.ACTIVE]: 'onActivated',
    [_State.State.END]: 'onEnded'
};
var UNRESOLVED_REFS_RETRY_LIMIT = 1;
function createHandler(ref) {
    var name = ref.name, _ref_allowedProps = ref.allowedProps, allowedProps = _ref_allowedProps === void 0 ? [] : _ref_allowedProps, _ref_config = ref.config, config = _ref_config === void 0 ? {} : _ref_config, transformProps = ref.transformProps, _ref_customNativeProps = ref.customNativeProps, customNativeProps = _ref_customNativeProps === void 0 ? [] : _ref_customNativeProps;
    var Handler = /*#__PURE__*/ function(_React_Component) {
        "use strict";
        _inherits._(Handler, _React_Component);
        function Handler(props) {
            _class_call_check._(this, Handler);
            var _this;
            _this = _call_super._(this, Handler, [
                props
            ]), _this.handlerTag = -1, _this.onGestureHandlerEvent = (event)=>{
                if (event.nativeEvent.handlerTag === _this.handlerTag) {
                    if (typeof _this.props.onGestureEvent === 'function') {
                        var _this_props_onGestureEvent, _this_props;
                        (_this_props_onGestureEvent = (_this_props = _this.props).onGestureEvent) === null || _this_props_onGestureEvent === void 0 ? void 0 : _this_props_onGestureEvent.call(_this_props, event);
                    }
                } else {
                    var _this_props_onGestureHandlerEvent, _this_props1;
                    (_this_props_onGestureHandlerEvent = (_this_props1 = _this.props).onGestureHandlerEvent) === null || _this_props_onGestureHandlerEvent === void 0 ? void 0 : _this_props_onGestureHandlerEvent.call(_this_props1, event);
                }
            }, // TODO(TS) - make sure this is right type for event
            _this.onGestureHandlerStateChange = (event)=>{
                if (event.nativeEvent.handlerTag === _this.handlerTag) {
                    if (typeof _this.props.onHandlerStateChange === 'function') {
                        var _this_props_onHandlerStateChange, _this_props;
                        (_this_props_onHandlerStateChange = (_this_props = _this.props).onHandlerStateChange) === null || _this_props_onHandlerStateChange === void 0 ? void 0 : _this_props_onHandlerStateChange.call(_this_props, event);
                    }
                    var state = event.nativeEvent.state;
                    var stateEventName = stateToPropMappings[state];
                    var eventHandler = stateEventName && _this.props[stateEventName];
                    if (eventHandler && typeof eventHandler === 'function') {
                        eventHandler(event);
                    }
                } else {
                    var _this_props_onGestureHandlerStateChange, _this_props1;
                    (_this_props_onGestureHandlerStateChange = (_this_props1 = _this.props).onGestureHandlerStateChange) === null || _this_props_onGestureHandlerStateChange === void 0 ? void 0 : _this_props_onGestureHandlerStateChange.call(_this_props1, event);
                }
            }, _this.refHandler = (node)=>{
                var _child_props;
                _this.viewNode = node;
                var child = _react.Children.only(_this.props.children);
                // @ts-ignore Since React 19 ref is accessible as standard prop
                // https://react.dev/blog/2024/04/25/react-19-upgrade-guide#deprecated-element-ref
                var _$ref = (0, _utils1.isReact19)() ? (_child_props = child.props) === null || _child_props === void 0 ? void 0 : _child_props.ref : child === null || child === void 0 ? void 0 : child.ref;
                if (!_$ref) {
                    return;
                }
                if (typeof _$ref === 'function') {
                    _$ref(node);
                } else {
                    _$ref.current = node;
                }
            }, _this.createGestureHandler = (newConfig)=>{
                _this.handlerTag = (0, _getNextHandlerTag.getNextHandlerTag)();
                _this.config = newConfig;
                _RNGestureHandlerModule.default.createGestureHandler(name, _this.handlerTag, newConfig);
            }, _this.attachGestureHandler = (newViewTag)=>{
                _this.viewTag = newViewTag;
                if (_reactnative.Platform.OS === 'web') {
                    // Typecast due to dynamic resolution, attachGestureHandler should have web version signature in this branch
                    _RNGestureHandlerModule.default.attachGestureHandler(_this.handlerTag, newViewTag, _ActionType.ActionType.JS_FUNCTION_OLD_API, // ignored on web
                    _this.propsRef);
                } else {
                    (0, _handlersRegistry.registerOldGestureHandler)(_this.handlerTag, {
                        onGestureEvent: _this.onGestureHandlerEvent,
                        onGestureStateChange: _this.onGestureHandlerStateChange
                    });
                    var actionType = (()=>{
                        var _this_props, _this_props1;
                        var onGestureEvent = (_this_props = _this.props) === null || _this_props === void 0 ? void 0 : _this_props.onGestureEvent;
                        var isGestureHandlerWorklet = onGestureEvent && ('current' in onGestureEvent || 'workletEventHandler' in onGestureEvent);
                        var onHandlerStateChange = (_this_props1 = _this.props) === null || _this_props1 === void 0 ? void 0 : _this_props1.onHandlerStateChange;
                        var isStateChangeHandlerWorklet = onHandlerStateChange && ('current' in onHandlerStateChange || 'workletEventHandler' in onHandlerStateChange);
                        var isReanimatedHandler = isGestureHandlerWorklet || isStateChangeHandlerWorklet;
                        if (isReanimatedHandler) {
                            // Reanimated worklet
                            return _ActionType.ActionType.REANIMATED_WORKLET;
                        } else if (onGestureEvent && '__isNative' in onGestureEvent) {
                            // Animated.event with useNativeDriver: true
                            return _ActionType.ActionType.NATIVE_ANIMATED_EVENT;
                        } else {
                            // JS callback or Animated.event with useNativeDriver: false
                            return _ActionType.ActionType.JS_FUNCTION_OLD_API;
                        }
                    })();
                    _RNGestureHandlerModule.default.attachGestureHandler(_this.handlerTag, newViewTag, actionType);
                }
                (0, _utils.scheduleFlushOperations)();
                (0, _ghQueueMicrotask.ghQueueMicrotask)(()=>{
                    _mountRegistry.MountRegistry.gestureHandlerWillMount(_this);
                });
            }, _this.updateGestureHandler = (newConfig)=>{
                _this.config = newConfig;
                _RNGestureHandlerModule.default.updateGestureHandler(_this.handlerTag, newConfig);
                (0, _utils.scheduleFlushOperations)();
            };
            _this.config = {};
            _this.propsRef = /*#__PURE__*/ _react.createRef();
            _this.isMountedRef = /*#__PURE__*/ _react.createRef();
            _this.state = {
                allowTouches
            };
            if (props.id) {
                if (_handlersRegistry.handlerIDToTag[props.id] !== undefined) {
                    throw new Error(`Handler with ID "${props.id}" already registered`);
                }
                _handlersRegistry.handlerIDToTag[props.id] = _this.handlerTag;
            }
            return _this;
        }
        _create_class._(Handler, [
            {
                key: "componentDidMount",
                value: function componentDidMount() {
                    var props = this.props;
                    this.isMountedRef.current = true;
                    if (DEV_ON_ANDROID) {
                        this.inspectorToggleListener = _reactnative.DeviceEventEmitter.addListener('toggleElementInspector', ()=>{
                            this.setState((_)=>({
                                    allowTouches
                                }));
                            this.update(UNRESOLVED_REFS_RETRY_LIMIT);
                        });
                    }
                    if (hasUnresolvedRefs(props)) {
                        // If there are unresolved refs (e.g. ".current" has not yet been set)
                        // passed as `simultaneousHandlers` or `waitFor`, we enqueue a call to
                        // _update method that will try to update native handler props using
                        // queueMicrotask. This makes it so update() function gets called after all
                        // react components are mounted and we expect the missing ref object to
                        // be resolved by then.
                        (0, _ghQueueMicrotask.ghQueueMicrotask)(()=>{
                            this.update(UNRESOLVED_REFS_RETRY_LIMIT);
                        });
                    }
                    this.createGestureHandler((0, _utils.filterConfig)(transformProps ? transformProps(this.props) : this.props, _to_consumable_array._(allowedProps).concat(_to_consumable_array._(customNativeProps)), config));
                    if (!this.viewNode) {
                        throw new Error(`[Gesture Handler] Failed to obtain view for ${Handler.displayName}. Note that old API doesn't support functional components.`);
                    }
                    this.attachGestureHandler((0, _findNodeHandle.default)(this.viewNode)); // TODO(TS) - check if this can be null
                }
            },
            {
                key: "componentDidUpdate",
                value: function componentDidUpdate() {
                    var viewTag = (0, _findNodeHandle.default)(this.viewNode);
                    if (this.viewTag !== viewTag) {
                        this.attachGestureHandler(viewTag); // TODO(TS) - check interaction between _viewTag & findNodeHandle
                    }
                    this.update(UNRESOLVED_REFS_RETRY_LIMIT);
                }
            },
            {
                key: "componentWillUnmount",
                value: function componentWillUnmount() {
                    var _this_inspectorToggleListener;
                    (_this_inspectorToggleListener = this.inspectorToggleListener) === null || _this_inspectorToggleListener === void 0 ? void 0 : _this_inspectorToggleListener.remove();
                    this.isMountedRef.current = false;
                    if (_reactnative.Platform.OS !== 'web') {
                        (0, _handlersRegistry.unregisterOldGestureHandler)(this.handlerTag);
                    }
                    _RNGestureHandlerModule.default.dropGestureHandler(this.handlerTag);
                    (0, _utils.scheduleFlushOperations)();
                    // We can't use this.props.id directly due to TS generic type narrowing bug, see https://github.com/microsoft/TypeScript/issues/13995 for more context
                    var handlerID = this.props.id;
                    if (handlerID) {
                        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete
                        delete _handlersRegistry.handlerIDToTag[handlerID];
                    }
                    _mountRegistry.MountRegistry.gestureHandlerWillUnmount(this);
                }
            },
            {
                key: "update",
                value: function update(remainingTries) {
                    if (!this.isMountedRef.current) {
                        return;
                    }
                    var props = this.props;
                    // When ref is set via a function i.e. `ref={(r) => refObject.current = r}` instead of
                    // `ref={refObject}` it's possible that it won't be resolved in time. Seems like trying
                    // again is easy enough fix.
                    if (hasUnresolvedRefs(props) && remainingTries > 0) {
                        (0, _ghQueueMicrotask.ghQueueMicrotask)(()=>{
                            this.update(remainingTries - 1);
                        });
                    } else {
                        var newConfig = (0, _utils.filterConfig)(transformProps ? transformProps(this.props) : this.props, _to_consumable_array._(allowedProps).concat(_to_consumable_array._(customNativeProps)), config);
                        if (!(0, _utils1.deepEqual)(this.config, newConfig)) {
                            this.updateGestureHandler(newConfig);
                        }
                    }
                }
            },
            {
                key: "setNativeProps",
                value: function setNativeProps(updates) {
                    var mergedProps = _object_spread._({}, this.props, updates);
                    var newConfig = (0, _utils.filterConfig)(transformProps ? transformProps(mergedProps) : mergedProps, _to_consumable_array._(allowedProps).concat(_to_consumable_array._(customNativeProps)), config);
                    this.updateGestureHandler(newConfig);
                }
            },
            {
                key: "render",
                value: function render() {
                    if ( true && !this.context && !(0, _utils1.isTestEnv)() && _reactnative.Platform.OS !== 'web') {
                        throw new Error(name + ' must be used as a descendant of GestureHandlerRootView. Otherwise the gestures will not be recognized. See https://docs.swmansion.com/react-native-gesture-handler/docs/installation for more details.');
                    }
                    var gestureEventHandler = this.onGestureHandlerEvent;
                    var _this_props = this.props, onGestureEvent = _this_props.onGestureEvent, onGestureHandlerEvent = _this_props.onGestureHandlerEvent;
                    if (onGestureEvent && typeof onGestureEvent !== 'function') {
                        // If it's not a method it should be an native Animated.event
                        // object. We set it directly as the handler for the view
                        // In this case nested handlers are not going to be supported
                        if (onGestureHandlerEvent) {
                            throw new Error('Nesting touch handlers with native animated driver is not supported yet');
                        }
                        gestureEventHandler = onGestureEvent;
                    } else {
                        if (onGestureHandlerEvent && typeof onGestureHandlerEvent !== 'function') {
                            throw new Error('Nesting touch handlers with native animated driver is not supported yet');
                        }
                    }
                    var gestureStateEventHandler = this.onGestureHandlerStateChange;
                    var _this_props1 = this.props, onHandlerStateChange = _this_props1.onHandlerStateChange, onGestureHandlerStateChange = _this_props1.onGestureHandlerStateChange;
                    if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {
                        // If it's not a method it should be an native Animated.event
                        // object. We set it directly as the handler for the view
                        // In this case nested handlers are not going to be supported
                        if (onGestureHandlerStateChange) {
                            throw new Error('Nesting touch handlers with native animated driver is not supported yet');
                        }
                        gestureStateEventHandler = onHandlerStateChange;
                    } else {
                        if (onGestureHandlerStateChange && typeof onGestureHandlerStateChange !== 'function') {
                            throw new Error('Nesting touch handlers with native animated driver is not supported yet');
                        }
                    }
                    var events = {
                        onGestureHandlerEvent: this.state.allowTouches ? gestureEventHandler : undefined,
                        onGestureHandlerStateChange: this.state.allowTouches ? gestureStateEventHandler : undefined
                    };
                    this.propsRef.current = events;
                    var child = null;
                    try {
                        child = _react.Children.only(this.props.children);
                    } catch (e) {
                        throw new Error((0, _utils1.tagMessage)(`${name} got more than one view as a child. If you want the gesture to work on multiple views, wrap them with a common parent and attach the gesture to that view.`));
                    }
                    var grandChildren = child.props.children;
                    if ( true && child.type && (child.type === 'RNGestureHandlerButton' || child.type.name === 'View' || child.type.displayName === 'View')) {
                        grandChildren = _react.Children.toArray(grandChildren);
                        grandChildren.push(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PressabilityDebugView.PressabilityDebugView, {
                            color: "mediumspringgreen",
                            hitSlop: child.props.hitSlop
                        }, "pressabilityDebugView"));
                    }
                    return /*#__PURE__*/ _react.cloneElement(child, _object_spread._(_object_spread_props._(_object_spread._({
                        ref: this.refHandler,
                        collapsable: false
                    }, (0, _utils1.isTestEnv)() ? {
                        handlerType: name,
                        handlerTag: this.handlerTag,
                        enabled: this.props.enabled
                    } : {}), {
                        testID: this.props.testID ?? child.props.testID
                    }), events), grandChildren);
                }
            }
        ]);
        return Handler;
    }(_react.Component);
    Handler.displayName = name;
    Handler.contextType = _GestureHandlerRootViewContext.default;
    return Handler;
}


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/createNativeWrapper.tsx": 
/*!************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/createNativeWrapper.tsx ***!
  \************************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return createNativeWrapper;
    }
}));
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _object_spread = __webpack_require__(/*! @swc/helpers/_/_object_spread */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_object_spread.cjs");
var _object_spread_props = __webpack_require__(/*! @swc/helpers/_/_object_spread_props */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_object_spread_props.cjs");
var _to_consumable_array = __webpack_require__(/*! @swc/helpers/_/_to_consumable_array */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_to_consumable_array.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/.pnpm/react@19.0.0/node_modules/react/jsx-runtime.js");
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react"));
var _NativeViewGestureHandler = __webpack_require__(/*! ./NativeViewGestureHandler */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/NativeViewGestureHandler.ts");
/*
 * This array should consist of:
 *   - All keys in propTypes from NativeGestureHandler
 *     (and all keys in GestureHandlerPropTypes)
 *   - 'onGestureHandlerEvent'
 *   - 'onGestureHandlerStateChange'
 */ var NATIVE_WRAPPER_PROPS_FILTER = _to_consumable_array._(_NativeViewGestureHandler.nativeViewProps).concat([
    'onGestureHandlerEvent',
    'onGestureHandlerStateChange'
]);
function createNativeWrapper(Component, ref) {
    var config = ref === void 0 ? {} : ref;
    var // @ts-ignore if render doesn't exist it will return undefined and go further
    _Component_render;
    var ComponentWrapper = /*#__PURE__*/ _react.forwardRef((props, ref)=>{
        // Filter out props that should be passed to gesture handler wrapper
        var _Object_keys_reduce = Object.keys(props).reduce((res, key)=>{
            // TS being overly protective with it's types, see https://github.com/microsoft/TypeScript/issues/26255#issuecomment-458013731 for more info
            var allowedKeys = NATIVE_WRAPPER_PROPS_FILTER;
            if (allowedKeys.includes(key)) {
                // @ts-ignore FIXME(TS)
                res.gestureHandlerProps[key] = props[key];
            } else {
                // @ts-ignore FIXME(TS)
                res.childProps[key] = props[key];
            }
            return res;
        }, {
            gestureHandlerProps: _object_spread._({}, config),
            childProps: {
                enabled: props.enabled,
                hitSlop: props.hitSlop,
                testID: props.testID
            }
        }), gestureHandlerProps = _Object_keys_reduce.gestureHandlerProps, childProps = _Object_keys_reduce.childProps;
        var _ref = (0, _react.useRef)(null);
        var _gestureHandlerRef = (0, _react.useRef)(null);
        (0, _react.useImperativeHandle)(ref, // @ts-ignore TODO(TS) decide how nulls work in this context
        ()=>{
            var node = _gestureHandlerRef.current;
            // Add handlerTag for relations config
            if (_ref.current && node) {
                // @ts-ignore FIXME(TS) think about createHandler return type
                _ref.current.handlerTag = node.handlerTag;
                return _ref.current;
            }
            return null;
        }, [
            _ref,
            _gestureHandlerRef
        ]);
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_NativeViewGestureHandler.NativeViewGestureHandler, _object_spread_props._(_object_spread._({}, gestureHandlerProps), {
            // @ts-ignore TODO(TS)
            ref: _gestureHandlerRef,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(Component, _object_spread_props._(_object_spread._({}, childProps), {
                ref: _ref
            }))
        }));
    });
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
    ComponentWrapper.displayName = (Component === null || Component === void 0 ? void 0 : Component.displayName) || (Component === null || Component === void 0 ? void 0 : (_Component_render = Component.render) === null || _Component_render === void 0 ? void 0 : _Component_render.name) || typeof Component === 'string' && Component || 'ComponentWrapper';
    return ComponentWrapper;
}


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/GestureDetector/Wrap.tsx": 
/*!**********************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/GestureDetector/Wrap.tsx ***!
  \**********************************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get AnimatedWrap () {
        return AnimatedWrap;
    },
    get Wrap () {
        return Wrap;
    }
});
var _call_super = __webpack_require__(/*! @swc/helpers/_/_call_super */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_call_super.cjs");
var _class_call_check = __webpack_require__(/*! @swc/helpers/_/_class_call_check */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_class_call_check.cjs");
var _create_class = __webpack_require__(/*! @swc/helpers/_/_create_class */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_create_class.cjs");
var _inherits = __webpack_require__(/*! @swc/helpers/_/_inherits */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_inherits.cjs");
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react"));
var _reanimatedWrapper = __webpack_require__(/*! ../reanimatedWrapper */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/reanimatedWrapper.ts");
var _utils = __webpack_require__(/*! ../../../utils */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/utils.ts");
var _Reanimated_default;
var Wrap = /*#__PURE__*/ function(_React_Component) {
    "use strict";
    _inherits._(Wrap, _React_Component);
    function Wrap() {
        _class_call_check._(this, Wrap);
        return _call_super._(this, Wrap, arguments);
    }
    _create_class._(Wrap, [
        {
            key: "render",
            value: function render() {
                try {
                    // I don't think that fighting with types over such a simple function is worth it
                    // The only thing it does is add 'collapsable: false' to the child component
                    // to make sure it is in the native view hierarchy so the detector can find
                    // correct viewTag to attach to.
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    var child = _react.default.Children.only(this.props.children);
                    return /*#__PURE__*/ _react.default.cloneElement(child, {
                        collapsable: false
                    }, // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
                    child.props.children);
                } catch (e) {
                    throw new Error((0, _utils.tagMessage)(`GestureDetector got more than one view as a child. If you want the gesture to work on multiple views, wrap them with a common parent and attach the gesture to that view.`));
                }
            }
        }
    ]);
    return Wrap;
}(_react.default.Component);
var AnimatedWrap = (_reanimatedWrapper.Reanimated === null || _reanimatedWrapper.Reanimated === void 0 ? void 0 : (_Reanimated_default = _reanimatedWrapper.Reanimated.default) === null || _Reanimated_default === void 0 ? void 0 : _Reanimated_default.createAnimatedComponent(Wrap)) ?? Wrap;


}),
"./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/GestureDetector/index.tsx": 
/*!***********************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/GestureDetector/index.tsx ***!
  \***********************************************************************************************************************************************************************************************************************************************/
(function (__unused_webpack_module, exports, __webpack_require__) {
/* eslint-disable react/no-unused-prop-types */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "GestureDetector", ({
    enumerable: true,
    get: function() {
        return GestureDetector;
    }
}));
var _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_interop_require_default.cjs");
var _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ "./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs");
var _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/.pnpm/react@19.0.0/node_modules/react/jsx-runtime.js");
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react"));
var _reactnative = __webpack_require__(/*! react-native */ "webpack/sharing/consume/default/react-native/react-native");
var _findNodeHandle = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../../findNodeHandle */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/findNodeHandle.ts"));
var _utils = __webpack_require__(/*! ../../../utils */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/utils.ts");
var _GestureHandlerRootViewContext = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../../../GestureHandlerRootViewContext */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/GestureHandlerRootViewContext.ts"));
var _useAnimatedGesture = __webpack_require__(/*! ./useAnimatedGesture */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/GestureDetector/useAnimatedGesture.ts");
var _attachHandlers = __webpack_require__(/*! ./attachHandlers */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/GestureDetector/attachHandlers.ts");
var _needsToReattach = __webpack_require__(/*! ./needsToReattach */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/GestureDetector/needsToReattach.ts");
var _dropHandlers = __webpack_require__(/*! ./dropHandlers */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/GestureDetector/dropHandlers.ts");
var _utils1 = __webpack_require__(/*! ./utils */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/GestureDetector/utils.ts");
var _Wrap = __webpack_require__(/*! ./Wrap */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/GestureDetector/Wrap.tsx");
var _useDetectorUpdater = __webpack_require__(/*! ./useDetectorUpdater */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/GestureDetector/useDetectorUpdater.ts");
var _useViewRefHandler = __webpack_require__(/*! ./useViewRefHandler */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/GestureDetector/useViewRefHandler.ts");
var _useMountReactions = __webpack_require__(/*! ./useMountReactions */ "./node_modules/.pnpm/react-native-gesture-handler@2.25.0_react-native@0.78.2_@babel+core@7.27.1_@babel+preset-env@_c7bi4l62mja5f33ouxslvy6pkm/node_modules/react-native-gesture-handler/src/handlers/gestures/GestureDetector/useMountReactions.ts");
function propagateDetectorConfig(props, gesture) {
    var keysToPropagate = [
        'userSelect',
        'enableContextMenu',
        'touchAction'
    ];
    for (var key of keysToPropagate){
        var value = props[key];
        if (value === undefined) {
            continue;
        }
        for (var g of gesture.toGestureArray()){
            var config = g.config;
            config[key] = value;
        }
    }
}
var GestureDetector = (props)=>{
    var rootViewContext = (0, _react.useContext)(_GestureHandlerRootViewContext.default);
    if ( true && !rootViewContext && !(0, _utils.isTestEnv)() && _reactnative.Platform.OS !== 'web') {
        throw new Error('GestureDetector must be used as a descendant of GestureHandlerRootView. Otherwise the gestures will not be recognized. See https://docs.swmansion.com/react-native-gesture-handler/docs/installation for more details.');
    }
    // Gesture config should be wrapped with useMemo to prevent unnecessary re-renders
    var gestureConfig = props.gesture;
    propagateDetectorConfig(props, gestureConfig);
    var gesturesToAttach = (0, _react.useMemo)(()=>gestureConfig.toGestureArray(), [
        gestureConfig
    ]);
    var shouldUseReanimated = gesturesToAttach.some((g)=>g.shouldUseReanimated);
    var webEventHandlersRef = (0, _utils1.useWebEventHandlers)();
    // Store state in ref to prevent unnecessary renders
    var state = (0, _react.useRef)({
        firstRender: true,
        viewRef: null,
        previousViewTag: -1,
        forceRebuildReanimatedEvent: false
    }).current;
    var preparedGesture = _react.default.useRef({
        attachedGestures: [],
        animatedEventHandler: null,
        animatedHandlers: null,
        shouldUseReanimated: shouldUseReanimated,
        isMounted: false
    }).current;
    var updateAttachedGestures = (0, _useDetectorUpdater.useDetectorUpdater)(state, preparedGesture, gesturesToAttach, gestureConfig, webEventHandlersRef);
    var refHandler = (0, _useViewRefHandler.useViewRefHandler)(state, updateAttachedGestures);
    // Reanimated event should be rebuilt only when gestures are reattached, otherwise
    // config update will be enough as all necessary items are stored in shared values anyway
    var needsToRebuildReanimatedEvent = state.firstRender || state.forceRebuildReanimatedEvent || (0, _needsToReattach.needsToReattach)(preparedGesture, gesturesToAttach);
    state.forceRebuildReanimatedEvent = false;
    (0, _useAnimatedGesture.useAnimatedGesture)(preparedGesture, needsToRebuildReanimatedEvent);
    (0, _react.useLayoutEffect)(()=>{
        var viewTag = (0, _findNodeHandle.default)(state.viewRef);
        preparedGesture.isMounted = true;
        (0, _attachHandlers.attachHandlers)({
            preparedGesture,
            gestureConfig,
            gesturesToAttach,
            webEventHandlersRef,
            viewTag
        });
        return ()=>{
            preparedGesture.isMounted = false;
            (0, _dropHandlers.dropHandlers)(preparedGesture);
        };
    }, []);
    (0, _react.useEffect)(()=>{
        if (state.firstRender) {
            state.firstRender = false;
        } else {
            updateAttachedGestures();
        }
    }, [
        props
    ]);
    (0, _useMountReactions.useMountReactions)(updateAttachedGestures, preparedGesture);
    if (shouldUseReanimated) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_Wrap.AnimatedWrap, {
            ref: refHandler,
            onGestureHandlerEvent: preparedGesture.animatedEventHandler,
            children: props.children
        });
    } else {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_Wrap.Wrap, {
            ref: refHandler,
            children: props.children
        });
    }
};


}),

}]);//# sourceMappingURL=vendors-node_modules_pnpm_react-native-gesture-handler_2_25_0_react-native_0_78_2__babel_core-5c489e.chunk.bundle.map?platform=ios